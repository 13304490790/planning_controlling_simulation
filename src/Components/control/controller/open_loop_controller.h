#ifndef OPEN_LOOP_CONTROLLER_H_
#define OPEN_LOOP_CONTROLLER_H_

#include "common/proto/vehicle_config.pb.h"
#include "control/control/trajectory_analyzer.h"
#include "controller.h"

#define FLAGS_enable_csv_debug true

class OpenLoopController : public Controller {
 public:
  /**
   * @brief constructor
   */
  OpenLoopController();

  /**
   * @brief destructor
   */
  virtual ~OpenLoopController();

  /**
   * @brief initialize Controller
   * @param control_conf control configurations
   * @return Status initialization status
   */
  Status Init(std::shared_ptr<DependencyInjector> injector,
              const controller::ControlConf *control_conf) override;

  /**
   * @brief compute control command based on current vehicle status
   *        and target trajectory
   * @param localization vehicle location
   * @param chassis vehicle status e.g., speed, acceleration
   * @param trajectory trajectory generated by planning
   * @param cmd control command
   * @return Status computation status
   */
  Status ComputeControlCommand(
      const controller::LocalizationEstimate *localization,
      const canbus::Chassis *chassis, const planning::ADCTrajectory *trajectory,
      controller::ControlCommand *cmd) override;

  /**
   * @brief reset Controller
   * @return Status reset status
   */
  Status Reset() override;

  /**
   * @brief controller name
   * @return string controller name in string
   */
  std::string Name() const override { return "Open loop controller"; };

  /**
   * @brief stop controller
   */
  void Stop() override;

 private:
  void GetTargetPoint();
  void CloseFile();

 private:
  std::shared_ptr<DependencyInjector> injector_;
  vehicle::VehicleParam vehicle_param_;

  double s_matched_ = 0.0;
  double s_dot_matched_ = 0.0;
  double d_matched_ = 0.0;
  double d_dot_matched_ = 0.0;

  double k_;

  double speed_controller_input_limit_ = 0.0;

  TrajectoryAnalyzer trajectory_analyzer_;

  points::PathPoint matched_point_;
  planning::ADCTrajectory trajectory_;

  FILE *open_loop_log_file_;
};

#endif  // OPEN_LOOP_CONTROLLER_H_