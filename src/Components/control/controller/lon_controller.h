#ifndef _LON_CONTROLLER_H_
#define _LON_CONTROLLER_H_

#include <memory>
#include <string>
#include <vector>

#include "common/config/flags.h"
#include "common/proto/vehicle_config.pb.h"
#include "control/control/interpolation_2d.h"
#include "control/control/leadlag_controller.h"
#include "control/control/pid_controller.h"
#include "control/control/trajectory_analyzer.h"
#include "control/filters/digital_filter.h"
#include "control/filters/digital_filter_coefficients.h"
#include "controller.h"

/**
 * @class LonController
 *
 * @brief Longitudinal controller, to compute brake / throttle values.
 */
class LonController : public Controller {
 public:
  /**
   * @brief constructor
   */
  LonController();

  /**
   * @brief destructor
   */
  virtual ~LonController();

  /**
   * @brief initialize Longitudinal Controller
   * @param control_conf control configurations
   * @return Status initialization status
   */
  Status Init(std::shared_ptr<DependencyInjector> injector,
              const controller::ControlConf *control_conf) override;

  /**
   * @brief compute brake / throttle values based on current vehicle status
   *        and target trajectory
   * @param localization vehicle location
   * @param chassis vehicle status e.g., speed, acceleration
   * @param trajectory trajectory generated by planning
   * @param cmd control command
   * @return Status computation status
   */
  Status ComputeControlCommand(
      const controller::LocalizationEstimate *localization,
      const canbus::Chassis *chassis, const planning::ADCTrajectory *trajectory,
      controller::ControlCommand *cmd) override;

  /**
   * @brief reset longitudinal controller
   * @return Status reset status
   */
  Status Reset() override;

  /**
   * @brief stop longitudinal controller
   */
  void Stop() override;

  /**
   * @brief longitudinal controller name
   * @return string controller name in string
   */
  std::string Name() const override;

 protected:
  void ComputeLongitudinalErrors(const TrajectoryAnalyzer *trajectory,
                                 const double preview_time, const double ts,
                                 controller::SimpleLongitudinalDebug *debug);

  void GetPathRemain(controller::SimpleLongitudinalDebug *debug);

 private:
  void SetDigitalFilterPitchAngle(
      const controller::LonControllerConf &lon_controller_conf);

  void LoadControlCalibrationTable(
      const controller::LonControllerConf &lon_controller_conf);

  void SetDigitalFilter(double ts, double cutoff_freq,
                        DigitalFilter *digital_filter);

  void CloseLogFile();

  const controller::LocalizationEstimate *localization_ = nullptr;
  const canbus::Chassis *chassis_ = nullptr;

  std::unique_ptr<Interpolation2D> control_interpolation_;
  const planning::ADCTrajectory *trajectory_message_ = nullptr;
  std::unique_ptr<TrajectoryAnalyzer> trajectory_analyzer_;

  std::string name_;
  bool controller_initialized_ = false;

  double previous_acceleration_ = 0.0;
  double previous_acceleration_reference_ = 0.0;

  double previous_speed_reference_;
  double previous_preview_speed_reference_;

  PIDController speed_pid_controller_;
  PIDController station_pid_controller_;

  LeadlagController speed_leadlag_controller_;
  LeadlagController station_leadlag_controller_;

  FILE *speed_log_file_ = nullptr;

  DigitalFilter digital_filter_pitch_angle_;

  const controller::ControlConf *control_conf_ = nullptr;

  // vehicle parameter
  vehicle::VehicleParam vehicle_param_;

  std::shared_ptr<DependencyInjector> injector_;
};

#endif
