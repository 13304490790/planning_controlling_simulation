// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lon_controller_conf.proto

#include "lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_calibration_5ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControlCalibrationTable_calibration_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_leadlag_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeadlagConf_leadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FilterConf_lon_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pid_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PidConf_pid_5fconf_2eproto;
namespace controller {
class FilterConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterConf> _instance;
} _FilterConf_default_instance_;
class LonControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LonControllerConf> _instance;
} _LonControllerConf_default_instance_;
}  // namespace controller
static void InitDefaultsFilterConf_lon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_FilterConf_default_instance_;
    new (ptr) ::controller::FilterConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::FilterConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FilterConf_lon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilterConf_lon_5fcontroller_5fconf_2eproto}, {}};

static void InitDefaultsLonControllerConf_lon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_LonControllerConf_default_instance_;
    new (ptr) ::controller::LonControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::LonControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLonControllerConf_lon_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_pid_5fconf_2eproto.base,
      &scc_info_FilterConf_lon_5fcontroller_5fconf_2eproto.base,
      &scc_info_LeadlagConf_leadlag_5fconf_2eproto.base,
      &scc_info_ControlCalibrationTable_calibration_5ftable_2eproto.base,}};

void InitDefaults_lon_5fcontroller_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FilterConf_lon_5fcontroller_5fconf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lon_5fcontroller_5fconf_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_lon_5fcontroller_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lon_5fcontroller_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lon_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::FilterConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::FilterConf, cutoff_freq_),
  0,
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, speed_controller_input_limit_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, station_error_limit_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, low_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, high_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, switch_speed_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, reverse_station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, reverse_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, pitch_angle_filter_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, reverse_station_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, reverse_speed_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, calibration_table_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::controller::LonControllerConf, switch_speed_window_),
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  16,
  3,
  4,
  5,
  6,
  7,
  8,
  18,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::controller::FilterConf)},
  { 7, 31, sizeof(::controller::LonControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_FilterConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_LonControllerConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lon_5fcontroller_5fconf_2eproto = {
  {}, AddDescriptors_lon_5fcontroller_5fconf_2eproto, "lon_controller_conf.proto", schemas,
  file_default_instances, TableStruct_lon_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_lon_5fcontroller_5fconf_2eproto, 2, file_level_enum_descriptors_lon_5fcontroller_5fconf_2eproto, file_level_service_descriptors_lon_5fcontroller_5fconf_2eproto,
};

const char descriptor_table_protodef_lon_5fcontroller_5fconf_2eproto[] =
  "\n\031lon_controller_conf.proto\022\ncontroller\032"
  "\027calibration_table.proto\032\022leadlag_conf.p"
  "roto\032\016pid_conf.proto\"!\n\nFilterConf\022\023\n\013cu"
  "toff_freq\030\001 \001(\005\"\267\006\n\021LonControllerConf\022\n\n"
  "\002ts\030\001 \001(\001\022\034\n\024brake_minimum_action\030\002 \001(\001\022"
  "\037\n\027throttle_minimum_action\030\003 \001(\001\022$\n\034spee"
  "d_controller_input_limit\030\004 \001(\001\022\033\n\023statio"
  "n_error_limit\030\005 \001(\001\022\026\n\016preview_window\030\006 "
  "\001(\001\022\037\n\027standstill_acceleration\030\007 \001(\001\022-\n\020"
  "station_pid_conf\030\010 \001(\0132\023.controller.PidC"
  "onf\022/\n\022low_speed_pid_conf\030\t \001(\0132\023.contro"
  "ller.PidConf\0220\n\023high_speed_pid_conf\030\n \001("
  "\0132\023.controller.PidConf\022\024\n\014switch_speed\030\013"
  " \001(\001\0225\n\030reverse_station_pid_conf\030\014 \001(\0132\023"
  ".controller.PidConf\0223\n\026reverse_speed_pid"
  "_conf\030\r \001(\0132\023.controller.PidConf\0227\n\027pitc"
  "h_angle_filter_conf\030\016 \001(\0132\026.controller.F"
  "ilterConf\022=\n\034reverse_station_leadlag_con"
  "f\030\017 \001(\0132\027.controller.LeadlagConf\022;\n\032reve"
  "rse_speed_leadlag_conf\030\020 \001(\0132\027.controlle"
  "r.LeadlagConf\022>\n\021calibration_table\030\021 \001(\013"
  "2#.controller.ControlCalibrationTable\0222\n"
  "#enable_reverse_leadlag_compensation\030\022 \001"
  "(\010:\005false\022\036\n\023switch_speed_window\030\023 \001(\001:\001"
  "0"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lon_5fcontroller_5fconf_2eproto = {
  false, InitDefaults_lon_5fcontroller_5fconf_2eproto, 
  descriptor_table_protodef_lon_5fcontroller_5fconf_2eproto,
  "lon_controller_conf.proto", &assign_descriptors_table_lon_5fcontroller_5fconf_2eproto, 961,
};

void AddDescriptors_lon_5fcontroller_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_calibration_5ftable_2eproto,
    ::AddDescriptors_leadlag_5fconf_2eproto,
    ::AddDescriptors_pid_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lon_5fcontroller_5fconf_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lon_5fcontroller_5fconf_2eproto = []() { AddDescriptors_lon_5fcontroller_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void FilterConf::InitAsDefaultInstance() {
}
class FilterConf::HasBitSetters {
 public:
  static void set_has_cutoff_freq(FilterConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConf::kCutoffFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConf::FilterConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:controller.FilterConf)
}

void FilterConf::SharedCtor() {
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:controller.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
}

void FilterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterConf& FilterConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FilterConf_lon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cutoff_freq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FilterConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 cutoff_freq = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cutoff_freq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.FilterConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cutoff_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cutoff_freq(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.FilterConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.FilterConf)
}

::google::protobuf::uint8* FilterConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.FilterConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.FilterConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cutoff_freq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_freq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::google::protobuf::DynamicCastToGenerated<FilterConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.FilterConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cutoff_freq()) {
    set_cutoff_freq(from.cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConf::InternalSwap(FilterConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cutoff_freq_, other->cutoff_freq_);
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lon_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_lon_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LonControllerConf::InitAsDefaultInstance() {
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->low_speed_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->high_speed_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_station_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_speed_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->pitch_angle_filter_conf_ = const_cast< ::controller::FilterConf*>(
      ::controller::FilterConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_station_leadlag_conf_ = const_cast< ::controller::LeadlagConf*>(
      ::controller::LeadlagConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_speed_leadlag_conf_ = const_cast< ::controller::LeadlagConf*>(
      ::controller::LeadlagConf::internal_default_instance());
  ::controller::_LonControllerConf_default_instance_._instance.get_mutable()->calibration_table_ = const_cast< ::controller::ControlCalibrationTable*>(
      ::controller::ControlCalibrationTable::internal_default_instance());
}
class LonControllerConf::HasBitSetters {
 public:
  static void set_has_ts(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_brake_minimum_action(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_throttle_minimum_action(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_speed_controller_input_limit(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_station_error_limit(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_preview_window(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_standstill_acceleration(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static const ::controller::PidConf& station_pid_conf(const LonControllerConf* msg);
  static void set_has_station_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::PidConf& low_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_low_speed_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::controller::PidConf& high_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_high_speed_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_switch_speed(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static const ::controller::PidConf& reverse_station_pid_conf(const LonControllerConf* msg);
  static void set_has_reverse_station_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::controller::PidConf& reverse_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_reverse_speed_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::controller::FilterConf& pitch_angle_filter_conf(const LonControllerConf* msg);
  static void set_has_pitch_angle_filter_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::controller::LeadlagConf& reverse_station_leadlag_conf(const LonControllerConf* msg);
  static void set_has_reverse_station_leadlag_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::controller::LeadlagConf& reverse_speed_leadlag_conf(const LonControllerConf* msg);
  static void set_has_reverse_speed_leadlag_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::controller::ControlCalibrationTable& calibration_table(const LonControllerConf* msg);
  static void set_has_calibration_table(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_enable_reverse_leadlag_compensation(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_switch_speed_window(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
};

const ::controller::PidConf&
LonControllerConf::HasBitSetters::station_pid_conf(const LonControllerConf* msg) {
  return *msg->station_pid_conf_;
}
const ::controller::PidConf&
LonControllerConf::HasBitSetters::low_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->low_speed_pid_conf_;
}
const ::controller::PidConf&
LonControllerConf::HasBitSetters::high_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->high_speed_pid_conf_;
}
const ::controller::PidConf&
LonControllerConf::HasBitSetters::reverse_station_pid_conf(const LonControllerConf* msg) {
  return *msg->reverse_station_pid_conf_;
}
const ::controller::PidConf&
LonControllerConf::HasBitSetters::reverse_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->reverse_speed_pid_conf_;
}
const ::controller::FilterConf&
LonControllerConf::HasBitSetters::pitch_angle_filter_conf(const LonControllerConf* msg) {
  return *msg->pitch_angle_filter_conf_;
}
const ::controller::LeadlagConf&
LonControllerConf::HasBitSetters::reverse_station_leadlag_conf(const LonControllerConf* msg) {
  return *msg->reverse_station_leadlag_conf_;
}
const ::controller::LeadlagConf&
LonControllerConf::HasBitSetters::reverse_speed_leadlag_conf(const LonControllerConf* msg) {
  return *msg->reverse_speed_leadlag_conf_;
}
const ::controller::ControlCalibrationTable&
LonControllerConf::HasBitSetters::calibration_table(const LonControllerConf* msg) {
  return *msg->calibration_table_;
}
void LonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != nullptr) station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LonControllerConf::clear_low_speed_pid_conf() {
  if (low_speed_pid_conf_ != nullptr) low_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LonControllerConf::clear_high_speed_pid_conf() {
  if (high_speed_pid_conf_ != nullptr) high_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LonControllerConf::clear_reverse_station_pid_conf() {
  if (reverse_station_pid_conf_ != nullptr) reverse_station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LonControllerConf::clear_reverse_speed_pid_conf() {
  if (reverse_speed_pid_conf_ != nullptr) reverse_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LonControllerConf::clear_reverse_station_leadlag_conf() {
  if (reverse_station_leadlag_conf_ != nullptr) reverse_station_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LonControllerConf::clear_reverse_speed_leadlag_conf() {
  if (reverse_speed_leadlag_conf_ != nullptr) reverse_speed_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LonControllerConf::clear_calibration_table() {
  if (calibration_table_ != nullptr) calibration_table_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kTsFieldNumber;
const int LonControllerConf::kBrakeMinimumActionFieldNumber;
const int LonControllerConf::kThrottleMinimumActionFieldNumber;
const int LonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int LonControllerConf::kStationErrorLimitFieldNumber;
const int LonControllerConf::kPreviewWindowFieldNumber;
const int LonControllerConf::kStandstillAccelerationFieldNumber;
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kLowSpeedPidConfFieldNumber;
const int LonControllerConf::kHighSpeedPidConfFieldNumber;
const int LonControllerConf::kSwitchSpeedFieldNumber;
const int LonControllerConf::kReverseStationPidConfFieldNumber;
const int LonControllerConf::kReverseSpeedPidConfFieldNumber;
const int LonControllerConf::kPitchAngleFilterConfFieldNumber;
const int LonControllerConf::kReverseStationLeadlagConfFieldNumber;
const int LonControllerConf::kReverseSpeedLeadlagConfFieldNumber;
const int LonControllerConf::kCalibrationTableFieldNumber;
const int LonControllerConf::kEnableReverseLeadlagCompensationFieldNumber;
const int LonControllerConf::kSwitchSpeedWindowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.LonControllerConf)
}
LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_pid_conf()) {
    station_pid_conf_ = new ::controller::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = nullptr;
  }
  if (from.has_low_speed_pid_conf()) {
    low_speed_pid_conf_ = new ::controller::PidConf(*from.low_speed_pid_conf_);
  } else {
    low_speed_pid_conf_ = nullptr;
  }
  if (from.has_high_speed_pid_conf()) {
    high_speed_pid_conf_ = new ::controller::PidConf(*from.high_speed_pid_conf_);
  } else {
    high_speed_pid_conf_ = nullptr;
  }
  if (from.has_reverse_station_pid_conf()) {
    reverse_station_pid_conf_ = new ::controller::PidConf(*from.reverse_station_pid_conf_);
  } else {
    reverse_station_pid_conf_ = nullptr;
  }
  if (from.has_reverse_speed_pid_conf()) {
    reverse_speed_pid_conf_ = new ::controller::PidConf(*from.reverse_speed_pid_conf_);
  } else {
    reverse_speed_pid_conf_ = nullptr;
  }
  if (from.has_pitch_angle_filter_conf()) {
    pitch_angle_filter_conf_ = new ::controller::FilterConf(*from.pitch_angle_filter_conf_);
  } else {
    pitch_angle_filter_conf_ = nullptr;
  }
  if (from.has_reverse_station_leadlag_conf()) {
    reverse_station_leadlag_conf_ = new ::controller::LeadlagConf(*from.reverse_station_leadlag_conf_);
  } else {
    reverse_station_leadlag_conf_ = nullptr;
  }
  if (from.has_reverse_speed_leadlag_conf()) {
    reverse_speed_leadlag_conf_ = new ::controller::LeadlagConf(*from.reverse_speed_leadlag_conf_);
  } else {
    reverse_speed_leadlag_conf_ = nullptr;
  }
  if (from.has_calibration_table()) {
    calibration_table_ = new ::controller::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(enable_reverse_leadlag_compensation_));
  // @@protoc_insertion_point(copy_constructor:controller.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(enable_reverse_leadlag_compensation_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:controller.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete low_speed_pid_conf_;
  if (this != internal_default_instance()) delete high_speed_pid_conf_;
  if (this != internal_default_instance()) delete reverse_station_pid_conf_;
  if (this != internal_default_instance()) delete reverse_speed_pid_conf_;
  if (this != internal_default_instance()) delete pitch_angle_filter_conf_;
  if (this != internal_default_instance()) delete reverse_station_leadlag_conf_;
  if (this != internal_default_instance()) delete reverse_speed_leadlag_conf_;
  if (this != internal_default_instance()) delete calibration_table_;
}

void LonControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonControllerConf& LonControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_pid_conf_ != nullptr);
      station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(low_speed_pid_conf_ != nullptr);
      low_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_speed_pid_conf_ != nullptr);
      high_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reverse_station_pid_conf_ != nullptr);
      reverse_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reverse_speed_pid_conf_ != nullptr);
      reverse_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pitch_angle_filter_conf_ != nullptr);
      pitch_angle_filter_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reverse_station_leadlag_conf_ != nullptr);
      reverse_station_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(reverse_speed_leadlag_conf_ != nullptr);
      reverse_speed_leadlag_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(calibration_table_ != nullptr);
    calibration_table_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&standstill_acceleration_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(standstill_acceleration_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&switch_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
        reinterpret_cast<char*>(&switch_speed_)) + sizeof(enable_reverse_leadlag_compensation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LonControllerConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LonControllerConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ts(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double brake_minimum_action = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_brake_minimum_action(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double throttle_minimum_action = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_throttle_minimum_action(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double speed_controller_input_limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_speed_controller_input_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double station_error_limit = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_station_error_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double preview_window = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_preview_window(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double standstill_acceleration = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_standstill_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.PidConf station_pid_conf = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_station_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_low_speed_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_high_speed_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double switch_speed = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_switch_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.PidConf reverse_station_pid_conf = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_reverse_station_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.PidConf reverse_speed_pid_conf = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_reverse_speed_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.FilterConf pitch_angle_filter_conf = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::FilterConf::_InternalParse;
        object = msg->mutable_pitch_angle_filter_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::LeadlagConf::_InternalParse;
        object = msg->mutable_reverse_station_leadlag_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::LeadlagConf::_InternalParse;
        object = msg->mutable_reverse_speed_leadlag_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.ControlCalibrationTable calibration_table = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::ControlCalibrationTable::_InternalParse;
        object = msg->mutable_calibration_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_enable_reverse_leadlag_compensation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double switch_speed_window = 19 [default = 0];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_switch_speed_window(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.LonControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_minimum_action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_brake_minimum_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_minimum_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_minimum_action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_throttle_minimum_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_minimum_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_controller_input_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_speed_controller_input_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_station_error_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preview_window = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_preview_window(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double standstill_acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_standstill_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf station_pid_conf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf low_speed_pid_conf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf high_speed_pid_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double switch_speed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_switch_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf reverse_station_pid_conf = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf reverse_speed_pid_conf = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.FilterConf pitch_angle_filter_conf = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch_angle_filter_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_station_leadlag_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_speed_leadlag_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.ControlCalibrationTable calibration_table = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_enable_reverse_leadlag_compensation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_reverse_leadlag_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double switch_speed_window = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {
          HasBitSetters::set_has_switch_speed_window(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_speed_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.LonControllerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double brake_minimum_action = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_minimum_action(), output);
  }

  // optional double throttle_minimum_action = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throttle_minimum_action(), output);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_controller_input_limit(), output);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->station_error_limit(), output);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preview_window(), output);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->standstill_acceleration(), output);
  }

  // optional .controller.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::station_pid_conf(this), output);
  }

  // optional .controller.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::low_speed_pid_conf(this), output);
  }

  // optional .controller.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::high_speed_pid_conf(this), output);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->switch_speed(), output);
  }

  // optional .controller.PidConf reverse_station_pid_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::reverse_station_pid_conf(this), output);
  }

  // optional .controller.PidConf reverse_speed_pid_conf = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::reverse_speed_pid_conf(this), output);
  }

  // optional .controller.FilterConf pitch_angle_filter_conf = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::pitch_angle_filter_conf(this), output);
  }

  // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::reverse_station_leadlag_conf(this), output);
  }

  // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::reverse_speed_leadlag_conf(this), output);
  }

  // optional .controller.ControlCalibrationTable calibration_table = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::calibration_table(this), output);
  }

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->enable_reverse_leadlag_compensation(), output);
  }

  // optional double switch_speed_window = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->switch_speed_window(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double brake_minimum_action = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throttle_minimum_action(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->standstill_acceleration(), target);
  }

  // optional .controller.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::station_pid_conf(this), target);
  }

  // optional .controller.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::low_speed_pid_conf(this), target);
  }

  // optional .controller.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::high_speed_pid_conf(this), target);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->switch_speed(), target);
  }

  // optional .controller.PidConf reverse_station_pid_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::reverse_station_pid_conf(this), target);
  }

  // optional .controller.PidConf reverse_speed_pid_conf = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::reverse_speed_pid_conf(this), target);
  }

  // optional .controller.FilterConf pitch_angle_filter_conf = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::pitch_angle_filter_conf(this), target);
  }

  // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::reverse_station_leadlag_conf(this), target);
  }

  // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::reverse_speed_leadlag_conf(this), target);
  }

  // optional .controller.ControlCalibrationTable calibration_table = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::calibration_table(this), target);
  }

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->enable_reverse_leadlag_compensation(), target);
  }

  // optional double switch_speed_window = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->switch_speed_window(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.LonControllerConf)
  return target;
}

size_t LonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.LonControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.PidConf station_pid_conf = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_pid_conf_);
    }

    // optional .controller.PidConf low_speed_pid_conf = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *low_speed_pid_conf_);
    }

    // optional .controller.PidConf high_speed_pid_conf = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *high_speed_pid_conf_);
    }

    // optional .controller.PidConf reverse_station_pid_conf = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_station_pid_conf_);
    }

    // optional .controller.PidConf reverse_speed_pid_conf = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_speed_pid_conf_);
    }

    // optional .controller.FilterConf pitch_angle_filter_conf = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pitch_angle_filter_conf_);
    }

    // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_station_leadlag_conf_);
    }

    // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_speed_leadlag_conf_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .controller.ControlCalibrationTable calibration_table = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *calibration_table_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double brake_minimum_action = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double throttle_minimum_action = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limit = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limit = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double preview_window = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional double switch_speed = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double switch_speed_window = 19 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonControllerConf* source =
      ::google::protobuf::DynamicCastToGenerated<LonControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_pid_conf()->::controller::PidConf::MergeFrom(from.station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_low_speed_pid_conf()->::controller::PidConf::MergeFrom(from.low_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_high_speed_pid_conf()->::controller::PidConf::MergeFrom(from.high_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reverse_station_pid_conf()->::controller::PidConf::MergeFrom(from.reverse_station_pid_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reverse_speed_pid_conf()->::controller::PidConf::MergeFrom(from.reverse_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_pitch_angle_filter_conf()->::controller::FilterConf::MergeFrom(from.pitch_angle_filter_conf());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_reverse_station_leadlag_conf()->::controller::LeadlagConf::MergeFrom(from.reverse_station_leadlag_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_reverse_speed_leadlag_conf()->::controller::LeadlagConf::MergeFrom(from.reverse_speed_leadlag_conf());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_calibration_table()->::controller::ControlCalibrationTable::MergeFrom(from.calibration_table());
    }
    if (cached_has_bits & 0x00000200u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_minimum_action_ = from.brake_minimum_action_;
    }
    if (cached_has_bits & 0x00000800u) {
      throttle_minimum_action_ = from.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x00001000u) {
      speed_controller_input_limit_ = from.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      station_error_limit_ = from.station_error_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00008000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      switch_speed_ = from.switch_speed_;
    }
    if (cached_has_bits & 0x00020000u) {
      switch_speed_window_ = from.switch_speed_window_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {
  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(station_pid_conf_, other->station_pid_conf_);
  swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  swap(reverse_station_pid_conf_, other->reverse_station_pid_conf_);
  swap(reverse_speed_pid_conf_, other->reverse_speed_pid_conf_);
  swap(pitch_angle_filter_conf_, other->pitch_angle_filter_conf_);
  swap(reverse_station_leadlag_conf_, other->reverse_station_leadlag_conf_);
  swap(reverse_speed_leadlag_conf_, other->reverse_speed_leadlag_conf_);
  swap(calibration_table_, other->calibration_table_);
  swap(ts_, other->ts_);
  swap(brake_minimum_action_, other->brake_minimum_action_);
  swap(throttle_minimum_action_, other->throttle_minimum_action_);
  swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  swap(station_error_limit_, other->station_error_limit_);
  swap(preview_window_, other->preview_window_);
  swap(standstill_acceleration_, other->standstill_acceleration_);
  swap(switch_speed_, other->switch_speed_);
  swap(switch_speed_window_, other->switch_speed_window_);
  swap(enable_reverse_leadlag_compensation_, other->enable_reverse_leadlag_compensation_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lon_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_lon_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::FilterConf* Arena::CreateMaybeMessage< ::controller::FilterConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::FilterConf >(arena);
}
template<> PROTOBUF_NOINLINE ::controller::LonControllerConf* Arena::CreateMaybeMessage< ::controller::LonControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::LonControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
