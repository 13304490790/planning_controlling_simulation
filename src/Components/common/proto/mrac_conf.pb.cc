// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrac_conf.proto

#include "mrac_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace controller {
class MracConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MracConf> _instance;
} _MracConf_default_instance_;
}  // namespace controller
static void InitDefaultsMracConf_mrac_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_MracConf_default_instance_;
    new (ptr) ::controller::MracConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::MracConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MracConf_mrac_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMracConf_mrac_5fconf_2eproto}, {}};

void InitDefaults_mrac_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MracConf_mrac_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_mrac_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_mrac_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_mrac_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_mrac_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, mrac_model_order_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, reference_time_constant_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, reference_natural_frequency_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, reference_damping_ratio_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, adaption_state_gain_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, adaption_desired_gain_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, adaption_nonlinear_gain_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, adaption_matrix_p_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, mrac_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, anti_windup_compensation_gain_),
  PROTOBUF_FIELD_OFFSET(::controller::MracConf, clamping_time_constant_),
  6,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  7,
  ~0u,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::controller::MracConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_MracConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_mrac_5fconf_2eproto = {
  {}, AddDescriptors_mrac_5fconf_2eproto, "mrac_conf.proto", schemas,
  file_default_instances, TableStruct_mrac_5fconf_2eproto::offsets,
  file_level_metadata_mrac_5fconf_2eproto, 1, file_level_enum_descriptors_mrac_5fconf_2eproto, file_level_service_descriptors_mrac_5fconf_2eproto,
};

const char descriptor_table_protodef_mrac_5fconf_2eproto[] =
  "\n\017mrac_conf.proto\022\ncontroller\"\357\002\n\010MracCo"
  "nf\022\033\n\020mrac_model_order\030\001 \001(\005:\0011\022\037\n\027refer"
  "ence_time_constant\030\002 \001(\001\022#\n\033reference_na"
  "tural_frequency\030\003 \001(\001\022\037\n\027reference_dampi"
  "ng_ratio\030\004 \001(\001\022\033\n\023adaption_state_gain\030\005 "
  "\003(\001\022\035\n\025adaption_desired_gain\030\006 \001(\001\022\037\n\027ad"
  "aption_nonlinear_gain\030\007 \001(\001\022\031\n\021adaption_"
  "matrix_p\030\010 \003(\001\022 \n\025mrac_saturation_level\030"
  "\t \001(\001:\0011\022%\n\035anti_windup_compensation_gai"
  "n\030\n \003(\001\022\036\n\026clamping_time_constant\030\013 \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_mrac_5fconf_2eproto = {
  false, InitDefaults_mrac_5fconf_2eproto, 
  descriptor_table_protodef_mrac_5fconf_2eproto,
  "mrac_conf.proto", &assign_descriptors_table_mrac_5fconf_2eproto, 399,
};

void AddDescriptors_mrac_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_mrac_5fconf_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mrac_5fconf_2eproto = []() { AddDescriptors_mrac_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void MracConf::InitAsDefaultInstance() {
}
class MracConf::HasBitSetters {
 public:
  static void set_has_mrac_model_order(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_reference_time_constant(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reference_natural_frequency(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_reference_damping_ratio(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_adaption_desired_gain(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_adaption_nonlinear_gain(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_mrac_saturation_level(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_clamping_time_constant(MracConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MracConf::kMracModelOrderFieldNumber;
const int MracConf::kReferenceTimeConstantFieldNumber;
const int MracConf::kReferenceNaturalFrequencyFieldNumber;
const int MracConf::kReferenceDampingRatioFieldNumber;
const int MracConf::kAdaptionStateGainFieldNumber;
const int MracConf::kAdaptionDesiredGainFieldNumber;
const int MracConf::kAdaptionNonlinearGainFieldNumber;
const int MracConf::kAdaptionMatrixPFieldNumber;
const int MracConf::kMracSaturationLevelFieldNumber;
const int MracConf::kAntiWindupCompensationGainFieldNumber;
const int MracConf::kClampingTimeConstantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MracConf::MracConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.MracConf)
}
MracConf::MracConf(const MracConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      adaption_state_gain_(from.adaption_state_gain_),
      adaption_matrix_p_(from.adaption_matrix_p_),
      anti_windup_compensation_gain_(from.anti_windup_compensation_gain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reference_time_constant_, &from.reference_time_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrac_saturation_level_) -
    reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(mrac_saturation_level_));
  // @@protoc_insertion_point(copy_constructor:controller.MracConf)
}

void MracConf::SharedCtor() {
  ::memset(&reference_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clamping_time_constant_) -
      reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(clamping_time_constant_));
  mrac_model_order_ = 1;
  mrac_saturation_level_ = 1;
}

MracConf::~MracConf() {
  // @@protoc_insertion_point(destructor:controller.MracConf)
  SharedDtor();
}

void MracConf::SharedDtor() {
}

void MracConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MracConf& MracConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MracConf_mrac_5fconf_2eproto.base);
  return *internal_default_instance();
}


void MracConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.MracConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adaption_state_gain_.Clear();
  adaption_matrix_p_.Clear();
  anti_windup_compensation_gain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&reference_time_constant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clamping_time_constant_) -
        reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(clamping_time_constant_));
    mrac_model_order_ = 1;
    mrac_saturation_level_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MracConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MracConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 mrac_model_order = 1 [default = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mrac_model_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double reference_time_constant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_reference_time_constant(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double reference_natural_frequency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_reference_natural_frequency(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double reference_damping_ratio = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_reference_damping_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double adaption_state_gain = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 41) {
          do {
            msg->add_adaption_state_gain(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 41 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_adaption_state_gain();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional double adaption_desired_gain = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_adaption_desired_gain(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double adaption_nonlinear_gain = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_adaption_nonlinear_gain(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double adaption_matrix_p = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 65) {
          do {
            msg->add_adaption_matrix_p(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 65 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_adaption_matrix_p();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional double mrac_saturation_level = 9 [default = 1];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_mrac_saturation_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double anti_windup_compensation_gain = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 81) {
          do {
            msg->add_anti_windup_compensation_gain(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 81 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_anti_windup_compensation_gain();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional double clamping_time_constant = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_clamping_time_constant(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MracConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.MracConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mrac_model_order = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mrac_model_order(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mrac_model_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_time_constant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_reference_time_constant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_natural_frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_reference_natural_frequency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_natural_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_damping_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_reference_damping_ratio(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_damping_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double adaption_state_gain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_adaption_state_gain())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_adaption_state_gain())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adaption_desired_gain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_adaption_desired_gain(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adaption_desired_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adaption_nonlinear_gain = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_adaption_nonlinear_gain(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adaption_nonlinear_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double adaption_matrix_p = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_adaption_matrix_p())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_adaption_matrix_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrac_saturation_level = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_mrac_saturation_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrac_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double anti_windup_compensation_gain = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_anti_windup_compensation_gain())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_anti_windup_compensation_gain())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clamping_time_constant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_clamping_time_constant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clamping_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.MracConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.MracConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MracConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.MracConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mrac_model_order = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mrac_model_order(), output);
  }

  // optional double reference_time_constant = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->reference_time_constant(), output);
  }

  // optional double reference_natural_frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reference_natural_frequency(), output);
  }

  // optional double reference_damping_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->reference_damping_ratio(), output);
  }

  // repeated double adaption_state_gain = 5;
  for (int i = 0, n = this->adaption_state_gain_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->adaption_state_gain(i), output);
  }

  // optional double adaption_desired_gain = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->adaption_desired_gain(), output);
  }

  // optional double adaption_nonlinear_gain = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->adaption_nonlinear_gain(), output);
  }

  // repeated double adaption_matrix_p = 8;
  for (int i = 0, n = this->adaption_matrix_p_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->adaption_matrix_p(i), output);
  }

  // optional double mrac_saturation_level = 9 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->mrac_saturation_level(), output);
  }

  // repeated double anti_windup_compensation_gain = 10;
  for (int i = 0, n = this->anti_windup_compensation_gain_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->anti_windup_compensation_gain(i), output);
  }

  // optional double clamping_time_constant = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->clamping_time_constant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.MracConf)
}

::google::protobuf::uint8* MracConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.MracConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mrac_model_order = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mrac_model_order(), target);
  }

  // optional double reference_time_constant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->reference_time_constant(), target);
  }

  // optional double reference_natural_frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reference_natural_frequency(), target);
  }

  // optional double reference_damping_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->reference_damping_ratio(), target);
  }

  // repeated double adaption_state_gain = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->adaption_state_gain_, target);

  // optional double adaption_desired_gain = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->adaption_desired_gain(), target);
  }

  // optional double adaption_nonlinear_gain = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->adaption_nonlinear_gain(), target);
  }

  // repeated double adaption_matrix_p = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->adaption_matrix_p_, target);

  // optional double mrac_saturation_level = 9 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->mrac_saturation_level(), target);
  }

  // repeated double anti_windup_compensation_gain = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->anti_windup_compensation_gain_, target);

  // optional double clamping_time_constant = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->clamping_time_constant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.MracConf)
  return target;
}

size_t MracConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.MracConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double adaption_state_gain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->adaption_state_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->adaption_state_gain_size());
    total_size += data_size;
  }

  // repeated double adaption_matrix_p = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->adaption_matrix_p_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->adaption_matrix_p_size());
    total_size += data_size;
  }

  // repeated double anti_windup_compensation_gain = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->anti_windup_compensation_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->anti_windup_compensation_gain_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double reference_time_constant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double reference_natural_frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reference_damping_ratio = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double adaption_desired_gain = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double adaption_nonlinear_gain = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double clamping_time_constant = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 mrac_model_order = 1 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mrac_model_order());
    }

    // optional double mrac_saturation_level = 9 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MracConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.MracConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MracConf* source =
      ::google::protobuf::DynamicCastToGenerated<MracConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.MracConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.MracConf)
    MergeFrom(*source);
  }
}

void MracConf::MergeFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.MracConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adaption_state_gain_.MergeFrom(from.adaption_state_gain_);
  adaption_matrix_p_.MergeFrom(from.adaption_matrix_p_);
  anti_windup_compensation_gain_.MergeFrom(from.anti_windup_compensation_gain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      reference_time_constant_ = from.reference_time_constant_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_natural_frequency_ = from.reference_natural_frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      reference_damping_ratio_ = from.reference_damping_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      adaption_desired_gain_ = from.adaption_desired_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      adaption_nonlinear_gain_ = from.adaption_nonlinear_gain_;
    }
    if (cached_has_bits & 0x00000020u) {
      clamping_time_constant_ = from.clamping_time_constant_;
    }
    if (cached_has_bits & 0x00000040u) {
      mrac_model_order_ = from.mrac_model_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      mrac_saturation_level_ = from.mrac_saturation_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MracConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.MracConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MracConf::CopyFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.MracConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracConf::IsInitialized() const {
  return true;
}

void MracConf::Swap(MracConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MracConf::InternalSwap(MracConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  adaption_state_gain_.InternalSwap(&other->adaption_state_gain_);
  adaption_matrix_p_.InternalSwap(&other->adaption_matrix_p_);
  anti_windup_compensation_gain_.InternalSwap(&other->anti_windup_compensation_gain_);
  swap(reference_time_constant_, other->reference_time_constant_);
  swap(reference_natural_frequency_, other->reference_natural_frequency_);
  swap(reference_damping_ratio_, other->reference_damping_ratio_);
  swap(adaption_desired_gain_, other->adaption_desired_gain_);
  swap(adaption_nonlinear_gain_, other->adaption_nonlinear_gain_);
  swap(clamping_time_constant_, other->clamping_time_constant_);
  swap(mrac_model_order_, other->mrac_model_order_);
  swap(mrac_saturation_level_, other->mrac_saturation_level_);
}

::google::protobuf::Metadata MracConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mrac_5fconf_2eproto);
  return ::file_level_metadata_mrac_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::MracConf* Arena::CreateMaybeMessage< ::controller::MracConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::MracConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
