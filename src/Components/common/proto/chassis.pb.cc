// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header_header_2eproto;
namespace canbus {
class ChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chassis> _instance;
} _Chassis_default_instance_;
}  // namespace canbus
static void InitDefaultsChassis_chassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::canbus::_Chassis_default_instance_;
    new (ptr) ::canbus::Chassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::canbus::Chassis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Chassis_chassis_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChassis_chassis_2eproto}, {
      &scc_info_Header_header_2eproto.base,}};

void InitDefaults_chassis_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Chassis_chassis_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_chassis_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_chassis_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_chassis_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_chassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, engine_started_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, odometer_m_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, horn_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, wiper_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, disengage_status_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, error_code_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, gear_location_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::canbus::Chassis, chassis_error_mask_),
  5,
  19,
  20,
  21,
  1,
  2,
  3,
  4,
  22,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  0,
  18,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::canbus::Chassis)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::canbus::_Chassis_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_chassis_2eproto = {
  {}, AddDescriptors_chassis_2eproto, "chassis.proto", schemas,
  file_default_instances, TableStruct_chassis_2eproto::offsets,
  file_level_metadata_chassis_2eproto, 1, file_level_enum_descriptors_chassis_2eproto, file_level_service_descriptors_chassis_2eproto,
};

const char descriptor_table_protodef_chassis_2eproto[] =
  "\n\rchassis.proto\022\006canbus\032\014header.proto\"\342\t"
  "\n\007Chassis\022\026\n\016engine_started\030\003 \001(\010\022\027\n\neng"
  "ine_rpm\030\004 \001(\002:\003nan\022\026\n\tspeed_mps\030\005 \001(\002:\003n"
  "an\022\027\n\nodometer_m\030\006 \001(\002:\003nan\022\024\n\014fuel_rang"
  "e_m\030\007 \001(\005\022\036\n\023throttle_percentage\030\010 \001(\002:\001"
  "0\022\033\n\020brake_percentage\030\t \001(\002:\0010\022\036\n\023steeri"
  "ng_percentage\030\013 \001(\002:\0010\022\037\n\022steering_torqu"
  "e_nm\030\014 \001(\002:\003nan\022\025\n\rparking_brake\030\r \001(\010\022\034"
  "\n\020high_beam_signal\030\016 \001(\010B\002\030\001\022\033\n\017low_beam"
  "_signal\030\017 \001(\010B\002\030\001\022\034\n\020left_turn_signal\030\020 "
  "\001(\010B\002\030\001\022\035\n\021right_turn_signal\030\021 \001(\010B\002\030\001\022\020"
  "\n\004horn\030\022 \001(\010B\002\030\001\022\r\n\005wiper\030\023 \001(\010\022\034\n\020disen"
  "gage_status\030\024 \001(\010B\002\030\001\022B\n\014driving_mode\030\025 "
  "\001(\0162\033.canbus.Chassis.DrivingMode:\017COMPLE"
  "TE_MANUAL\0227\n\nerror_code\030\026 \001(\0162\031.canbus.C"
  "hassis.ErrorCode:\010NO_ERROR\0223\n\rgear_locat"
  "ion\030\027 \001(\0162\034.canbus.Chassis.GearPosition\022"
  "\032\n\022steering_timestamp\030\030 \001(\001\022\"\n\006header\030\031 "
  "\001(\0132\022.controller.Header\022\035\n\022chassis_error"
  "_mask\030\032 \001(\005:\0010\"y\n\013DrivingMode\022\023\n\017COMPLET"
  "E_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE\020\001\022\023\n\017A"
  "UTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_ONLY\020\003\022\022\n"
  "\016EMERGENCY_MODE\020\004\"\200\002\n\tErrorCode\022\014\n\010NO_ER"
  "ROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\rCHASSIS_"
  "ERROR\020\002\022\032\n\026CHASSIS_ERROR_ON_STEER\020\006\022\032\n\026C"
  "HASSIS_ERROR_ON_BRAKE\020\007\022\035\n\031CHASSIS_ERROR"
  "_ON_THROTTLE\020\010\022\031\n\025CHASSIS_ERROR_ON_GEAR\020"
  "\t\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CHASSIS_CA"
  "N_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERROR\020\005\"\203\001\n"
  "\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\nGEAR_"
  "DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_PARKIN"
  "G\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALID\020\005\022\r\n\tG"
  "EAR_NONE\020\006"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_chassis_2eproto = {
  false, InitDefaults_chassis_2eproto, 
  descriptor_table_protodef_chassis_2eproto,
  "chassis.proto", &assign_descriptors_table_chassis_2eproto, 1290,
};

void AddDescriptors_chassis_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_header_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_chassis_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chassis_2eproto = []() { AddDescriptors_chassis_2eproto(); return true; }();
namespace canbus {
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_chassis_2eproto);
  return file_level_enum_descriptors_chassis_2eproto[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::canbus::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::controller::Header*>(
      ::controller::Header::internal_default_instance());
}
class Chassis::HasBitSetters {
 public:
  static void set_has_engine_started(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_engine_rpm(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_speed_mps(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_odometer_m(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_fuel_range_m(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_throttle_percentage(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_brake_percentage(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_steering_percentage(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_steering_torque_nm(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_parking_brake(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_high_beam_signal(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_low_beam_signal(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_left_turn_signal(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_right_turn_signal(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_horn(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_wiper(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_disengage_status(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_driving_mode(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_error_code(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_gear_location(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_steering_timestamp(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static const ::controller::Header& header(const Chassis* msg);
  static void set_has_header(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chassis_error_mask(Chassis* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
};

const ::controller::Header&
Chassis::HasBitSetters::header(const Chassis* msg) {
  return *msg->header_;
}
void Chassis::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::controller::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&fuel_range_m_, &from.fuel_range_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_torque_nm_) -
    reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(steering_torque_nm_));
  // @@protoc_insertion_point(copy_constructor:canbus.Chassis)
}

void Chassis::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Chassis_chassis_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_error_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(chassis_error_mask_));
  engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
  speed_mps_ = std::numeric_limits<float>::quiet_NaN();
  odometer_m_ = std::numeric_limits<float>::quiet_NaN();
  steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Chassis_chassis_2eproto.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&fuel_range_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_beam_signal_) -
        reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(high_beam_signal_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&low_beam_signal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&low_beam_signal_)) + sizeof(error_code_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&gear_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chassis_error_mask_) -
        reinterpret_cast<char*>(&gear_location_)) + sizeof(chassis_error_mask_));
    engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
    speed_mps_ = std::numeric_limits<float>::quiet_NaN();
    odometer_m_ = std::numeric_limits<float>::quiet_NaN();
    steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Chassis::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Chassis*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_engine_started(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_engine_rpm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_speed_mps(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_odometer_m(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_fuel_range_m(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float throttle_percentage = 8 [default = 0];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_throttle_percentage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float brake_percentage = 9 [default = 0];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_brake_percentage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float steering_percentage = 11 [default = 0];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_steering_percentage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_steering_torque_nm(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_parking_brake(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_high_beam_signal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_low_beam_signal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_left_turn_signal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_right_turn_signal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_horn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool wiper = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_wiper(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_disengage_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_DrivingMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(21, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_driving_mode(static_cast<::canbus::Chassis_DrivingMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_ErrorCode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(22, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_error_code(static_cast<::canbus::Chassis_ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_GearPosition_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(23, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gear_location(static_cast<::canbus::Chassis_GearPosition>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_steering_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.Header header = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_chassis_error_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:canbus.Chassis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_engine_started(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_engine_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_speed_mps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_odometer_m(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_fuel_range_m(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_throttle_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_brake_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_steering_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_steering_torque_nm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_parking_brake(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_high_beam_signal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_low_beam_signal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_left_turn_signal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_right_turn_signal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_horn(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_wiper(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_disengage_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {
          HasBitSetters::set_has_steering_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Header header = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_chassis_error_mask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:canbus.Chassis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .controller.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::header(this), output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:canbus.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .controller.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::header(this), target);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:canbus.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.Header header = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 fuel_range_m = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

    // optional float throttle_percentage = 8 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool engine_started = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool low_beam_signal = 15 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .canbus.Chassis.GearPosition gear_location = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional double steering_timestamp = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

    // optional float engine_rpm = 4 [default = nan];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::google::protobuf::DynamicCastToGenerated<Chassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:canbus.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::controller::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00000040u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00000200u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00000800u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00001000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00002000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00020000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    if (cached_has_bits & 0x00080000u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00100000u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00200000u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(fuel_range_m_, other->fuel_range_m_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(engine_started_, other->engine_started_);
  swap(parking_brake_, other->parking_brake_);
  swap(high_beam_signal_, other->high_beam_signal_);
  swap(low_beam_signal_, other->low_beam_signal_);
  swap(left_turn_signal_, other->left_turn_signal_);
  swap(right_turn_signal_, other->right_turn_signal_);
  swap(horn_, other->horn_);
  swap(wiper_, other->wiper_);
  swap(disengage_status_, other->disengage_status_);
  swap(driving_mode_, other->driving_mode_);
  swap(error_code_, other->error_code_);
  swap(gear_location_, other->gear_location_);
  swap(steering_timestamp_, other->steering_timestamp_);
  swap(chassis_error_mask_, other->chassis_error_mask_);
  swap(engine_rpm_, other->engine_rpm_);
  swap(speed_mps_, other->speed_mps_);
  swap(odometer_m_, other->odometer_m_);
  swap(steering_torque_nm_, other->steering_torque_nm_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chassis_2eproto);
  return ::file_level_metadata_chassis_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::canbus::Chassis* Arena::CreateMaybeMessage< ::canbus::Chassis >(Arena* arena) {
  return Arena::CreateInternal< ::canbus::Chassis >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
