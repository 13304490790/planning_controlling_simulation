// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#include "perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BBox2D_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LightStatus_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_V2XInformation_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DebugMessage_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SensorMeasurement_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint_pnc_5fpoint_2eproto;
namespace perception {
class BBox2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BBox2D> _instance;
} _BBox2D_default_instance_;
class LightStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightStatus> _instance;
} _LightStatus_default_instance_;
class V2XInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<V2XInformation> _instance;
} _V2XInformation_default_instance_;
class SensorMeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMeasurement> _instance;
} _SensorMeasurement_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class DebugMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugMessage> _instance;
} _DebugMessage_default_instance_;
class PerceptionObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacle> _instance;
} _PerceptionObstacle_default_instance_;
}  // namespace perception
static void InitDefaultsBBox2D_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_BBox2D_default_instance_;
    new (ptr) ::perception::BBox2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::BBox2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BBox2D_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBBox2D_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsLightStatus_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_LightStatus_default_instance_;
    new (ptr) ::perception::LightStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::LightStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LightStatus_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLightStatus_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsV2XInformation_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_V2XInformation_default_instance_;
    new (ptr) ::perception::V2XInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::V2XInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_V2XInformation_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsV2XInformation_perception_5fobstacle_2eproto}, {}};

static void InitDefaultsSensorMeasurement_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_SensorMeasurement_default_instance_;
    new (ptr) ::perception::SensorMeasurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::SensorMeasurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SensorMeasurement_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSensorMeasurement_perception_5fobstacle_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_BBox2D_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsTrajectory_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Trajectory_default_instance_;
    new (ptr) ::perception::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Trajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectory_perception_5fobstacle_2eproto}, {
      &scc_info_TrajectoryPoint_pnc_5fpoint_2eproto.base,}};

static void InitDefaultsDebugMessage_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_DebugMessage_default_instance_;
    new (ptr) ::perception::DebugMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::DebugMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DebugMessage_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDebugMessage_perception_5fobstacle_2eproto}, {
      &scc_info_Trajectory_perception_5fobstacle_2eproto.base,}};

static void InitDefaultsPerceptionObstacle_perception_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_PerceptionObstacle_default_instance_;
    new (ptr) ::perception::PerceptionObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::PerceptionObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PerceptionObstacle_perception_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPerceptionObstacle_perception_5fobstacle_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_BBox2D_perception_5fobstacle_2eproto.base,
      &scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base,
      &scc_info_LightStatus_perception_5fobstacle_2eproto.base,
      &scc_info_DebugMessage_perception_5fobstacle_2eproto.base,
      &scc_info_V2XInformation_perception_5fobstacle_2eproto.base,}};

void InitDefaults_perception_5fobstacle_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BBox2D_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LightStatus_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_V2XInformation_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trajectory_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugMessage_perception_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_perception_5fobstacle_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_perception_5fobstacle_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_perception_5fobstacle_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_perception_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, xmin_),
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, ymin_),
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, xmax_),
  PROTOBUF_FIELD_OFFSET(::perception::BBox2D, ymax_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, brake_visible_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, brake_switch_on_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, left_turn_visible_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, left_turn_switch_on_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, right_turn_visible_),
  PROTOBUF_FIELD_OFFSET(::perception::LightStatus, right_turn_switch_on_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::perception::V2XInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::V2XInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::V2XInformation, v2x_type_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, id_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, position_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, theta_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, length_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, width_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, height_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, type_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, sub_type_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::SensorMeasurement, box_),
  0,
  6,
  1,
  4,
  5,
  8,
  9,
  2,
  7,
  11,
  10,
  3,
  PROTOBUF_FIELD_OFFSET(::perception::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Trajectory, probability_),
  PROTOBUF_FIELD_OFFSET(::perception::Trajectory, trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perception::DebugMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::DebugMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::DebugMessage, trajectory_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, position_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, theta_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, point_cloud_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, confidence_type_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, drops_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, acceleration_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, anchor_point_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, bbox2d_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, sub_type_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, measurements_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, height_above_ground_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, position_covariance_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, acceleration_covariance_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, light_status_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, msg_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, source_),
  PROTOBUF_FIELD_OFFSET(::perception::PerceptionObstacle, v2x_info_),
  10,
  0,
  8,
  1,
  9,
  12,
  13,
  ~0u,
  14,
  11,
  15,
  ~0u,
  16,
  17,
  ~0u,
  2,
  3,
  4,
  18,
  ~0u,
  20,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  19,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::perception::BBox2D)},
  { 13, 24, sizeof(::perception::LightStatus)},
  { 30, 36, sizeof(::perception::V2XInformation)},
  { 37, 54, sizeof(::perception::SensorMeasurement)},
  { 66, 73, sizeof(::perception::Trajectory)},
  { 75, 81, sizeof(::perception::DebugMessage)},
  { 82, 115, sizeof(::perception::PerceptionObstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_BBox2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_LightStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_V2XInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_SensorMeasurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_DebugMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_PerceptionObstacle_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_perception_5fobstacle_2eproto = {
  {}, AddDescriptors_perception_5fobstacle_2eproto, "perception_obstacle.proto", schemas,
  file_default_instances, TableStruct_perception_5fobstacle_2eproto::offsets,
  file_level_metadata_perception_5fobstacle_2eproto, 7, file_level_enum_descriptors_perception_5fobstacle_2eproto, file_level_service_descriptors_perception_5fobstacle_2eproto,
};

const char descriptor_table_protodef_perception_5fobstacle_2eproto[] =
  "\n\031perception_obstacle.proto\022\nperception\032"
  "\016geometry.proto\032\017pnc_point.proto\"@\n\006BBox"
  "2D\022\014\n\004xmin\030\001 \001(\001\022\014\n\004ymin\030\002 \001(\001\022\014\n\004xmax\030\003"
  " \001(\001\022\014\n\004ymax\030\004 \001(\001\"\257\001\n\013LightStatus\022\025\n\rbr"
  "ake_visible\030\001 \001(\001\022\027\n\017brake_switch_on\030\002 \001"
  "(\001\022\031\n\021left_turn_visible\030\003 \001(\001\022\033\n\023left_tu"
  "rn_switch_on\030\004 \001(\001\022\032\n\022right_turn_visible"
  "\030\005 \001(\001\022\034\n\024right_turn_switch_on\030\006 \001(\001\"|\n\016"
  "V2XInformation\0224\n\010v2x_type\030\001 \003(\0162\".perce"
  "ption.V2XInformation.V2XType\"4\n\007V2XType\022"
  "\010\n\004NONE\020\000\022\017\n\013ZOMBIES_CAR\020\001\022\016\n\nBLIND_ZONE"
  "\020\002\"\333\002\n\021SensorMeasurement\022\021\n\tsensor_id\030\001 "
  "\001(\t\022\n\n\002id\030\002 \001(\005\022#\n\010position\030\003 \001(\0132\021.geom"
  "etry.Point3D\022\r\n\005theta\030\004 \001(\001\022\016\n\006length\030\005 "
  "\001(\001\022\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022#\n\010ve"
  "locity\030\010 \001(\0132\021.geometry.Point3D\0221\n\004type\030"
  "\t \001(\0162#.perception.PerceptionObstacle.Ty"
  "pe\0228\n\010sub_type\030\n \001(\0162&.perception.Percep"
  "tionObstacle.SubType\022\021\n\ttimestamp\030\013 \001(\001\022"
  "\037\n\003box\030\014 \001(\0132\022.perception.BBox2D\"T\n\nTraj"
  "ectory\022\023\n\013probability\030\001 \001(\001\0221\n\020trajector"
  "y_point\030\002 \003(\0132\027.points.TrajectoryPoint\":"
  "\n\014DebugMessage\022*\n\ntrajectory\030\001 \003(\0132\026.per"
  "ception.Trajectory\"\314\013\n\022PerceptionObstacl"
  "e\022\n\n\002id\030\001 \001(\005\022#\n\010position\030\002 \001(\0132\021.geomet"
  "ry.Point3D\022\r\n\005theta\030\003 \001(\001\022#\n\010velocity\030\004 "
  "\001(\0132\021.geometry.Point3D\022\016\n\006length\030\005 \001(\001\022\r"
  "\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022(\n\rpolygon"
  "_point\030\010 \003(\0132\021.geometry.Point3D\022\025\n\rtrack"
  "ing_time\030\t \001(\001\0221\n\004type\030\n \001(\0162#.perceptio"
  "n.PerceptionObstacle.Type\022\021\n\ttimestamp\030\013"
  " \001(\001\022\027\n\013point_cloud\030\014 \003(\001B\002\020\001\022\026\n\nconfide"
  "nce\030\r \001(\001B\002\030\001\022J\n\017confidence_type\030\016 \001(\0162-"
  ".perception.PerceptionObstacle.Confidenc"
  "eTypeB\002\030\001\022$\n\005drops\030\017 \003(\0132\021.geometry.Poin"
  "t3DB\002\030\001\022\'\n\014acceleration\030\020 \001(\0132\021.geometry"
  ".Point3D\022\'\n\014anchor_point\030\021 \001(\0132\021.geometr"
  "y.Point3D\022\"\n\006bbox2d\030\022 \001(\0132\022.perception.B"
  "Box2D\0228\n\010sub_type\030\023 \001(\0162&.perception.Per"
  "ceptionObstacle.SubType\0223\n\014measurements\030"
  "\024 \003(\0132\035.perception.SensorMeasurement\022 \n\023"
  "height_above_ground\030\025 \001(\001:\003nan\022\037\n\023positi"
  "on_covariance\030\026 \003(\001B\002\020\001\022\037\n\023velocity_cova"
  "riance\030\027 \003(\001B\002\020\001\022#\n\027acceleration_covaria"
  "nce\030\030 \003(\001B\002\020\001\022-\n\014light_status\030\031 \001(\0132\027.pe"
  "rception.LightStatus\022%\n\003msg\030\032 \001(\0132\030.perc"
  "eption.DebugMessage\022C\n\006source\030\033 \001(\0162%.pe"
  "rception.PerceptionObstacle.Source:\014HOST"
  "_VEHICLE\022,\n\010v2x_info\030\034 \001(\0132\032.perception."
  "V2XInformation\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017U"
  "NKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022"
  "\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020"
  "\005\"R\n\016ConfidenceType\022\026\n\022CONFIDENCE_UNKNOW"
  "N\020\000\022\022\n\016CONFIDENCE_CNN\020\001\022\024\n\020CONFIDENCE_RA"
  "DAR\020\002\"\334\001\n\007SubType\022\016\n\nST_UNKNOWN\020\000\022\026\n\022ST_"
  "UNKNOWN_MOVABLE\020\001\022\030\n\024ST_UNKNOWN_UNMOVABL"
  "E\020\002\022\n\n\006ST_CAR\020\003\022\n\n\006ST_VAN\020\004\022\014\n\010ST_TRUCK\020"
  "\005\022\n\n\006ST_BUS\020\006\022\016\n\nST_CYCLIST\020\007\022\023\n\017ST_MOTO"
  "RCYCLIST\020\010\022\021\n\rST_TRICYCLIST\020\t\022\021\n\rST_PEDE"
  "STRIAN\020\n\022\022\n\016ST_TRAFFICCONE\020\013\"#\n\006Source\022\020"
  "\n\014HOST_VEHICLE\020\000\022\007\n\003V2X\020\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_perception_5fobstacle_2eproto = {
  false, InitDefaults_perception_5fobstacle_2eproto, 
  descriptor_table_protodef_perception_5fobstacle_2eproto,
  "perception_obstacle.proto", &assign_descriptors_table_perception_5fobstacle_2eproto, 2425,
};

void AddDescriptors_perception_5fobstacle_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_geometry_2eproto,
    ::AddDescriptors_pnc_5fpoint_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_perception_5fobstacle_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_perception_5fobstacle_2eproto = []() { AddDescriptors_perception_5fobstacle_2eproto(); return true; }();
namespace perception {
const ::google::protobuf::EnumDescriptor* V2XInformation_V2XType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[0];
}
bool V2XInformation_V2XType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V2XInformation_V2XType V2XInformation::NONE;
const V2XInformation_V2XType V2XInformation::ZOMBIES_CAR;
const V2XInformation_V2XType V2XInformation::BLIND_ZONE;
const V2XInformation_V2XType V2XInformation::V2XType_MIN;
const V2XInformation_V2XType V2XInformation::V2XType_MAX;
const int V2XInformation::V2XType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[1];
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[2];
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
const int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_SubType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[3];
}
bool PerceptionObstacle_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_MOVABLE;
const PerceptionObstacle_SubType PerceptionObstacle::ST_UNKNOWN_UNMOVABLE;
const PerceptionObstacle_SubType PerceptionObstacle::ST_CAR;
const PerceptionObstacle_SubType PerceptionObstacle::ST_VAN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRUCK;
const PerceptionObstacle_SubType PerceptionObstacle::ST_BUS;
const PerceptionObstacle_SubType PerceptionObstacle::ST_CYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_MOTORCYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRICYCLIST;
const PerceptionObstacle_SubType PerceptionObstacle::ST_PEDESTRIAN;
const PerceptionObstacle_SubType PerceptionObstacle::ST_TRAFFICCONE;
const PerceptionObstacle_SubType PerceptionObstacle::SubType_MIN;
const PerceptionObstacle_SubType PerceptionObstacle::SubType_MAX;
const int PerceptionObstacle::SubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Source_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_perception_5fobstacle_2eproto);
  return file_level_enum_descriptors_perception_5fobstacle_2eproto[4];
}
bool PerceptionObstacle_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Source PerceptionObstacle::HOST_VEHICLE;
const PerceptionObstacle_Source PerceptionObstacle::V2X;
const PerceptionObstacle_Source PerceptionObstacle::Source_MIN;
const PerceptionObstacle_Source PerceptionObstacle::Source_MAX;
const int PerceptionObstacle::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BBox2D::InitAsDefaultInstance() {
}
class BBox2D::HasBitSetters {
 public:
  static void set_has_xmin(BBox2D* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ymin(BBox2D* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_xmax(BBox2D* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ymax(BBox2D* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBox2D::kXminFieldNumber;
const int BBox2D::kYminFieldNumber;
const int BBox2D::kXmaxFieldNumber;
const int BBox2D::kYmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBox2D::BBox2D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.BBox2D)
}
BBox2D::BBox2D(const BBox2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:perception.BBox2D)
}

void BBox2D::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
}

BBox2D::~BBox2D() {
  // @@protoc_insertion_point(destructor:perception.BBox2D)
  SharedDtor();
}

void BBox2D::SharedDtor() {
}

void BBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBox2D& BBox2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BBox2D_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void BBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ymax_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BBox2D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BBox2D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double xmin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_xmin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ymin = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_ymin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double xmax = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_xmax(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ymax = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_ymax(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BBox2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.BBox2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_xmin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_ymin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double xmax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_xmax(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_ymax(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.BBox2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.BBox2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BBox2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xmin(), output);
  }

  // optional double ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ymin(), output);
  }

  // optional double xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xmax(), output);
  }

  // optional double ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ymax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.BBox2D)
}

::google::protobuf::uint8* BBox2D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.BBox2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xmin(), target);
  }

  // optional double ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ymin(), target);
  }

  // optional double xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xmax(), target);
  }

  // optional double ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ymax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.BBox2D)
  return target;
}

size_t BBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.BBox2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double xmax = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ymax = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBox2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const BBox2D* source =
      ::google::protobuf::DynamicCastToGenerated<BBox2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.BBox2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.BBox2D)
    MergeFrom(*source);
  }
}

void BBox2D::MergeFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.BBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BBox2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox2D::CopyFrom(const BBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.BBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox2D::IsInitialized() const {
  return true;
}

void BBox2D::Swap(BBox2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBox2D::InternalSwap(BBox2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
}

::google::protobuf::Metadata BBox2D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LightStatus::InitAsDefaultInstance() {
}
class LightStatus::HasBitSetters {
 public:
  static void set_has_brake_visible(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_brake_switch_on(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_left_turn_visible(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_left_turn_switch_on(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_right_turn_visible(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_right_turn_switch_on(LightStatus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightStatus::kBrakeVisibleFieldNumber;
const int LightStatus::kBrakeSwitchOnFieldNumber;
const int LightStatus::kLeftTurnVisibleFieldNumber;
const int LightStatus::kLeftTurnSwitchOnFieldNumber;
const int LightStatus::kRightTurnVisibleFieldNumber;
const int LightStatus::kRightTurnSwitchOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightStatus::LightStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.LightStatus)
}
LightStatus::LightStatus(const LightStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_visible_, &from.brake_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_turn_switch_on_) -
    reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  // @@protoc_insertion_point(copy_constructor:perception.LightStatus)
}

void LightStatus::SharedCtor() {
  ::memset(&brake_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_turn_switch_on_) -
      reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
}

LightStatus::~LightStatus() {
  // @@protoc_insertion_point(destructor:perception.LightStatus)
  SharedDtor();
}

void LightStatus::SharedDtor() {
}

void LightStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightStatus& LightStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LightStatus_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void LightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&brake_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_turn_switch_on_) -
        reinterpret_cast<char*>(&brake_visible_)) + sizeof(right_turn_switch_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LightStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LightStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double brake_visible = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_brake_visible(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double brake_switch_on = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_brake_switch_on(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double left_turn_visible = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_left_turn_visible(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double left_turn_switch_on = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_left_turn_switch_on(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double right_turn_visible = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_right_turn_visible(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double right_turn_switch_on = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_right_turn_switch_on(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LightStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.LightStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double brake_visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_brake_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_switch_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_brake_switch_on(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_turn_visible = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_left_turn_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_turn_switch_on = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_left_turn_switch_on(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_turn_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_turn_visible = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_right_turn_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_turn_switch_on = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_right_turn_switch_on(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_turn_switch_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.LightStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.LightStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LightStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_visible = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->brake_visible(), output);
  }

  // optional double brake_switch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake_switch_on(), output);
  }

  // optional double left_turn_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_turn_visible(), output);
  }

  // optional double left_turn_switch_on = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_turn_switch_on(), output);
  }

  // optional double right_turn_visible = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right_turn_visible(), output);
  }

  // optional double right_turn_switch_on = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_turn_switch_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.LightStatus)
}

::google::protobuf::uint8* LightStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.LightStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->brake_visible(), target);
  }

  // optional double brake_switch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake_switch_on(), target);
  }

  // optional double left_turn_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_turn_visible(), target);
  }

  // optional double left_turn_switch_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_turn_switch_on(), target);
  }

  // optional double right_turn_visible = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right_turn_visible(), target);
  }

  // optional double right_turn_switch_on = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_turn_switch_on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.LightStatus)
  return target;
}

size_t LightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.LightStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double brake_visible = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double brake_switch_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_switch_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_visible = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double right_turn_switch_on = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LightStatus* source =
      ::google::protobuf::DynamicCastToGenerated<LightStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.LightStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.LightStatus)
    MergeFrom(*source);
  }
}

void LightStatus::MergeFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.LightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      brake_visible_ = from.brake_visible_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_switch_on_ = from.brake_switch_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      left_turn_visible_ = from.left_turn_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_turn_switch_on_ = from.left_turn_switch_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_turn_visible_ = from.right_turn_visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_turn_switch_on_ = from.right_turn_switch_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightStatus::CopyFrom(const LightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.LightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightStatus::IsInitialized() const {
  return true;
}

void LightStatus::Swap(LightStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightStatus::InternalSwap(LightStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_visible_, other->brake_visible_);
  swap(brake_switch_on_, other->brake_switch_on_);
  swap(left_turn_visible_, other->left_turn_visible_);
  swap(left_turn_switch_on_, other->left_turn_switch_on_);
  swap(right_turn_visible_, other->right_turn_visible_);
  swap(right_turn_switch_on_, other->right_turn_switch_on_);
}

::google::protobuf::Metadata LightStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void V2XInformation::InitAsDefaultInstance() {
}
class V2XInformation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V2XInformation::kV2XTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V2XInformation::V2XInformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.V2XInformation)
}
V2XInformation::V2XInformation(const V2XInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      v2x_type_(from.v2x_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.V2XInformation)
}

void V2XInformation::SharedCtor() {
}

V2XInformation::~V2XInformation() {
  // @@protoc_insertion_point(destructor:perception.V2XInformation)
  SharedDtor();
}

void V2XInformation::SharedDtor() {
}

void V2XInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V2XInformation& V2XInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_V2XInformation_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void V2XInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2x_type_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* V2XInformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<V2XInformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .perception.V2XInformation.V2XType v2x_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::perception::V2XInformation_V2XType_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_v2x_type(static_cast<::perception::V2XInformation_V2XType>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::perception::V2XInformation_V2XType_IsValid, msg->mutable_unknown_fields(), 1);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParser;
        object = msg->mutable_v2x_type();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool V2XInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.V2XInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perception.V2XInformation.V2XType v2x_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::V2XInformation_V2XType_IsValid(value)) {
            add_v2x_type(static_cast< ::perception::V2XInformation_V2XType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::perception::V2XInformation_V2XType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_v2x_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.V2XInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.V2XInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void V2XInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.V2XInformation.V2XType v2x_type = 1;
  for (int i = 0, n = this->v2x_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->v2x_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.V2XInformation)
}

::google::protobuf::uint8* V2XInformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.V2XInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.V2XInformation.V2XType v2x_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->v2x_type_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.V2XInformation)
  return target;
}

size_t V2XInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.V2XInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.V2XInformation.V2XType v2x_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->v2x_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->v2x_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V2XInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const V2XInformation* source =
      ::google::protobuf::DynamicCastToGenerated<V2XInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.V2XInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.V2XInformation)
    MergeFrom(*source);
  }
}

void V2XInformation::MergeFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.V2XInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2x_type_.MergeFrom(from.v2x_type_);
}

void V2XInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V2XInformation::CopyFrom(const V2XInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.V2XInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XInformation::IsInitialized() const {
  return true;
}

void V2XInformation::Swap(V2XInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V2XInformation::InternalSwap(V2XInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  v2x_type_.InternalSwap(&other->v2x_type_);
}

::google::protobuf::Metadata V2XInformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SensorMeasurement::InitAsDefaultInstance() {
  ::perception::_SensorMeasurement_default_instance_._instance.get_mutable()->position_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_SensorMeasurement_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_SensorMeasurement_default_instance_._instance.get_mutable()->box_ = const_cast< ::perception::BBox2D*>(
      ::perception::BBox2D::internal_default_instance());
}
class SensorMeasurement::HasBitSetters {
 public:
  static void set_has_sensor_id(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_id(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::geometry::Point3D& position(const SensorMeasurement* msg);
  static void set_has_position(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_theta(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_length(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_width(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_height(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::geometry::Point3D& velocity(const SensorMeasurement* msg);
  static void set_has_velocity(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_type(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_sub_type(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_timestamp(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::perception::BBox2D& box(const SensorMeasurement* msg);
  static void set_has_box(SensorMeasurement* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::geometry::Point3D&
SensorMeasurement::HasBitSetters::position(const SensorMeasurement* msg) {
  return *msg->position_;
}
const ::geometry::Point3D&
SensorMeasurement::HasBitSetters::velocity(const SensorMeasurement* msg) {
  return *msg->velocity_;
}
const ::perception::BBox2D&
SensorMeasurement::HasBitSetters::box(const SensorMeasurement* msg) {
  return *msg->box_;
}
void SensorMeasurement::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SensorMeasurement::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMeasurement::kSensorIdFieldNumber;
const int SensorMeasurement::kIdFieldNumber;
const int SensorMeasurement::kPositionFieldNumber;
const int SensorMeasurement::kThetaFieldNumber;
const int SensorMeasurement::kLengthFieldNumber;
const int SensorMeasurement::kWidthFieldNumber;
const int SensorMeasurement::kHeightFieldNumber;
const int SensorMeasurement::kVelocityFieldNumber;
const int SensorMeasurement::kTypeFieldNumber;
const int SensorMeasurement::kSubTypeFieldNumber;
const int SensorMeasurement::kTimestampFieldNumber;
const int SensorMeasurement::kBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMeasurement::SensorMeasurement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.SensorMeasurement)
}
SensorMeasurement::SensorMeasurement(const SensorMeasurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_id()) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.has_position()) {
    position_ = new ::geometry::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::geometry::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_box()) {
    box_ = new ::perception::BBox2D(*from.box_);
  } else {
    box_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_type_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(sub_type_));
  // @@protoc_insertion_point(copy_constructor:perception.SensorMeasurement)
}

void SensorMeasurement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sub_type_));
}

SensorMeasurement::~SensorMeasurement() {
  // @@protoc_insertion_point(destructor:perception.SensorMeasurement)
  SharedDtor();
}

void SensorMeasurement::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete box_;
}

void SensorMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMeasurement& SensorMeasurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorMeasurement_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void SensorMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sensor_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(box_ != nullptr);
      box_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_type_) -
        reinterpret_cast<char*>(&width_)) + sizeof(sub_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorMeasurement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorMeasurement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string sensor_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("perception.SensorMeasurement.sensor_id");
        object = msg->mutable_sensor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .geometry.Point3D position = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double theta = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_theta(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double length = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_length(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double width = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double height = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_height(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .geometry.Point3D velocity = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .perception.PerceptionObstacle.Type type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(9, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::perception::PerceptionObstacle_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .perception.PerceptionObstacle.SubType sub_type = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_SubType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_sub_type(static_cast<::perception::PerceptionObstacle_SubType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double timestamp = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .perception.BBox2D box = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::BBox2D::_InternalParse;
        object = msg->mutable_box();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.SensorMeasurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.SensorMeasurement.sensor_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_theta(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D velocity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.SubType sub_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_SubType_IsValid(value)) {
            set_sub_type(static_cast< ::perception::PerceptionObstacle_SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.BBox2D box = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.SensorMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.SensorMeasurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.SensorMeasurement.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_id(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .geometry.Point3D position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::position(this), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // optional .geometry.Point3D velocity = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::velocity(this), output);
  }

  // optional .perception.PerceptionObstacle.Type type = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional .perception.PerceptionObstacle.SubType sub_type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sub_type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // optional .perception.BBox2D box = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::box(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.SensorMeasurement)
}

::google::protobuf::uint8* SensorMeasurement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.SensorMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.SensorMeasurement.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_id(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .geometry.Point3D position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::position(this), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // optional .geometry.Point3D velocity = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::velocity(this), target);
  }

  // optional .perception.PerceptionObstacle.Type type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional .perception.PerceptionObstacle.SubType sub_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sub_type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // optional .perception.BBox2D box = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::box(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.SensorMeasurement)
  return target;
}

size_t SensorMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.SensorMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sensor_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_id());
    }

    // optional .geometry.Point3D position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .geometry.Point3D velocity = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .perception.BBox2D box = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *box_);
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .perception.PerceptionObstacle.Type type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double width = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional .perception.PerceptionObstacle.SubType sub_type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeasurement* source =
      ::google::protobuf::DynamicCastToGenerated<SensorMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.SensorMeasurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.SensorMeasurement)
    MergeFrom(*source);
  }
}

void SensorMeasurement::MergeFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.SensorMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::geometry::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::geometry::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_box()->::perception::BBox2D::MergeFrom(from.box());
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      sub_type_ = from.sub_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeasurement::CopyFrom(const SensorMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.SensorMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeasurement::IsInitialized() const {
  return true;
}

void SensorMeasurement::Swap(SensorMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMeasurement::InternalSwap(SensorMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_id_.Swap(&other->sensor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(box_, other->box_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(timestamp_, other->timestamp_);
  swap(sub_type_, other->sub_type_);
}

::google::protobuf::Metadata SensorMeasurement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
class Trajectory::HasBitSetters {
 public:
  static void set_has_probability(Trajectory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:perception.Trajectory)
}

void Trajectory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trajectory_perception_5fobstacle_2eproto.base);
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:perception.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trajectory_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trajectory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trajectory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_probability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .points.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::points::TrajectoryPoint::_InternalParse;
          object = msg->add_trajectory_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Trajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_probability(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .points.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Trajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectory_point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  swap(probability_, other->probability_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DebugMessage::InitAsDefaultInstance() {
}
class DebugMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugMessage::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugMessage::DebugMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.DebugMessage)
}
DebugMessage::DebugMessage(const DebugMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.DebugMessage)
}

void DebugMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DebugMessage_perception_5fobstacle_2eproto.base);
}

DebugMessage::~DebugMessage() {
  // @@protoc_insertion_point(destructor:perception.DebugMessage)
  SharedDtor();
}

void DebugMessage::SharedDtor() {
}

void DebugMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugMessage& DebugMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DebugMessage_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void DebugMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DebugMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .perception.Trajectory trajectory = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::perception::Trajectory::_InternalParse;
          object = msg->add_trajectory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.DebugMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perception.Trajectory trajectory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.DebugMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.DebugMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trajectory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.DebugMessage)
}

::google::protobuf::uint8* DebugMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.DebugMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trajectory(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.DebugMessage)
  return target;
}

size_t DebugMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.DebugMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Trajectory trajectory = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMessage* source =
      ::google::protobuf::DynamicCastToGenerated<DebugMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.DebugMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.DebugMessage)
    MergeFrom(*source);
  }
}

void DebugMessage::MergeFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.DebugMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void DebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMessage::CopyFrom(const DebugMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.DebugMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMessage::IsInitialized() const {
  return true;
}

void DebugMessage::Swap(DebugMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugMessage::InternalSwap(DebugMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_)->InternalSwap(CastToBase(&other->trajectory_));
}

::google::protobuf::Metadata DebugMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PerceptionObstacle::InitAsDefaultInstance() {
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->position_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->anchor_point_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->bbox2d_ = const_cast< ::perception::BBox2D*>(
      ::perception::BBox2D::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->light_status_ = const_cast< ::perception::LightStatus*>(
      ::perception::LightStatus::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->msg_ = const_cast< ::perception::DebugMessage*>(
      ::perception::DebugMessage::internal_default_instance());
  ::perception::_PerceptionObstacle_default_instance_._instance.get_mutable()->v2x_info_ = const_cast< ::perception::V2XInformation*>(
      ::perception::V2XInformation::internal_default_instance());
}
class PerceptionObstacle::HasBitSetters {
 public:
  static void set_has_id(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::geometry::Point3D& position(const PerceptionObstacle* msg);
  static void set_has_position(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_theta(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::geometry::Point3D& velocity(const PerceptionObstacle* msg);
  static void set_has_velocity(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_length(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_width(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_height(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_tracking_time(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_type(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_timestamp(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_confidence(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_confidence_type(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static const ::geometry::Point3D& acceleration(const PerceptionObstacle* msg);
  static void set_has_acceleration(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::geometry::Point3D& anchor_point(const PerceptionObstacle* msg);
  static void set_has_anchor_point(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::perception::BBox2D& bbox2d(const PerceptionObstacle* msg);
  static void set_has_bbox2d(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sub_type(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_height_above_ground(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static const ::perception::LightStatus& light_status(const PerceptionObstacle* msg);
  static void set_has_light_status(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::perception::DebugMessage& msg(const PerceptionObstacle* msg);
  static void set_has_msg(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_source(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static const ::perception::V2XInformation& v2x_info(const PerceptionObstacle* msg);
  static void set_has_v2x_info(PerceptionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

const ::geometry::Point3D&
PerceptionObstacle::HasBitSetters::position(const PerceptionObstacle* msg) {
  return *msg->position_;
}
const ::geometry::Point3D&
PerceptionObstacle::HasBitSetters::velocity(const PerceptionObstacle* msg) {
  return *msg->velocity_;
}
const ::geometry::Point3D&
PerceptionObstacle::HasBitSetters::acceleration(const PerceptionObstacle* msg) {
  return *msg->acceleration_;
}
const ::geometry::Point3D&
PerceptionObstacle::HasBitSetters::anchor_point(const PerceptionObstacle* msg) {
  return *msg->anchor_point_;
}
const ::perception::BBox2D&
PerceptionObstacle::HasBitSetters::bbox2d(const PerceptionObstacle* msg) {
  return *msg->bbox2d_;
}
const ::perception::LightStatus&
PerceptionObstacle::HasBitSetters::light_status(const PerceptionObstacle* msg) {
  return *msg->light_status_;
}
const ::perception::DebugMessage&
PerceptionObstacle::HasBitSetters::msg(const PerceptionObstacle* msg) {
  return *msg->msg_;
}
const ::perception::V2XInformation&
PerceptionObstacle::HasBitSetters::v2x_info(const PerceptionObstacle* msg) {
  return *msg->v2x_info_;
}
void PerceptionObstacle::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
void PerceptionObstacle::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_anchor_point() {
  if (anchor_point_ != nullptr) anchor_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
const int PerceptionObstacle::kConfidenceFieldNumber;
const int PerceptionObstacle::kConfidenceTypeFieldNumber;
const int PerceptionObstacle::kDropsFieldNumber;
const int PerceptionObstacle::kAccelerationFieldNumber;
const int PerceptionObstacle::kAnchorPointFieldNumber;
const int PerceptionObstacle::kBbox2DFieldNumber;
const int PerceptionObstacle::kSubTypeFieldNumber;
const int PerceptionObstacle::kMeasurementsFieldNumber;
const int PerceptionObstacle::kHeightAboveGroundFieldNumber;
const int PerceptionObstacle::kPositionCovarianceFieldNumber;
const int PerceptionObstacle::kVelocityCovarianceFieldNumber;
const int PerceptionObstacle::kAccelerationCovarianceFieldNumber;
const int PerceptionObstacle::kLightStatusFieldNumber;
const int PerceptionObstacle::kMsgFieldNumber;
const int PerceptionObstacle::kSourceFieldNumber;
const int PerceptionObstacle::kV2XInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      point_cloud_(from.point_cloud_),
      drops_(from.drops_),
      measurements_(from.measurements_),
      position_covariance_(from.position_covariance_),
      velocity_covariance_(from.velocity_covariance_),
      acceleration_covariance_(from.acceleration_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::geometry::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::geometry::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::geometry::Point3D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from.has_anchor_point()) {
    anchor_point_ = new ::geometry::Point3D(*from.anchor_point_);
  } else {
    anchor_point_ = nullptr;
  }
  if (from.has_bbox2d()) {
    bbox2d_ = new ::perception::BBox2D(*from.bbox2d_);
  } else {
    bbox2d_ = nullptr;
  }
  if (from.has_light_status()) {
    light_status_ = new ::perception::LightStatus(*from.light_status_);
  } else {
    light_status_ = nullptr;
  }
  if (from.has_msg()) {
    msg_ = new ::perception::DebugMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  if (from.has_v2x_info()) {
    v2x_info_ = new ::perception::V2XInformation(*from.v2x_info_);
  } else {
    v2x_info_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_above_ground_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(height_above_ground_));
  // @@protoc_insertion_point(copy_constructor:perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&position_)) + sizeof(source_));
  height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete anchor_point_;
  if (this != internal_default_instance()) delete bbox2d_;
  if (this != internal_default_instance()) delete light_status_;
  if (this != internal_default_instance()) delete msg_;
  if (this != internal_default_instance()) delete v2x_info_;
}

void PerceptionObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionObstacle& PerceptionObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  point_cloud_.Clear();
  drops_.Clear();
  measurements_.Clear();
  position_covariance_.Clear();
  velocity_covariance_.Clear();
  acceleration_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchor_point_ != nullptr);
      anchor_point_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bbox2d_ != nullptr);
      bbox2d_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(light_status_ != nullptr);
      light_status_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(msg_ != nullptr);
      msg_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(v2x_info_ != nullptr);
      v2x_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(timestamp_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(source_));
    height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerceptionObstacle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PerceptionObstacle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .geometry.Point3D position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double theta = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_theta(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .geometry.Point3D velocity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double length = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_length(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double width = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double height = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_height(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .geometry.Point3D polygon_point = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geometry::Point3D::_InternalParse;
          object = msg->add_polygon_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional double tracking_time = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_tracking_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::perception::PerceptionObstacle_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double timestamp = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 98) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_point_cloud();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        do {
          msg->add_point_cloud(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 97 && (ptr += 1));
        break;
      }
      // optional double confidence = 13 [deprecated = true];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_confidence(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_ConfidenceType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_confidence_type(static_cast<::perception::PerceptionObstacle_ConfidenceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .geometry.Point3D drops = 15 [deprecated = true];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geometry::Point3D::_InternalParse;
          object = msg->add_drops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // optional .geometry.Point3D acceleration = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_acceleration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D anchor_point = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_anchor_point();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .perception.BBox2D bbox2d = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::BBox2D::_InternalParse;
        object = msg->mutable_bbox2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .perception.PerceptionObstacle.SubType sub_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_SubType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(19, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_sub_type(static_cast<::perception::PerceptionObstacle_SubType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .perception.SensorMeasurement measurements = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::perception::SensorMeasurement::_InternalParse;
          object = msg->add_measurements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // optional double height_above_ground = 21 [default = nan];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_height_above_ground(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double position_covariance = 22 [packed = true];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) == 178) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_position_covariance();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 177) goto handle_unusual;
        do {
          msg->add_position_covariance(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 433 && (ptr += 2));
        break;
      }
      // repeated double velocity_covariance = 23 [packed = true];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) == 186) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_velocity_covariance();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 185) goto handle_unusual;
        do {
          msg->add_velocity_covariance(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 441 && (ptr += 2));
        break;
      }
      // repeated double acceleration_covariance = 24 [packed = true];
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) == 194) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_acceleration_covariance();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        do {
          msg->add_acceleration_covariance(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 449 && (ptr += 2));
        break;
      }
      // optional .perception.LightStatus light_status = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::LightStatus::_InternalParse;
        object = msg->mutable_light_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .perception.DebugMessage msg = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::DebugMessage::_InternalParse;
        object = msg->mutable_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::perception::PerceptionObstacle_Source_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(27, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_source(static_cast<::perception::PerceptionObstacle_Source>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .perception.V2XInformation v2x_info = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::V2XInformation::_InternalParse;
        object = msg->mutable_v2x_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.PerceptionObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_theta(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geometry.Point3D polygon_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_tracking_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98u, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_confidence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_ConfidenceType_IsValid(value)) {
            set_confidence_type(static_cast< ::perception::PerceptionObstacle_ConfidenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geometry.Point3D drops = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D acceleration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D anchor_point = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_anchor_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.BBox2D bbox2d = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.SubType sub_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_SubType_IsValid(value)) {
            set_sub_type(static_cast< ::perception::PerceptionObstacle_SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perception.SensorMeasurement measurements = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height_above_ground = 21 [default = nan];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {
          HasBitSetters::set_has_height_above_ground(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_above_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position_covariance = 22 [packed = true];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (177 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 178u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double velocity_covariance = 23 [packed = true];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (185 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 186u, input, this->mutable_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double acceleration_covariance = 24 [packed = true];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_acceleration_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 194u, input, this->mutable_acceleration_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.LightStatus light_status = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.DebugMessage msg = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perception::PerceptionObstacle_Source_IsValid(value)) {
            set_source(static_cast< ::perception::PerceptionObstacle_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perception.V2XInformation v2x_info = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v2x_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.PerceptionObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .geometry.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .geometry.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::velocity(this), output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .geometry.Point3D polygon_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_cloud_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->point_cloud().data(), this->point_cloud_size(), output);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->confidence(), output);
  }

  // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->confidence_type(), output);
  }

  // repeated .geometry.Point3D drops = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->drops(static_cast<int>(i)),
      output);
  }

  // optional .geometry.Point3D acceleration = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::acceleration(this), output);
  }

  // optional .geometry.Point3D anchor_point = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::anchor_point(this), output);
  }

  // optional .perception.BBox2D bbox2d = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::bbox2d(this), output);
  }

  // optional .perception.PerceptionObstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->sub_type(), output);
  }

  // repeated .perception.SensorMeasurement measurements = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->measurements(static_cast<int>(i)),
      output);
  }

  // optional double height_above_ground = 21 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->height_above_ground(), output);
  }

  // repeated double position_covariance = 22 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_covariance_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  // repeated double velocity_covariance = 23 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_velocity_covariance_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->velocity_covariance().data(), this->velocity_covariance_size(), output);
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  if (this->acceleration_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_acceleration_covariance_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->acceleration_covariance().data(), this->acceleration_covariance_size(), output);
  }

  // optional .perception.LightStatus light_status = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::light_status(this), output);
  }

  // optional .perception.DebugMessage msg = 26;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::msg(this), output);
  }

  // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->source(), output);
  }

  // optional .perception.V2XInformation v2x_info = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::v2x_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .geometry.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .geometry.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::velocity(this), target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .geometry.Point3D polygon_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->polygon_point(static_cast<int>(i)), target);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tracking_time(), target);
  }

  // optional .perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _point_cloud_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->point_cloud_, target);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->confidence(), target);
  }

  // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->confidence_type(), target);
  }

  // repeated .geometry.Point3D drops = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->drops(static_cast<int>(i)), target);
  }

  // optional .geometry.Point3D acceleration = 16;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::acceleration(this), target);
  }

  // optional .geometry.Point3D anchor_point = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::anchor_point(this), target);
  }

  // optional .perception.BBox2D bbox2d = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::bbox2d(this), target);
  }

  // optional .perception.PerceptionObstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->sub_type(), target);
  }

  // repeated .perception.SensorMeasurement measurements = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->measurements(static_cast<int>(i)), target);
  }

  // optional double height_above_ground = 21 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->height_above_ground(), target);
  }

  // repeated double position_covariance = 22 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _position_covariance_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_covariance_, target);
  }

  // repeated double velocity_covariance = 23 [packed = true];
  if (this->velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _velocity_covariance_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity_covariance_, target);
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  if (this->acceleration_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _acceleration_covariance_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->acceleration_covariance_, target);
  }

  // optional .perception.LightStatus light_status = 25;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::light_status(this), target);
  }

  // optional .perception.DebugMessage msg = 26;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::msg(this), target);
  }

  // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->source(), target);
  }

  // optional .perception.V2XInformation v2x_info = 28;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::v2x_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.PerceptionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geometry.Point3D polygon_point = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->point_cloud_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _point_cloud_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .geometry.Point3D drops = 15 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->drops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->drops(static_cast<int>(i)));
    }
  }

  // repeated .perception.SensorMeasurement measurements = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->measurements_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->measurements(static_cast<int>(i)));
    }
  }

  // repeated double position_covariance = 22 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->position_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _position_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double velocity_covariance = 23 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _velocity_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double acceleration_covariance = 24 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->acceleration_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _acceleration_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .geometry.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .geometry.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .geometry.Point3D acceleration = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .geometry.Point3D anchor_point = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *anchor_point_);
    }

    // optional .perception.BBox2D bbox2d = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bbox2d_);
    }

    // optional .perception.LightStatus light_status = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *light_status_);
    }

    // optional .perception.DebugMessage msg = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_);
    }

    // optional .perception.V2XInformation v2x_info = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *v2x_info_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double theta = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .perception.PerceptionObstacle.Type type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double confidence = 13 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence_type());
    }

    // optional .perception.PerceptionObstacle.SubType sub_type = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

    // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional double height_above_ground = 21 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacle* source =
      ::google::protobuf::DynamicCastToGenerated<PerceptionObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  drops_.MergeFrom(from.drops_);
  measurements_.MergeFrom(from.measurements_);
  position_covariance_.MergeFrom(from.position_covariance_);
  velocity_covariance_.MergeFrom(from.velocity_covariance_);
  acceleration_covariance_.MergeFrom(from.acceleration_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::geometry::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::geometry::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::geometry::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_anchor_point()->::geometry::Point3D::MergeFrom(from.anchor_point());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_bbox2d()->::perception::BBox2D::MergeFrom(from.bbox2d());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_light_status()->::perception::LightStatus::MergeFrom(from.light_status());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_msg()->::perception::DebugMessage::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_v2x_info()->::perception::V2XInformation::MergeFrom(from.v2x_info());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00002000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00004000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00020000u) {
      confidence_type_ = from.confidence_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      sub_type_ = from.sub_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00100000u) {
      height_above_ground_ = from.height_above_ground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  point_cloud_.InternalSwap(&other->point_cloud_);
  CastToBase(&drops_)->InternalSwap(CastToBase(&other->drops_));
  CastToBase(&measurements_)->InternalSwap(CastToBase(&other->measurements_));
  position_covariance_.InternalSwap(&other->position_covariance_);
  velocity_covariance_.InternalSwap(&other->velocity_covariance_);
  acceleration_covariance_.InternalSwap(&other->acceleration_covariance_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(anchor_point_, other->anchor_point_);
  swap(bbox2d_, other->bbox2d_);
  swap(light_status_, other->light_status_);
  swap(msg_, other->msg_);
  swap(v2x_info_, other->v2x_info_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(tracking_time_, other->tracking_time_);
  swap(timestamp_, other->timestamp_);
  swap(confidence_, other->confidence_);
  swap(confidence_type_, other->confidence_type_);
  swap(sub_type_, other->sub_type_);
  swap(source_, other->source_);
  swap(height_above_ground_, other->height_above_ground_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_perception_5fobstacle_2eproto);
  return ::file_level_metadata_perception_5fobstacle_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::perception::BBox2D* Arena::CreateMaybeMessage< ::perception::BBox2D >(Arena* arena) {
  return Arena::CreateInternal< ::perception::BBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::LightStatus* Arena::CreateMaybeMessage< ::perception::LightStatus >(Arena* arena) {
  return Arena::CreateInternal< ::perception::LightStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::V2XInformation* Arena::CreateMaybeMessage< ::perception::V2XInformation >(Arena* arena) {
  return Arena::CreateInternal< ::perception::V2XInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::SensorMeasurement* Arena::CreateMaybeMessage< ::perception::SensorMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::perception::SensorMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Trajectory* Arena::CreateMaybeMessage< ::perception::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::perception::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::DebugMessage* Arena::CreateMaybeMessage< ::perception::DebugMessage >(Arena* arena) {
  return Arena::CreateInternal< ::perception::DebugMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::PerceptionObstacle* Arena::CreateMaybeMessage< ::perception::PerceptionObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::perception::PerceptionObstacle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
