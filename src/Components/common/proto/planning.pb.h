// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef PROTOBUF_INCLUDED_planning_2eproto
#define PROTOBUF_INCLUDED_planning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "chassis.pb.h"
#include "pnc_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_planning_2eproto();
namespace planning {
class ADCTrajectory;
class ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class EStop;
class EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class RSSInfo;
class RSSInfoDefaultTypeInternal;
extern RSSInfoDefaultTypeInternal _RSSInfo_default_instance_;
class TaskStats;
class TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
namespace google {
namespace protobuf {
template<> ::planning::ADCTrajectory* Arena::CreateMaybeMessage<::planning::ADCTrajectory>(Arena*);
template<> ::planning::EStop* Arena::CreateMaybeMessage<::planning::EStop>(Arena*);
template<> ::planning::LatencyStats* Arena::CreateMaybeMessage<::planning::LatencyStats>(Arena*);
template<> ::planning::RSSInfo* Arena::CreateMaybeMessage<::planning::RSSInfo>(Arena*);
template<> ::planning::TaskStats* Arena::CreateMaybeMessage<::planning::TaskStats>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace planning {

enum ADCTrajectory_RightOfWayStatus {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
const int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
inline const ::std::string& ADCTrajectory_RightOfWayStatus_Name(ADCTrajectory_RightOfWayStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    const ::std::string& name, ADCTrajectory_RightOfWayStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3,
  ADCTrajectory_TrajectoryType_PATH_REUSED = 4
};
bool ADCTrajectory_TrajectoryType_IsValid(int value);
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = ADCTrajectory_TrajectoryType_UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = ADCTrajectory_TrajectoryType_PATH_REUSED;
const int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor();
inline const ::std::string& ADCTrajectory_TrajectoryType_Name(ADCTrajectory_TrajectoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_TrajectoryType_descriptor(), value);
}
inline bool ADCTrajectory_TrajectoryType_Parse(
    const ::std::string& name, ADCTrajectory_TrajectoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
    ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
enum JucType {
  UNKNOWN = 0,
  IN_ROAD = 1,
  CROSS_ROAD = 2,
  FORK_ROAD = 3,
  MAIN_SIDE = 4,
  DEAD_END = 5
};
bool JucType_IsValid(int value);
const JucType JucType_MIN = UNKNOWN;
const JucType JucType_MAX = DEAD_END;
const int JucType_ARRAYSIZE = JucType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JucType_descriptor();
inline const ::std::string& JucType_Name(JucType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JucType_descriptor(), value);
}
inline bool JucType_Parse(
    const ::std::string& name, JucType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JucType>(
    JucType_descriptor(), name, value);
}
// ===================================================================

class EStop :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.EStop) */ {
 public:
  EStop();
  virtual ~EStop();

  EStop(const EStop& from);

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EStop(EStop&& from) noexcept
    : EStop() {
    *this = ::std::move(from);
  }

  inline EStop& operator=(EStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EStop* internal_default_instance() {
    return reinterpret_cast<const EStop*>(
               &_EStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EStop* other);
  friend void swap(EStop& a, EStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EStop* New() const final {
    return CreateMaybeMessage<EStop>(nullptr);
  }

  EStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EStop& from);
  void MergeFrom(const EStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional bool is_estop = 1;
  bool has_is_estop() const;
  void clear_is_estop();
  static const int kIsEstopFieldNumber = 1;
  bool is_estop() const;
  void set_is_estop(bool value);

  // @@protoc_insertion_point(class_scope:planning.EStop)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool is_estop_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class TaskStats :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.TaskStats) */ {
 public:
  TaskStats();
  virtual ~TaskStats();

  TaskStats(const TaskStats& from);

  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskStats(TaskStats&& from) noexcept
    : TaskStats() {
    *this = ::std::move(from);
  }

  inline TaskStats& operator=(TaskStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskStats* internal_default_instance() {
    return reinterpret_cast<const TaskStats*>(
               &_TaskStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskStats* other);
  friend void swap(TaskStats& a, TaskStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskStats* New() const final {
    return CreateMaybeMessage<TaskStats>(nullptr);
  }

  TaskStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskStats& from);
  void MergeFrom(const TaskStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double time_ms = 2;
  bool has_time_ms() const;
  void clear_time_ms();
  static const int kTimeMsFieldNumber = 2;
  double time_ms() const;
  void set_time_ms(double value);

  // @@protoc_insertion_point(class_scope:planning.TaskStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double time_ms_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class LatencyStats :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LatencyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LatencyStats* other);
  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const final {
    return CreateMaybeMessage<LatencyStats>(nullptr);
  }

  LatencyStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  void clear_task_stats();
  static const int kTaskStatsFieldNumber = 2;
  ::planning::TaskStats* mutable_task_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::planning::TaskStats >*
      mutable_task_stats();
  const ::planning::TaskStats& task_stats(int index) const;
  ::planning::TaskStats* add_task_stats();
  const ::google::protobuf::RepeatedPtrField< ::planning::TaskStats >&
      task_stats() const;

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  void clear_init_frame_time_ms();
  static const int kInitFrameTimeMsFieldNumber = 3;
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);

  // @@protoc_insertion_point(class_scope:planning.LatencyStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::planning::TaskStats > task_stats_;
  double total_time_ms_;
  double init_frame_time_ms_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class RSSInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.RSSInfo) */ {
 public:
  RSSInfo();
  virtual ~RSSInfo();

  RSSInfo(const RSSInfo& from);

  inline RSSInfo& operator=(const RSSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RSSInfo(RSSInfo&& from) noexcept
    : RSSInfo() {
    *this = ::std::move(from);
  }

  inline RSSInfo& operator=(RSSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RSSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RSSInfo* internal_default_instance() {
    return reinterpret_cast<const RSSInfo*>(
               &_RSSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RSSInfo* other);
  friend void swap(RSSInfo& a, RSSInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RSSInfo* New() const final {
    return CreateMaybeMessage<RSSInfo>(nullptr);
  }

  RSSInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RSSInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RSSInfo& from);
  void MergeFrom(const RSSInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSSInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cur_dist_lon = 2;
  bool has_cur_dist_lon() const;
  void clear_cur_dist_lon();
  static const int kCurDistLonFieldNumber = 2;
  double cur_dist_lon() const;
  void set_cur_dist_lon(double value);

  // optional double rss_safe_dist_lon = 3;
  bool has_rss_safe_dist_lon() const;
  void clear_rss_safe_dist_lon();
  static const int kRssSafeDistLonFieldNumber = 3;
  double rss_safe_dist_lon() const;
  void set_rss_safe_dist_lon(double value);

  // optional double acc_lon_range_minimum = 4;
  bool has_acc_lon_range_minimum() const;
  void clear_acc_lon_range_minimum();
  static const int kAccLonRangeMinimumFieldNumber = 4;
  double acc_lon_range_minimum() const;
  void set_acc_lon_range_minimum(double value);

  // optional double acc_lon_range_maximum = 5;
  bool has_acc_lon_range_maximum() const;
  void clear_acc_lon_range_maximum();
  static const int kAccLonRangeMaximumFieldNumber = 5;
  double acc_lon_range_maximum() const;
  void set_acc_lon_range_maximum(double value);

  // optional double acc_lat_left_range_minimum = 6;
  bool has_acc_lat_left_range_minimum() const;
  void clear_acc_lat_left_range_minimum();
  static const int kAccLatLeftRangeMinimumFieldNumber = 6;
  double acc_lat_left_range_minimum() const;
  void set_acc_lat_left_range_minimum(double value);

  // optional double acc_lat_left_range_maximum = 7;
  bool has_acc_lat_left_range_maximum() const;
  void clear_acc_lat_left_range_maximum();
  static const int kAccLatLeftRangeMaximumFieldNumber = 7;
  double acc_lat_left_range_maximum() const;
  void set_acc_lat_left_range_maximum(double value);

  // optional double acc_lat_right_range_minimum = 8;
  bool has_acc_lat_right_range_minimum() const;
  void clear_acc_lat_right_range_minimum();
  static const int kAccLatRightRangeMinimumFieldNumber = 8;
  double acc_lat_right_range_minimum() const;
  void set_acc_lat_right_range_minimum(double value);

  // optional double acc_lat_right_range_maximum = 9;
  bool has_acc_lat_right_range_maximum() const;
  void clear_acc_lat_right_range_maximum();
  static const int kAccLatRightRangeMaximumFieldNumber = 9;
  double acc_lat_right_range_maximum() const;
  void set_acc_lat_right_range_maximum(double value);

  // optional bool is_rss_safe = 1;
  bool has_is_rss_safe() const;
  void clear_is_rss_safe();
  static const int kIsRssSafeFieldNumber = 1;
  bool is_rss_safe() const;
  void set_is_rss_safe(bool value);

  // @@protoc_insertion_point(class_scope:planning.RSSInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double cur_dist_lon_;
  double rss_safe_dist_lon_;
  double acc_lon_range_minimum_;
  double acc_lon_range_maximum_;
  double acc_lat_left_range_minimum_;
  double acc_lat_left_range_maximum_;
  double acc_lat_right_range_minimum_;
  double acc_lat_right_range_maximum_;
  bool is_rss_safe_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.ADCTrajectory) */ {
 public:
  ADCTrajectory();
  virtual ~ADCTrajectory();

  ADCTrajectory(const ADCTrajectory& from);

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ADCTrajectory(ADCTrajectory&& from) noexcept
    : ADCTrajectory() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ADCTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
               &_ADCTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ADCTrajectory* other);
  friend void swap(ADCTrajectory& a, ADCTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADCTrajectory* New() const final {
    return CreateMaybeMessage<ADCTrajectory>(nullptr);
  }

  ADCTrajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ADCTrajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ADCTrajectory& from);
  void MergeFrom(const ADCTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static const RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static const RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static const RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static const RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static const int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  static inline const ::std::string& RightOfWayStatus_Name(RightOfWayStatus value) {
    return ADCTrajectory_RightOfWayStatus_Name(value);
  }
  static inline bool RightOfWayStatus_Parse(const ::std::string& name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  typedef ADCTrajectory_TrajectoryType TrajectoryType;
  static const TrajectoryType UNKNOWN =
    ADCTrajectory_TrajectoryType_UNKNOWN;
  static const TrajectoryType NORMAL =
    ADCTrajectory_TrajectoryType_NORMAL;
  static const TrajectoryType PATH_FALLBACK =
    ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static const TrajectoryType SPEED_FALLBACK =
    ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static const TrajectoryType PATH_REUSED =
    ADCTrajectory_TrajectoryType_PATH_REUSED;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static const TrajectoryType TrajectoryType_MIN =
    ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static const TrajectoryType TrajectoryType_MAX =
    ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static const int TrajectoryType_ARRAYSIZE =
    ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  static inline const ::std::string& TrajectoryType_Name(TrajectoryType value) {
    return ADCTrajectory_TrajectoryType_Name(value);
  }
  static inline bool TrajectoryType_Parse(const ::std::string& name,
      TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .points.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 12;
  ::points::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::points::TrajectoryPoint& trajectory_point(int index) const;
  ::points::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
      trajectory_point() const;

  // repeated .points.PathPoint path_point = 13;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 13;
  ::points::PathPoint* mutable_path_point(int index);
  ::google::protobuf::RepeatedPtrField< ::points::PathPoint >*
      mutable_path_point();
  const ::points::PathPoint& path_point(int index) const;
  ::points::PathPoint* add_path_point();
  const ::google::protobuf::RepeatedPtrField< ::points::PathPoint >&
      path_point() const;

  // optional string replan_reason = 22;
  bool has_replan_reason() const;
  void clear_replan_reason();
  static const int kReplanReasonFieldNumber = 22;
  const ::std::string& replan_reason() const;
  void set_replan_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_replan_reason(::std::string&& value);
  #endif
  void set_replan_reason(const char* value);
  void set_replan_reason(const char* value, size_t size);
  ::std::string* mutable_replan_reason();
  ::std::string* release_replan_reason();
  void set_allocated_replan_reason(::std::string* replan_reason);

  // optional .controller.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::controller::Header& header() const;
  ::controller::Header* release_header();
  ::controller::Header* mutable_header();
  void set_allocated_header(::controller::Header* header);

  // optional .planning.EStop estop = 6;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 6;
  const ::planning::EStop& estop() const;
  ::planning::EStop* release_estop();
  ::planning::EStop* mutable_estop();
  void set_allocated_estop(::planning::EStop* estop);

  // optional .planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 15;
  const ::planning::LatencyStats& latency_stats() const;
  ::planning::LatencyStats* release_latency_stats();
  ::planning::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::planning::LatencyStats* latency_stats);

  // optional .controller.Header routing_header = 16;
  bool has_routing_header() const;
  void clear_routing_header();
  static const int kRoutingHeaderFieldNumber = 16;
  const ::controller::Header& routing_header() const;
  ::controller::Header* release_routing_header();
  ::controller::Header* mutable_routing_header();
  void set_allocated_routing_header(::controller::Header* routing_header);

  // optional .planning.RSSInfo rss_info = 100;
  bool has_rss_info() const;
  void clear_rss_info();
  static const int kRssInfoFieldNumber = 100;
  const ::planning::RSSInfo& rss_info() const;
  ::planning::RSSInfo* release_rss_info();
  ::planning::RSSInfo* mutable_rss_info();
  void set_allocated_rss_info(::planning::RSSInfo* rss_info);

  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 2;
  double total_path_length() const;
  void set_total_path_length(double value);

  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  void clear_total_path_time();
  static const int kTotalPathTimeFieldNumber = 3;
  double total_path_time() const;
  void set_total_path_time(double value);

  // optional .canbus.Chassis.GearPosition gear = 10;
  bool has_gear() const;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::canbus::Chassis_GearPosition gear() const;
  void set_gear(::canbus::Chassis_GearPosition value);

  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  void clear_is_replan();
  static const int kIsReplanFieldNumber = 9;
  bool is_replan() const;
  void set_is_replan(bool value);

  // optional bool car_in_dead_end = 24;
  bool has_car_in_dead_end() const;
  void clear_car_in_dead_end();
  static const int kCarInDeadEndFieldNumber = 24;
  bool car_in_dead_end() const;
  void set_car_in_dead_end(bool value);

  // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  void clear_right_of_way_status();
  static const int kRightOfWayStatusFieldNumber = 17;
  ::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::planning::ADCTrajectory_RightOfWayStatus value);

  // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  bool has_trajectory_type() const;
  void clear_trajectory_type();
  static const int kTrajectoryTypeFieldNumber = 21;
  ::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::planning::ADCTrajectory_TrajectoryType value);

  // @@protoc_insertion_point(class_scope:planning.ADCTrajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint > trajectory_point_;
  ::google::protobuf::RepeatedPtrField< ::points::PathPoint > path_point_;
  ::google::protobuf::internal::ArenaStringPtr replan_reason_;
  ::controller::Header* header_;
  ::planning::EStop* estop_;
  ::planning::LatencyStats* latency_stats_;
  ::controller::Header* routing_header_;
  ::planning::RSSInfo* rss_info_;
  double total_path_length_;
  double total_path_time_;
  int gear_;
  bool is_replan_;
  bool car_in_dead_end_;
  int right_of_way_status_;
  int trajectory_type_;
  friend struct ::TableStruct_planning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EStop

// optional bool is_estop = 1;
inline bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EStop::clear_is_estop() {
  is_estop_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:planning.EStop.is_estop)
  return is_estop_;
}
inline void EStop::set_is_estop(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:planning.EStop.is_estop)
}

// optional string reason = 2;
inline bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:planning.EStop.reason)
  return reason_.GetNoArena();
}
inline void EStop::set_reason(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.EStop.reason)
}
#if LANG_CXX11
inline void EStop::set_reason(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.EStop.reason)
}
#endif
inline void EStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.EStop.reason)
}
inline void EStop::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.EStop.reason)
}
inline ::std::string* EStop::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:planning.EStop.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:planning.TaskStats.name)
  return name_.GetNoArena();
}
inline void TaskStats::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.TaskStats.name)
}
#if LANG_CXX11
inline void TaskStats::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.TaskStats.name)
}
#endif
inline void TaskStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.TaskStats.name)
}
inline ::std::string* TaskStats::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:planning.TaskStats.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStats::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:planning.TaskStats.time_ms)
  return time_ms_;
}
inline void TaskStats::set_time_ms(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:planning.TaskStats.time_ms)
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  _has_bits_[0] |= 0x00000001u;
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:planning.LatencyStats.total_time_ms)
}

// repeated .planning.TaskStats task_stats = 2;
inline int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
inline void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
inline ::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:planning.LatencyStats.task_stats)
  return &task_stats_;
}
inline const ::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
inline ::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  _has_bits_[0] |= 0x00000002u;
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:planning.LatencyStats.init_frame_time_ms)
}

// -------------------------------------------------------------------

// RSSInfo

// optional bool is_rss_safe = 1;
inline bool RSSInfo::has_is_rss_safe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RSSInfo::clear_is_rss_safe() {
  is_rss_safe_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RSSInfo::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.is_rss_safe)
  return is_rss_safe_;
}
inline void RSSInfo::set_is_rss_safe(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_rss_safe_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.is_rss_safe)
}

// optional double cur_dist_lon = 2;
inline bool RSSInfo::has_cur_dist_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSSInfo::clear_cur_dist_lon() {
  cur_dist_lon_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RSSInfo::cur_dist_lon() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.cur_dist_lon)
  return cur_dist_lon_;
}
inline void RSSInfo::set_cur_dist_lon(double value) {
  _has_bits_[0] |= 0x00000001u;
  cur_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.cur_dist_lon)
}

// optional double rss_safe_dist_lon = 3;
inline bool RSSInfo::has_rss_safe_dist_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSSInfo::clear_rss_safe_dist_lon() {
  rss_safe_dist_lon_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RSSInfo::rss_safe_dist_lon() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.rss_safe_dist_lon)
  return rss_safe_dist_lon_;
}
inline void RSSInfo::set_rss_safe_dist_lon(double value) {
  _has_bits_[0] |= 0x00000002u;
  rss_safe_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.rss_safe_dist_lon)
}

// optional double acc_lon_range_minimum = 4;
inline bool RSSInfo::has_acc_lon_range_minimum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSSInfo::clear_acc_lon_range_minimum() {
  acc_lon_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RSSInfo::acc_lon_range_minimum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lon_range_minimum)
  return acc_lon_range_minimum_;
}
inline void RSSInfo::set_acc_lon_range_minimum(double value) {
  _has_bits_[0] |= 0x00000004u;
  acc_lon_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lon_range_minimum)
}

// optional double acc_lon_range_maximum = 5;
inline bool RSSInfo::has_acc_lon_range_maximum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSSInfo::clear_acc_lon_range_maximum() {
  acc_lon_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RSSInfo::acc_lon_range_maximum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lon_range_maximum)
  return acc_lon_range_maximum_;
}
inline void RSSInfo::set_acc_lon_range_maximum(double value) {
  _has_bits_[0] |= 0x00000008u;
  acc_lon_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lon_range_maximum)
}

// optional double acc_lat_left_range_minimum = 6;
inline bool RSSInfo::has_acc_lat_left_range_minimum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSSInfo::clear_acc_lat_left_range_minimum() {
  acc_lat_left_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RSSInfo::acc_lat_left_range_minimum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lat_left_range_minimum)
  return acc_lat_left_range_minimum_;
}
inline void RSSInfo::set_acc_lat_left_range_minimum(double value) {
  _has_bits_[0] |= 0x00000010u;
  acc_lat_left_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lat_left_range_minimum)
}

// optional double acc_lat_left_range_maximum = 7;
inline bool RSSInfo::has_acc_lat_left_range_maximum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RSSInfo::clear_acc_lat_left_range_maximum() {
  acc_lat_left_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RSSInfo::acc_lat_left_range_maximum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lat_left_range_maximum)
  return acc_lat_left_range_maximum_;
}
inline void RSSInfo::set_acc_lat_left_range_maximum(double value) {
  _has_bits_[0] |= 0x00000020u;
  acc_lat_left_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lat_left_range_maximum)
}

// optional double acc_lat_right_range_minimum = 8;
inline bool RSSInfo::has_acc_lat_right_range_minimum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RSSInfo::clear_acc_lat_right_range_minimum() {
  acc_lat_right_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RSSInfo::acc_lat_right_range_minimum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lat_right_range_minimum)
  return acc_lat_right_range_minimum_;
}
inline void RSSInfo::set_acc_lat_right_range_minimum(double value) {
  _has_bits_[0] |= 0x00000040u;
  acc_lat_right_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lat_right_range_minimum)
}

// optional double acc_lat_right_range_maximum = 9;
inline bool RSSInfo::has_acc_lat_right_range_maximum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RSSInfo::clear_acc_lat_right_range_maximum() {
  acc_lat_right_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RSSInfo::acc_lat_right_range_maximum() const {
  // @@protoc_insertion_point(field_get:planning.RSSInfo.acc_lat_right_range_maximum)
  return acc_lat_right_range_maximum_;
}
inline void RSSInfo::set_acc_lat_right_range_maximum(double value) {
  _has_bits_[0] |= 0x00000080u;
  acc_lat_right_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:planning.RSSInfo.acc_lat_right_range_maximum)
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .controller.Header header = 1;
inline bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::controller::Header& ADCTrajectory::header() const {
  const ::controller::Header* p = header_;
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.header)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::controller::Header* ADCTrajectory::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.header)
  return header_;
}
inline void ADCTrajectory::set_allocated_header(::controller::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  _has_bits_[0] |= 0x00000040u;
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  _has_bits_[0] |= 0x00000080u;
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.total_path_time)
}

// optional .planning.EStop estop = 6;
inline bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCTrajectory::clear_estop() {
  if (estop_ != nullptr) estop_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::planning::EStop& ADCTrajectory::estop() const {
  const ::planning::EStop* p = estop_;
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.estop)
  return p != nullptr ? *p : *reinterpret_cast<const ::planning::EStop*>(
      &::planning::_EStop_default_instance_);
}
inline ::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.estop)
  _has_bits_[0] &= ~0x00000004u;
  ::planning::EStop* temp = estop_;
  estop_ = nullptr;
  return temp;
}
inline ::planning::EStop* ADCTrajectory::mutable_estop() {
  _has_bits_[0] |= 0x00000004u;
  if (estop_ == nullptr) {
    auto* p = CreateMaybeMessage<::planning::EStop>(GetArenaNoVirtual());
    estop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.estop)
  return estop_;
}
inline void ADCTrajectory::set_allocated_estop(::planning::EStop* estop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete estop_;
  }
  if (estop) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      estop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  estop_ = estop;
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.estop)
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.is_replan)
  return is_replan_;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.is_replan)
}

// optional .canbus.Chassis.GearPosition gear = 10;
inline bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.gear)
  return static_cast< ::canbus::Chassis_GearPosition >(gear_);
}
inline void ADCTrajectory::set_gear(::canbus::Chassis_GearPosition value) {
  assert(::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.gear)
}

// repeated .points.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline ::points::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::points::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::points::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// repeated .points.PathPoint path_point = 13;
inline int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
inline ::points::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::points::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:planning.ADCTrajectory.path_point)
  return &path_point_;
}
inline const ::points::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
inline ::points::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::points::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional .planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != nullptr) latency_stats_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  const ::planning::LatencyStats* p = latency_stats_;
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.latency_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::planning::LatencyStats*>(
      &::planning::_LatencyStats_default_instance_);
}
inline ::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.latency_stats)
  _has_bits_[0] &= ~0x00000008u;
  ::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = nullptr;
  return temp;
}
inline ::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  _has_bits_[0] |= 0x00000008u;
  if (latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::planning::LatencyStats>(GetArenaNoVirtual());
    latency_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
inline void ADCTrajectory::set_allocated_latency_stats(::planning::LatencyStats* latency_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latency_stats_;
  }
  if (latency_stats) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latency_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.latency_stats)
}

// optional .controller.Header routing_header = 16;
inline bool ADCTrajectory::has_routing_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::controller::Header& ADCTrajectory::routing_header() const {
  const ::controller::Header* p = routing_header_;
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.routing_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.routing_header)
  _has_bits_[0] &= ~0x00000010u;
  ::controller::Header* temp = routing_header_;
  routing_header_ = nullptr;
  return temp;
}
inline ::controller::Header* ADCTrajectory::mutable_routing_header() {
  _has_bits_[0] |= 0x00000010u;
  if (routing_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    routing_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.routing_header)
  return routing_header_;
}
inline void ADCTrajectory::set_allocated_routing_header(::controller::Header* routing_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(routing_header_);
  }
  if (routing_header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, routing_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  routing_header_ = routing_header;
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.routing_header)
}

// optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
inline void ADCTrajectory::set_right_of_way_status(::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.right_of_way_status)
}

// optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
inline bool ADCTrajectory::has_trajectory_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.trajectory_type)
  return static_cast< ::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
inline void ADCTrajectory::set_trajectory_type(::planning::ADCTrajectory_TrajectoryType value) {
  assert(::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.trajectory_type)
}

// optional string replan_reason = 22;
inline bool ADCTrajectory::has_replan_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCTrajectory::clear_replan_reason() {
  replan_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ADCTrajectory::replan_reason() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.replan_reason)
  return replan_reason_.GetNoArena();
}
inline void ADCTrajectory::set_replan_reason(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.replan_reason)
}
#if LANG_CXX11
inline void ADCTrajectory::set_replan_reason(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.ADCTrajectory.replan_reason)
}
#endif
inline void ADCTrajectory::set_replan_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.ADCTrajectory.replan_reason)
}
inline void ADCTrajectory::set_replan_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.ADCTrajectory.replan_reason)
}
inline ::std::string* ADCTrajectory::mutable_replan_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.replan_reason)
  return replan_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADCTrajectory::release_replan_reason() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.replan_reason)
  if (!has_replan_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return replan_reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADCTrajectory::set_allocated_replan_reason(::std::string* replan_reason) {
  if (replan_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  replan_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replan_reason);
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.replan_reason)
}

// optional bool car_in_dead_end = 24;
inline bool ADCTrajectory::has_car_in_dead_end() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ADCTrajectory::clear_car_in_dead_end() {
  car_in_dead_end_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ADCTrajectory::car_in_dead_end() const {
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.car_in_dead_end)
  return car_in_dead_end_;
}
inline void ADCTrajectory::set_car_in_dead_end(bool value) {
  _has_bits_[0] |= 0x00000400u;
  car_in_dead_end_ = value;
  // @@protoc_insertion_point(field_set:planning.ADCTrajectory.car_in_dead_end)
}

// optional .planning.RSSInfo rss_info = 100;
inline bool ADCTrajectory::has_rss_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADCTrajectory::clear_rss_info() {
  if (rss_info_ != nullptr) rss_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::planning::RSSInfo& ADCTrajectory::rss_info() const {
  const ::planning::RSSInfo* p = rss_info_;
  // @@protoc_insertion_point(field_get:planning.ADCTrajectory.rss_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::planning::RSSInfo*>(
      &::planning::_RSSInfo_default_instance_);
}
inline ::planning::RSSInfo* ADCTrajectory::release_rss_info() {
  // @@protoc_insertion_point(field_release:planning.ADCTrajectory.rss_info)
  _has_bits_[0] &= ~0x00000020u;
  ::planning::RSSInfo* temp = rss_info_;
  rss_info_ = nullptr;
  return temp;
}
inline ::planning::RSSInfo* ADCTrajectory::mutable_rss_info() {
  _has_bits_[0] |= 0x00000020u;
  if (rss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::planning::RSSInfo>(GetArenaNoVirtual());
    rss_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ADCTrajectory.rss_info)
  return rss_info_;
}
inline void ADCTrajectory::set_allocated_rss_info(::planning::RSSInfo* rss_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rss_info_;
  }
  if (rss_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rss_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rss_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  rss_info_ = rss_info;
  // @@protoc_insertion_point(field_set_allocated:planning.ADCTrajectory.rss_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::planning::ADCTrajectory_RightOfWayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <> struct is_proto_enum< ::planning::ADCTrajectory_TrajectoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::ADCTrajectory_TrajectoryType>() {
  return ::planning::ADCTrajectory_TrajectoryType_descriptor();
}
template <> struct is_proto_enum< ::planning::JucType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::planning::JucType>() {
  return ::planning::JucType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_planning_2eproto
