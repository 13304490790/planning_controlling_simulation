// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_cmd.proto

#ifndef PROTOBUF_INCLUDED_control_5fcmd_2eproto
#define PROTOBUF_INCLUDED_control_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "chassis.pb.h"
#include "header.pb.h"
#include "pnc_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fcmd_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fcmd_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_control_5fcmd_2eproto();
namespace controller {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class InputDebug;
class InputDebugDefaultTypeInternal;
extern InputDebugDefaultTypeInternal _InputDebug_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class MracAdaptiveGain;
class MracAdaptiveGainDefaultTypeInternal;
extern MracAdaptiveGainDefaultTypeInternal _MracAdaptiveGain_default_instance_;
class MracDebug;
class MracDebugDefaultTypeInternal;
extern MracDebugDefaultTypeInternal _MracDebug_default_instance_;
class SimpleLateralDebug;
class SimpleLateralDebugDefaultTypeInternal;
extern SimpleLateralDebugDefaultTypeInternal _SimpleLateralDebug_default_instance_;
class SimpleLongitudinalDebug;
class SimpleLongitudinalDebugDefaultTypeInternal;
extern SimpleLongitudinalDebugDefaultTypeInternal _SimpleLongitudinalDebug_default_instance_;
class SimpleMPCDebug;
class SimpleMPCDebugDefaultTypeInternal;
extern SimpleMPCDebugDefaultTypeInternal _SimpleMPCDebug_default_instance_;
class SimplePIDLatLonDebug;
class SimplePIDLatLonDebugDefaultTypeInternal;
extern SimplePIDLatLonDebugDefaultTypeInternal _SimplePIDLatLonDebug_default_instance_;
class StanleyDebug;
class StanleyDebugDefaultTypeInternal;
extern StanleyDebugDefaultTypeInternal _StanleyDebug_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::ControlCommand* Arena::CreateMaybeMessage<::controller::ControlCommand>(Arena*);
template<> ::controller::Debug* Arena::CreateMaybeMessage<::controller::Debug>(Arena*);
template<> ::controller::InputDebug* Arena::CreateMaybeMessage<::controller::InputDebug>(Arena*);
template<> ::controller::LatencyStats* Arena::CreateMaybeMessage<::controller::LatencyStats>(Arena*);
template<> ::controller::MracAdaptiveGain* Arena::CreateMaybeMessage<::controller::MracAdaptiveGain>(Arena*);
template<> ::controller::MracDebug* Arena::CreateMaybeMessage<::controller::MracDebug>(Arena*);
template<> ::controller::SimpleLateralDebug* Arena::CreateMaybeMessage<::controller::SimpleLateralDebug>(Arena*);
template<> ::controller::SimpleLongitudinalDebug* Arena::CreateMaybeMessage<::controller::SimpleLongitudinalDebug>(Arena*);
template<> ::controller::SimpleMPCDebug* Arena::CreateMaybeMessage<::controller::SimpleMPCDebug>(Arena*);
template<> ::controller::SimplePIDLatLonDebug* Arena::CreateMaybeMessage<::controller::SimplePIDLatLonDebug>(Arena*);
template<> ::controller::StanleyDebug* Arena::CreateMaybeMessage<::controller::StanleyDebug>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

enum TurnSignal {
  TURN_NONE = 0,
  TURN_LEFT = 1,
  TURN_RIGHT = 2
};
bool TurnSignal_IsValid(int value);
const TurnSignal TurnSignal_MIN = TURN_NONE;
const TurnSignal TurnSignal_MAX = TURN_RIGHT;
const int TurnSignal_ARRAYSIZE = TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* TurnSignal_descriptor();
inline const ::std::string& TurnSignal_Name(TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    TurnSignal_descriptor(), value);
}
inline bool TurnSignal_Parse(
    const ::std::string& name, TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TurnSignal>(
    TurnSignal_descriptor(), name, value);
}
// ===================================================================

class LatencyStats :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LatencyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LatencyStats* other);
  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const final {
    return CreateMaybeMessage<LatencyStats>(nullptr);
  }

  LatencyStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double controller_time_ms = 2;
  int controller_time_ms_size() const;
  void clear_controller_time_ms();
  static const int kControllerTimeMsFieldNumber = 2;
  double controller_time_ms(int index) const;
  void set_controller_time_ms(int index, double value);
  void add_controller_time_ms(double value);
  const ::google::protobuf::RepeatedField< double >&
      controller_time_ms() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_controller_time_ms();

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // optional bool total_time_exceeded = 3;
  bool has_total_time_exceeded() const;
  void clear_total_time_exceeded();
  static const int kTotalTimeExceededFieldNumber = 3;
  bool total_time_exceeded() const;
  void set_total_time_exceeded(bool value);

  // @@protoc_insertion_point(class_scope:controller.LatencyStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > controller_time_ms_;
  double total_time_ms_;
  bool total_time_exceeded_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class ControlCommand :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControlCommand* other);
  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const final {
    return CreateMaybeMessage<ControlCommand>(nullptr);
  }

  ControlCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .controller.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::controller::Header& header() const;
  ::controller::Header* release_header();
  ::controller::Header* mutable_header();
  void set_allocated_header(::controller::Header* header);

  // optional .controller.Debug debug = 22;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 22;
  const ::controller::Debug& debug() const;
  ::controller::Debug* release_debug();
  ::controller::Debug* mutable_debug();
  void set_allocated_debug(::controller::Debug* debug);

  // optional .controller.LatencyStats latency_stats = 24;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 24;
  const ::controller::LatencyStats& latency_stats() const;
  ::controller::LatencyStats* release_latency_stats();
  ::controller::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::controller::LatencyStats* latency_stats);

  // optional double throttle = 3;
  bool has_throttle() const;
  void clear_throttle();
  static const int kThrottleFieldNumber = 3;
  double throttle() const;
  void set_throttle(double value);

  // optional double brake = 4;
  bool has_brake() const;
  void clear_brake();
  static const int kBrakeFieldNumber = 4;
  double brake() const;
  void set_brake(double value);

  // optional double steering_rate = 6;
  bool has_steering_rate() const;
  void clear_steering_rate();
  static const int kSteeringRateFieldNumber = 6;
  double steering_rate() const;
  void set_steering_rate(double value);

  // optional double steering_target = 7;
  bool has_steering_target() const;
  void clear_steering_target();
  static const int kSteeringTargetFieldNumber = 7;
  double steering_target() const;
  void set_steering_target(double value);

  // optional double speed = 9;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 9;
  double speed() const;
  void set_speed(double value);

  // optional double acceleration = 10;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 10;
  double acceleration() const;
  void set_acceleration(double value);

  // optional bool left_turn = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_left_turn() const;
  PROTOBUF_DEPRECATED void clear_left_turn();
  PROTOBUF_DEPRECATED static const int kLeftTurnFieldNumber = 13;
  PROTOBUF_DEPRECATED bool left_turn() const;
  PROTOBUF_DEPRECATED void set_left_turn(bool value);

  // optional bool right_turn = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_right_turn() const;
  PROTOBUF_DEPRECATED void clear_right_turn();
  PROTOBUF_DEPRECATED static const int kRightTurnFieldNumber = 14;
  PROTOBUF_DEPRECATED bool right_turn() const;
  PROTOBUF_DEPRECATED void set_right_turn(bool value);

  // optional bool high_beam = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_high_beam() const;
  PROTOBUF_DEPRECATED void clear_high_beam();
  PROTOBUF_DEPRECATED static const int kHighBeamFieldNumber = 11;
  PROTOBUF_DEPRECATED bool high_beam() const;
  PROTOBUF_DEPRECATED void set_high_beam(bool value);

  // optional bool low_beam = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_low_beam() const;
  PROTOBUF_DEPRECATED void clear_low_beam();
  PROTOBUF_DEPRECATED static const int kLowBeamFieldNumber = 12;
  PROTOBUF_DEPRECATED bool low_beam() const;
  PROTOBUF_DEPRECATED void set_low_beam(bool value);

  // optional bool horn = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_horn() const;
  PROTOBUF_DEPRECATED void clear_horn();
  PROTOBUF_DEPRECATED static const int kHornFieldNumber = 15;
  PROTOBUF_DEPRECATED bool horn() const;
  PROTOBUF_DEPRECATED void set_horn(bool value);

  // optional bool parking_brake = 8;
  bool has_parking_brake() const;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 8;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool reset_model = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_reset_model() const;
  PROTOBUF_DEPRECATED void clear_reset_model();
  PROTOBUF_DEPRECATED static const int kResetModelFieldNumber = 16;
  PROTOBUF_DEPRECATED bool reset_model() const;
  PROTOBUF_DEPRECATED void set_reset_model(bool value);

  // optional bool engine_on_off = 17;
  bool has_engine_on_off() const;
  void clear_engine_on_off();
  static const int kEngineOnOffFieldNumber = 17;
  bool engine_on_off() const;
  void set_engine_on_off(bool value);

  // optional bool is_in_safe_mode = 27 [default = false];
  bool has_is_in_safe_mode() const;
  void clear_is_in_safe_mode();
  static const int kIsInSafeModeFieldNumber = 27;
  bool is_in_safe_mode() const;
  void set_is_in_safe_mode(bool value);

  // optional .canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_driving_mode() const;
  PROTOBUF_DEPRECATED void clear_driving_mode();
  PROTOBUF_DEPRECATED static const int kDrivingModeFieldNumber = 19;
  PROTOBUF_DEPRECATED ::canbus::Chassis_DrivingMode driving_mode() const;
  PROTOBUF_DEPRECATED void set_driving_mode(::canbus::Chassis_DrivingMode value);

  // optional double trajectory_fraction = 18;
  bool has_trajectory_fraction() const;
  void clear_trajectory_fraction();
  static const int kTrajectoryFractionFieldNumber = 18;
  double trajectory_fraction() const;
  void set_trajectory_fraction(double value);

  // optional .canbus.Chassis.GearPosition gear_location = 20;
  bool has_gear_location() const;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 20;
  ::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::canbus::Chassis_GearPosition value);

  // optional .controller.TurnSignal turnsignal = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_turnsignal() const;
  PROTOBUF_DEPRECATED void clear_turnsignal();
  PROTOBUF_DEPRECATED static const int kTurnsignalFieldNumber = 21;
  PROTOBUF_DEPRECATED ::controller::TurnSignal turnsignal() const;
  PROTOBUF_DEPRECATED void set_turnsignal(::controller::TurnSignal value);

  // @@protoc_insertion_point(class_scope:controller.ControlCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::Header* header_;
  ::controller::Debug* debug_;
  ::controller::LatencyStats* latency_stats_;
  double throttle_;
  double brake_;
  double steering_rate_;
  double steering_target_;
  double speed_;
  double acceleration_;
  bool left_turn_;
  bool right_turn_;
  bool high_beam_;
  bool low_beam_;
  bool horn_;
  bool parking_brake_;
  bool reset_model_;
  bool engine_on_off_;
  bool is_in_safe_mode_;
  int driving_mode_;
  double trajectory_fraction_;
  int gear_location_;
  int turnsignal_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleLongitudinalDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.SimpleLongitudinalDebug) */ {
 public:
  SimpleLongitudinalDebug();
  virtual ~SimpleLongitudinalDebug();

  SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from);

  inline SimpleLongitudinalDebug& operator=(const SimpleLongitudinalDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleLongitudinalDebug(SimpleLongitudinalDebug&& from) noexcept
    : SimpleLongitudinalDebug() {
    *this = ::std::move(from);
  }

  inline SimpleLongitudinalDebug& operator=(SimpleLongitudinalDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleLongitudinalDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleLongitudinalDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLongitudinalDebug*>(
               &_SimpleLongitudinalDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SimpleLongitudinalDebug* other);
  friend void swap(SimpleLongitudinalDebug& a, SimpleLongitudinalDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleLongitudinalDebug* New() const final {
    return CreateMaybeMessage<SimpleLongitudinalDebug>(nullptr);
  }

  SimpleLongitudinalDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleLongitudinalDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleLongitudinalDebug& from);
  void MergeFrom(const SimpleLongitudinalDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleLongitudinalDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .points.TrajectoryPoint current_matched_point = 32;
  bool has_current_matched_point() const;
  void clear_current_matched_point();
  static const int kCurrentMatchedPointFieldNumber = 32;
  const ::points::TrajectoryPoint& current_matched_point() const;
  ::points::TrajectoryPoint* release_current_matched_point();
  ::points::TrajectoryPoint* mutable_current_matched_point();
  void set_allocated_current_matched_point(::points::TrajectoryPoint* current_matched_point);

  // optional .points.TrajectoryPoint current_reference_point = 33;
  bool has_current_reference_point() const;
  void clear_current_reference_point();
  static const int kCurrentReferencePointFieldNumber = 33;
  const ::points::TrajectoryPoint& current_reference_point() const;
  ::points::TrajectoryPoint* release_current_reference_point();
  ::points::TrajectoryPoint* mutable_current_reference_point();
  void set_allocated_current_reference_point(::points::TrajectoryPoint* current_reference_point);

  // optional .points.TrajectoryPoint preview_reference_point = 34;
  bool has_preview_reference_point() const;
  void clear_preview_reference_point();
  static const int kPreviewReferencePointFieldNumber = 34;
  const ::points::TrajectoryPoint& preview_reference_point() const;
  ::points::TrajectoryPoint* release_preview_reference_point();
  ::points::TrajectoryPoint* mutable_preview_reference_point();
  void set_allocated_preview_reference_point(::points::TrajectoryPoint* preview_reference_point);

  // optional double station_reference = 1;
  bool has_station_reference() const;
  void clear_station_reference();
  static const int kStationReferenceFieldNumber = 1;
  double station_reference() const;
  void set_station_reference(double value);

  // optional double station_error = 2;
  bool has_station_error() const;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 2;
  double station_error() const;
  void set_station_error(double value);

  // optional double station_error_limited = 3;
  bool has_station_error_limited() const;
  void clear_station_error_limited();
  static const int kStationErrorLimitedFieldNumber = 3;
  double station_error_limited() const;
  void set_station_error_limited(double value);

  // optional double preview_station_error = 4;
  bool has_preview_station_error() const;
  void clear_preview_station_error();
  static const int kPreviewStationErrorFieldNumber = 4;
  double preview_station_error() const;
  void set_preview_station_error(double value);

  // optional double speed_reference = 5;
  bool has_speed_reference() const;
  void clear_speed_reference();
  static const int kSpeedReferenceFieldNumber = 5;
  double speed_reference() const;
  void set_speed_reference(double value);

  // optional double speed_error = 6;
  bool has_speed_error() const;
  void clear_speed_error();
  static const int kSpeedErrorFieldNumber = 6;
  double speed_error() const;
  void set_speed_error(double value);

  // optional double speed_controller_input_limited = 7;
  bool has_speed_controller_input_limited() const;
  void clear_speed_controller_input_limited();
  static const int kSpeedControllerInputLimitedFieldNumber = 7;
  double speed_controller_input_limited() const;
  void set_speed_controller_input_limited(double value);

  // optional double preview_speed_reference = 8;
  bool has_preview_speed_reference() const;
  void clear_preview_speed_reference();
  static const int kPreviewSpeedReferenceFieldNumber = 8;
  double preview_speed_reference() const;
  void set_preview_speed_reference(double value);

  // optional double preview_speed_error = 9;
  bool has_preview_speed_error() const;
  void clear_preview_speed_error();
  static const int kPreviewSpeedErrorFieldNumber = 9;
  double preview_speed_error() const;
  void set_preview_speed_error(double value);

  // optional double preview_acceleration_reference = 10;
  bool has_preview_acceleration_reference() const;
  void clear_preview_acceleration_reference();
  static const int kPreviewAccelerationReferenceFieldNumber = 10;
  double preview_acceleration_reference() const;
  void set_preview_acceleration_reference(double value);

  // optional double acceleration_cmd_closeloop = 11;
  bool has_acceleration_cmd_closeloop() const;
  void clear_acceleration_cmd_closeloop();
  static const int kAccelerationCmdCloseloopFieldNumber = 11;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  // optional double acceleration_cmd = 12;
  bool has_acceleration_cmd() const;
  void clear_acceleration_cmd();
  static const int kAccelerationCmdFieldNumber = 12;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  // optional double acceleration_lookup = 13;
  bool has_acceleration_lookup() const;
  void clear_acceleration_lookup();
  static const int kAccelerationLookupFieldNumber = 13;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  // optional double speed_lookup = 14;
  bool has_speed_lookup() const;
  void clear_speed_lookup();
  static const int kSpeedLookupFieldNumber = 14;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  // optional double calibration_value = 15;
  bool has_calibration_value() const;
  void clear_calibration_value();
  static const int kCalibrationValueFieldNumber = 15;
  double calibration_value() const;
  void set_calibration_value(double value);

  // optional double throttle_cmd = 16;
  bool has_throttle_cmd() const;
  void clear_throttle_cmd();
  static const int kThrottleCmdFieldNumber = 16;
  double throttle_cmd() const;
  void set_throttle_cmd(double value);

  // optional double brake_cmd = 17;
  bool has_brake_cmd() const;
  void clear_brake_cmd();
  static const int kBrakeCmdFieldNumber = 17;
  double brake_cmd() const;
  void set_brake_cmd(double value);

  // optional double slope_offset_compensation = 19;
  bool has_slope_offset_compensation() const;
  void clear_slope_offset_compensation();
  static const int kSlopeOffsetCompensationFieldNumber = 19;
  double slope_offset_compensation() const;
  void set_slope_offset_compensation(double value);

  // optional double current_station = 20;
  bool has_current_station() const;
  void clear_current_station();
  static const int kCurrentStationFieldNumber = 20;
  double current_station() const;
  void set_current_station(double value);

  // optional bool is_full_stop = 18;
  bool has_is_full_stop() const;
  void clear_is_full_stop();
  static const int kIsFullStopFieldNumber = 18;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  // optional int32 pid_saturation_status = 22;
  bool has_pid_saturation_status() const;
  void clear_pid_saturation_status();
  static const int kPidSaturationStatusFieldNumber = 22;
  ::google::protobuf::int32 pid_saturation_status() const;
  void set_pid_saturation_status(::google::protobuf::int32 value);

  // optional double path_remain = 21;
  bool has_path_remain() const;
  void clear_path_remain();
  static const int kPathRemainFieldNumber = 21;
  double path_remain() const;
  void set_path_remain(double value);

  // optional double speed_offset = 24;
  bool has_speed_offset() const;
  void clear_speed_offset();
  static const int kSpeedOffsetFieldNumber = 24;
  double speed_offset() const;
  void set_speed_offset(double value);

  // optional double current_speed = 25;
  bool has_current_speed() const;
  void clear_current_speed();
  static const int kCurrentSpeedFieldNumber = 25;
  double current_speed() const;
  void set_current_speed(double value);

  // optional double acceleration_reference = 26;
  bool has_acceleration_reference() const;
  void clear_acceleration_reference();
  static const int kAccelerationReferenceFieldNumber = 26;
  double acceleration_reference() const;
  void set_acceleration_reference(double value);

  // optional double current_acceleration = 27;
  bool has_current_acceleration() const;
  void clear_current_acceleration();
  static const int kCurrentAccelerationFieldNumber = 27;
  double current_acceleration() const;
  void set_current_acceleration(double value);

  // optional double acceleration_error = 28;
  bool has_acceleration_error() const;
  void clear_acceleration_error();
  static const int kAccelerationErrorFieldNumber = 28;
  double acceleration_error() const;
  void set_acceleration_error(double value);

  // optional double jerk_reference = 29;
  bool has_jerk_reference() const;
  void clear_jerk_reference();
  static const int kJerkReferenceFieldNumber = 29;
  double jerk_reference() const;
  void set_jerk_reference(double value);

  // optional double current_jerk = 30;
  bool has_current_jerk() const;
  void clear_current_jerk();
  static const int kCurrentJerkFieldNumber = 30;
  double current_jerk() const;
  void set_current_jerk(double value);

  // optional double jerk_error = 31;
  bool has_jerk_error() const;
  void clear_jerk_error();
  static const int kJerkErrorFieldNumber = 31;
  double jerk_error() const;
  void set_jerk_error(double value);

  // optional int32 leadlag_saturation_status = 23;
  bool has_leadlag_saturation_status() const;
  void clear_leadlag_saturation_status();
  static const int kLeadlagSaturationStatusFieldNumber = 23;
  ::google::protobuf::int32 leadlag_saturation_status() const;
  void set_leadlag_saturation_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:controller.SimpleLongitudinalDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::points::TrajectoryPoint* current_matched_point_;
  ::points::TrajectoryPoint* current_reference_point_;
  ::points::TrajectoryPoint* preview_reference_point_;
  double station_reference_;
  double station_error_;
  double station_error_limited_;
  double preview_station_error_;
  double speed_reference_;
  double speed_error_;
  double speed_controller_input_limited_;
  double preview_speed_reference_;
  double preview_speed_error_;
  double preview_acceleration_reference_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double throttle_cmd_;
  double brake_cmd_;
  double slope_offset_compensation_;
  double current_station_;
  bool is_full_stop_;
  ::google::protobuf::int32 pid_saturation_status_;
  double path_remain_;
  double speed_offset_;
  double current_speed_;
  double acceleration_reference_;
  double current_acceleration_;
  double acceleration_error_;
  double jerk_reference_;
  double current_jerk_;
  double jerk_error_;
  ::google::protobuf::int32 leadlag_saturation_status_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleLateralDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.SimpleLateralDebug) */ {
 public:
  SimpleLateralDebug();
  virtual ~SimpleLateralDebug();

  SimpleLateralDebug(const SimpleLateralDebug& from);

  inline SimpleLateralDebug& operator=(const SimpleLateralDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleLateralDebug(SimpleLateralDebug&& from) noexcept
    : SimpleLateralDebug() {
    *this = ::std::move(from);
  }

  inline SimpleLateralDebug& operator=(SimpleLateralDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleLateralDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleLateralDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleLateralDebug*>(
               &_SimpleLateralDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SimpleLateralDebug* other);
  friend void swap(SimpleLateralDebug& a, SimpleLateralDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleLateralDebug* New() const final {
    return CreateMaybeMessage<SimpleLateralDebug>(nullptr);
  }

  SimpleLateralDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleLateralDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleLateralDebug& from);
  void MergeFrom(const SimpleLateralDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleLateralDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .points.TrajectoryPoint current_target_point = 30;
  bool has_current_target_point() const;
  void clear_current_target_point();
  static const int kCurrentTargetPointFieldNumber = 30;
  const ::points::TrajectoryPoint& current_target_point() const;
  ::points::TrajectoryPoint* release_current_target_point();
  ::points::TrajectoryPoint* mutable_current_target_point();
  void set_allocated_current_target_point(::points::TrajectoryPoint* current_target_point);

  // optional .controller.MracDebug steer_mrac_debug = 32;
  bool has_steer_mrac_debug() const;
  void clear_steer_mrac_debug();
  static const int kSteerMracDebugFieldNumber = 32;
  const ::controller::MracDebug& steer_mrac_debug() const;
  ::controller::MracDebug* release_steer_mrac_debug();
  ::controller::MracDebug* mutable_steer_mrac_debug();
  void set_allocated_steer_mrac_debug(::controller::MracDebug* steer_mrac_debug);

  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  void clear_lateral_error();
  static const int kLateralErrorFieldNumber = 1;
  double lateral_error() const;
  void set_lateral_error(double value);

  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  void clear_ref_heading();
  static const int kRefHeadingFieldNumber = 2;
  double ref_heading() const;
  void set_ref_heading(double value);

  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // optional double heading_error = 4;
  bool has_heading_error() const;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 4;
  double heading_error() const;
  void set_heading_error(double value);

  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  void clear_heading_error_rate();
  static const int kHeadingErrorRateFieldNumber = 5;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  void clear_lateral_error_rate();
  static const int kLateralErrorRateFieldNumber = 6;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  // optional double curvature = 7;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 7;
  double curvature() const;
  void set_curvature(double value);

  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 8;
  double steer_angle() const;
  void set_steer_angle(double value);

  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  void clear_steer_angle_feedforward();
  static const int kSteerAngleFeedforwardFieldNumber = 9;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  void clear_steer_angle_lateral_contribution();
  static const int kSteerAngleLateralContributionFieldNumber = 10;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  void clear_steer_angle_lateral_rate_contribution();
  static const int kSteerAngleLateralRateContributionFieldNumber = 11;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  void clear_steer_angle_heading_contribution();
  static const int kSteerAngleHeadingContributionFieldNumber = 12;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  void clear_steer_angle_heading_rate_contribution();
  static const int kSteerAngleHeadingRateContributionFieldNumber = 13;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  void clear_steer_angle_feedback();
  static const int kSteerAngleFeedbackFieldNumber = 14;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  // optional double steering_position = 15;
  bool has_steering_position() const;
  void clear_steering_position();
  static const int kSteeringPositionFieldNumber = 15;
  double steering_position() const;
  void set_steering_position(double value);

  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  void clear_ref_speed();
  static const int kRefSpeedFieldNumber = 16;
  double ref_speed() const;
  void set_ref_speed(double value);

  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  void clear_steer_angle_limited();
  static const int kSteerAngleLimitedFieldNumber = 17;
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);

  // optional double lateral_acceleration = 18;
  bool has_lateral_acceleration() const;
  void clear_lateral_acceleration();
  static const int kLateralAccelerationFieldNumber = 18;
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);

  // optional double lateral_jerk = 19;
  bool has_lateral_jerk() const;
  void clear_lateral_jerk();
  static const int kLateralJerkFieldNumber = 19;
  double lateral_jerk() const;
  void set_lateral_jerk(double value);

  // optional double ref_heading_rate = 20;
  bool has_ref_heading_rate() const;
  void clear_ref_heading_rate();
  static const int kRefHeadingRateFieldNumber = 20;
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);

  // optional double heading_rate = 21;
  bool has_heading_rate() const;
  void clear_heading_rate();
  static const int kHeadingRateFieldNumber = 21;
  double heading_rate() const;
  void set_heading_rate(double value);

  // optional double ref_heading_acceleration = 22;
  bool has_ref_heading_acceleration() const;
  void clear_ref_heading_acceleration();
  static const int kRefHeadingAccelerationFieldNumber = 22;
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);

  // optional double heading_acceleration = 23;
  bool has_heading_acceleration() const;
  void clear_heading_acceleration();
  static const int kHeadingAccelerationFieldNumber = 23;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  // optional double heading_error_acceleration = 24;
  bool has_heading_error_acceleration() const;
  void clear_heading_error_acceleration();
  static const int kHeadingErrorAccelerationFieldNumber = 24;
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);

  // optional double ref_heading_jerk = 25;
  bool has_ref_heading_jerk() const;
  void clear_ref_heading_jerk();
  static const int kRefHeadingJerkFieldNumber = 25;
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);

  // optional double heading_jerk = 26;
  bool has_heading_jerk() const;
  void clear_heading_jerk();
  static const int kHeadingJerkFieldNumber = 26;
  double heading_jerk() const;
  void set_heading_jerk(double value);

  // optional double heading_error_jerk = 27;
  bool has_heading_error_jerk() const;
  void clear_heading_error_jerk();
  static const int kHeadingErrorJerkFieldNumber = 27;
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);

  // optional double lateral_error_feedback = 28;
  bool has_lateral_error_feedback() const;
  void clear_lateral_error_feedback();
  static const int kLateralErrorFeedbackFieldNumber = 28;
  double lateral_error_feedback() const;
  void set_lateral_error_feedback(double value);

  // optional double heading_error_feedback = 29;
  bool has_heading_error_feedback() const;
  void clear_heading_error_feedback();
  static const int kHeadingErrorFeedbackFieldNumber = 29;
  double heading_error_feedback() const;
  void set_heading_error_feedback(double value);

  // optional double steer_angle_feedback_augment = 31;
  bool has_steer_angle_feedback_augment() const;
  void clear_steer_angle_feedback_augment();
  static const int kSteerAngleFeedbackAugmentFieldNumber = 31;
  double steer_angle_feedback_augment() const;
  void set_steer_angle_feedback_augment(double value);

  // optional bool steer_mrac_enable_status = 33;
  bool has_steer_mrac_enable_status() const;
  void clear_steer_mrac_enable_status();
  static const int kSteerMracEnableStatusFieldNumber = 33;
  bool steer_mrac_enable_status() const;
  void set_steer_mrac_enable_status(bool value);

  // @@protoc_insertion_point(class_scope:controller.SimpleLateralDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::points::TrajectoryPoint* current_target_point_;
  ::controller::MracDebug* steer_mrac_debug_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  double steer_angle_limited_;
  double lateral_acceleration_;
  double lateral_jerk_;
  double ref_heading_rate_;
  double heading_rate_;
  double ref_heading_acceleration_;
  double heading_acceleration_;
  double heading_error_acceleration_;
  double ref_heading_jerk_;
  double heading_jerk_;
  double heading_error_jerk_;
  double lateral_error_feedback_;
  double heading_error_feedback_;
  double steer_angle_feedback_augment_;
  bool steer_mrac_enable_status_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimpleMPCDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.SimpleMPCDebug) */ {
 public:
  SimpleMPCDebug();
  virtual ~SimpleMPCDebug();

  SimpleMPCDebug(const SimpleMPCDebug& from);

  inline SimpleMPCDebug& operator=(const SimpleMPCDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleMPCDebug(SimpleMPCDebug&& from) noexcept
    : SimpleMPCDebug() {
    *this = ::std::move(from);
  }

  inline SimpleMPCDebug& operator=(SimpleMPCDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleMPCDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleMPCDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleMPCDebug*>(
               &_SimpleMPCDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SimpleMPCDebug* other);
  friend void swap(SimpleMPCDebug& a, SimpleMPCDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleMPCDebug* New() const final {
    return CreateMaybeMessage<SimpleMPCDebug>(nullptr);
  }

  SimpleMPCDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleMPCDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleMPCDebug& from);
  void MergeFrom(const SimpleMPCDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMPCDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double matrix_q_updated = 33;
  int matrix_q_updated_size() const;
  void clear_matrix_q_updated();
  static const int kMatrixQUpdatedFieldNumber = 33;
  double matrix_q_updated(int index) const;
  void set_matrix_q_updated(int index, double value);
  void add_matrix_q_updated(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_q_updated() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_q_updated();

  // repeated double matrix_r_updated = 34;
  int matrix_r_updated_size() const;
  void clear_matrix_r_updated();
  static const int kMatrixRUpdatedFieldNumber = 34;
  double matrix_r_updated(int index) const;
  void set_matrix_r_updated(int index, double value);
  void add_matrix_r_updated(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_r_updated() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_r_updated();

  // optional double lateral_error = 1;
  bool has_lateral_error() const;
  void clear_lateral_error();
  static const int kLateralErrorFieldNumber = 1;
  double lateral_error() const;
  void set_lateral_error(double value);

  // optional double ref_heading = 2;
  bool has_ref_heading() const;
  void clear_ref_heading();
  static const int kRefHeadingFieldNumber = 2;
  double ref_heading() const;
  void set_ref_heading(double value);

  // optional double heading = 3;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // optional double heading_error = 4;
  bool has_heading_error() const;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 4;
  double heading_error() const;
  void set_heading_error(double value);

  // optional double heading_error_rate = 5;
  bool has_heading_error_rate() const;
  void clear_heading_error_rate();
  static const int kHeadingErrorRateFieldNumber = 5;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  // optional double lateral_error_rate = 6;
  bool has_lateral_error_rate() const;
  void clear_lateral_error_rate();
  static const int kLateralErrorRateFieldNumber = 6;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  // optional double curvature = 7;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 7;
  double curvature() const;
  void set_curvature(double value);

  // optional double steer_angle = 8;
  bool has_steer_angle() const;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 8;
  double steer_angle() const;
  void set_steer_angle(double value);

  // optional double steer_angle_feedforward = 9;
  bool has_steer_angle_feedforward() const;
  void clear_steer_angle_feedforward();
  static const int kSteerAngleFeedforwardFieldNumber = 9;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  // optional double steer_angle_lateral_contribution = 10;
  bool has_steer_angle_lateral_contribution() const;
  void clear_steer_angle_lateral_contribution();
  static const int kSteerAngleLateralContributionFieldNumber = 10;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  // optional double steer_angle_lateral_rate_contribution = 11;
  bool has_steer_angle_lateral_rate_contribution() const;
  void clear_steer_angle_lateral_rate_contribution();
  static const int kSteerAngleLateralRateContributionFieldNumber = 11;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  // optional double steer_angle_heading_contribution = 12;
  bool has_steer_angle_heading_contribution() const;
  void clear_steer_angle_heading_contribution();
  static const int kSteerAngleHeadingContributionFieldNumber = 12;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  // optional double steer_angle_heading_rate_contribution = 13;
  bool has_steer_angle_heading_rate_contribution() const;
  void clear_steer_angle_heading_rate_contribution();
  static const int kSteerAngleHeadingRateContributionFieldNumber = 13;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  // optional double steer_angle_feedback = 14;
  bool has_steer_angle_feedback() const;
  void clear_steer_angle_feedback();
  static const int kSteerAngleFeedbackFieldNumber = 14;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  // optional double steering_position = 15;
  bool has_steering_position() const;
  void clear_steering_position();
  static const int kSteeringPositionFieldNumber = 15;
  double steering_position() const;
  void set_steering_position(double value);

  // optional double ref_speed = 16;
  bool has_ref_speed() const;
  void clear_ref_speed();
  static const int kRefSpeedFieldNumber = 16;
  double ref_speed() const;
  void set_ref_speed(double value);

  // optional double steer_angle_limited = 17;
  bool has_steer_angle_limited() const;
  void clear_steer_angle_limited();
  static const int kSteerAngleLimitedFieldNumber = 17;
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);

  // optional double station_reference = 18;
  bool has_station_reference() const;
  void clear_station_reference();
  static const int kStationReferenceFieldNumber = 18;
  double station_reference() const;
  void set_station_reference(double value);

  // optional double station_error = 19;
  bool has_station_error() const;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 19;
  double station_error() const;
  void set_station_error(double value);

  // optional double speed_reference = 20;
  bool has_speed_reference() const;
  void clear_speed_reference();
  static const int kSpeedReferenceFieldNumber = 20;
  double speed_reference() const;
  void set_speed_reference(double value);

  // optional double speed_error = 21;
  bool has_speed_error() const;
  void clear_speed_error();
  static const int kSpeedErrorFieldNumber = 21;
  double speed_error() const;
  void set_speed_error(double value);

  // optional double acceleration_reference = 22;
  bool has_acceleration_reference() const;
  void clear_acceleration_reference();
  static const int kAccelerationReferenceFieldNumber = 22;
  double acceleration_reference() const;
  void set_acceleration_reference(double value);

  // optional double station_feedback = 24;
  bool has_station_feedback() const;
  void clear_station_feedback();
  static const int kStationFeedbackFieldNumber = 24;
  double station_feedback() const;
  void set_station_feedback(double value);

  // optional double speed_feedback = 25;
  bool has_speed_feedback() const;
  void clear_speed_feedback();
  static const int kSpeedFeedbackFieldNumber = 25;
  double speed_feedback() const;
  void set_speed_feedback(double value);

  // optional double acceleration_cmd_closeloop = 26;
  bool has_acceleration_cmd_closeloop() const;
  void clear_acceleration_cmd_closeloop();
  static const int kAccelerationCmdCloseloopFieldNumber = 26;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  // optional double acceleration_cmd = 27;
  bool has_acceleration_cmd() const;
  void clear_acceleration_cmd();
  static const int kAccelerationCmdFieldNumber = 27;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  // optional double acceleration_lookup = 28;
  bool has_acceleration_lookup() const;
  void clear_acceleration_lookup();
  static const int kAccelerationLookupFieldNumber = 28;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  // optional double speed_lookup = 29;
  bool has_speed_lookup() const;
  void clear_speed_lookup();
  static const int kSpeedLookupFieldNumber = 29;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  // optional double calibration_value = 30;
  bool has_calibration_value() const;
  void clear_calibration_value();
  static const int kCalibrationValueFieldNumber = 30;
  double calibration_value() const;
  void set_calibration_value(double value);

  // optional double steer_unconstrained_control_diff = 31;
  bool has_steer_unconstrained_control_diff() const;
  void clear_steer_unconstrained_control_diff();
  static const int kSteerUnconstrainedControlDiffFieldNumber = 31;
  double steer_unconstrained_control_diff() const;
  void set_steer_unconstrained_control_diff(double value);

  // optional double steer_angle_feedforward_compensation = 32;
  bool has_steer_angle_feedforward_compensation() const;
  void clear_steer_angle_feedforward_compensation();
  static const int kSteerAngleFeedforwardCompensationFieldNumber = 32;
  double steer_angle_feedforward_compensation() const;
  void set_steer_angle_feedforward_compensation(double value);

  // optional double lateral_acceleration = 35;
  bool has_lateral_acceleration() const;
  void clear_lateral_acceleration();
  static const int kLateralAccelerationFieldNumber = 35;
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);

  // optional double lateral_jerk = 36;
  bool has_lateral_jerk() const;
  void clear_lateral_jerk();
  static const int kLateralJerkFieldNumber = 36;
  double lateral_jerk() const;
  void set_lateral_jerk(double value);

  // optional double ref_heading_rate = 37;
  bool has_ref_heading_rate() const;
  void clear_ref_heading_rate();
  static const int kRefHeadingRateFieldNumber = 37;
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);

  // optional double heading_rate = 38;
  bool has_heading_rate() const;
  void clear_heading_rate();
  static const int kHeadingRateFieldNumber = 38;
  double heading_rate() const;
  void set_heading_rate(double value);

  // optional double ref_heading_acceleration = 39;
  bool has_ref_heading_acceleration() const;
  void clear_ref_heading_acceleration();
  static const int kRefHeadingAccelerationFieldNumber = 39;
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);

  // optional double heading_acceleration = 40;
  bool has_heading_acceleration() const;
  void clear_heading_acceleration();
  static const int kHeadingAccelerationFieldNumber = 40;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  // optional double heading_error_acceleration = 41;
  bool has_heading_error_acceleration() const;
  void clear_heading_error_acceleration();
  static const int kHeadingErrorAccelerationFieldNumber = 41;
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);

  // optional double ref_heading_jerk = 42;
  bool has_ref_heading_jerk() const;
  void clear_ref_heading_jerk();
  static const int kRefHeadingJerkFieldNumber = 42;
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);

  // optional double heading_jerk = 43;
  bool has_heading_jerk() const;
  void clear_heading_jerk();
  static const int kHeadingJerkFieldNumber = 43;
  double heading_jerk() const;
  void set_heading_jerk(double value);

  // optional double heading_error_jerk = 44;
  bool has_heading_error_jerk() const;
  void clear_heading_error_jerk();
  static const int kHeadingErrorJerkFieldNumber = 44;
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);

  // optional double acceleration_feedback = 45;
  bool has_acceleration_feedback() const;
  void clear_acceleration_feedback();
  static const int kAccelerationFeedbackFieldNumber = 45;
  double acceleration_feedback() const;
  void set_acceleration_feedback(double value);

  // optional double acceleration_error = 46;
  bool has_acceleration_error() const;
  void clear_acceleration_error();
  static const int kAccelerationErrorFieldNumber = 46;
  double acceleration_error() const;
  void set_acceleration_error(double value);

  // optional double jerk_reference = 47;
  bool has_jerk_reference() const;
  void clear_jerk_reference();
  static const int kJerkReferenceFieldNumber = 47;
  double jerk_reference() const;
  void set_jerk_reference(double value);

  // optional double jerk_feedback = 48;
  bool has_jerk_feedback() const;
  void clear_jerk_feedback();
  static const int kJerkFeedbackFieldNumber = 48;
  double jerk_feedback() const;
  void set_jerk_feedback(double value);

  // optional double jerk_error = 49;
  bool has_jerk_error() const;
  void clear_jerk_error();
  static const int kJerkErrorFieldNumber = 49;
  double jerk_error() const;
  void set_jerk_error(double value);

  // optional bool is_full_stop = 23;
  bool has_is_full_stop() const;
  void clear_is_full_stop();
  static const int kIsFullStopFieldNumber = 23;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  // @@protoc_insertion_point(class_scope:controller.SimpleMPCDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > matrix_q_updated_;
  ::google::protobuf::RepeatedField< double > matrix_r_updated_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  double steer_angle_limited_;
  double station_reference_;
  double station_error_;
  double speed_reference_;
  double speed_error_;
  double acceleration_reference_;
  double station_feedback_;
  double speed_feedback_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double steer_unconstrained_control_diff_;
  double steer_angle_feedforward_compensation_;
  double lateral_acceleration_;
  double lateral_jerk_;
  double ref_heading_rate_;
  double heading_rate_;
  double ref_heading_acceleration_;
  double heading_acceleration_;
  double heading_error_acceleration_;
  double ref_heading_jerk_;
  double heading_jerk_;
  double heading_error_jerk_;
  double acceleration_feedback_;
  double acceleration_error_;
  double jerk_reference_;
  double jerk_feedback_;
  double jerk_error_;
  bool is_full_stop_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class SimplePIDLatLonDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.SimplePIDLatLonDebug) */ {
 public:
  SimplePIDLatLonDebug();
  virtual ~SimplePIDLatLonDebug();

  SimplePIDLatLonDebug(const SimplePIDLatLonDebug& from);

  inline SimplePIDLatLonDebug& operator=(const SimplePIDLatLonDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimplePIDLatLonDebug(SimplePIDLatLonDebug&& from) noexcept
    : SimplePIDLatLonDebug() {
    *this = ::std::move(from);
  }

  inline SimplePIDLatLonDebug& operator=(SimplePIDLatLonDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimplePIDLatLonDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimplePIDLatLonDebug* internal_default_instance() {
    return reinterpret_cast<const SimplePIDLatLonDebug*>(
               &_SimplePIDLatLonDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SimplePIDLatLonDebug* other);
  friend void swap(SimplePIDLatLonDebug& a, SimplePIDLatLonDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimplePIDLatLonDebug* New() const final {
    return CreateMaybeMessage<SimplePIDLatLonDebug>(nullptr);
  }

  SimplePIDLatLonDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimplePIDLatLonDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimplePIDLatLonDebug& from);
  void MergeFrom(const SimplePIDLatLonDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplePIDLatLonDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .points.TrajectoryPoint target_point = 9;
  bool has_target_point() const;
  void clear_target_point();
  static const int kTargetPointFieldNumber = 9;
  const ::points::TrajectoryPoint& target_point() const;
  ::points::TrajectoryPoint* release_target_point();
  ::points::TrajectoryPoint* mutable_target_point();
  void set_allocated_target_point(::points::TrajectoryPoint* target_point);

  // optional double look_ahead_station = 1;
  bool has_look_ahead_station() const;
  void clear_look_ahead_station();
  static const int kLookAheadStationFieldNumber = 1;
  double look_ahead_station() const;
  void set_look_ahead_station(double value);

  // optional double station_error = 2;
  bool has_station_error() const;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 2;
  double station_error() const;
  void set_station_error(double value);

  // optional double current_speed = 3;
  bool has_current_speed() const;
  void clear_current_speed();
  static const int kCurrentSpeedFieldNumber = 3;
  double current_speed() const;
  void set_current_speed(double value);

  // optional double current_heading = 4;
  bool has_current_heading() const;
  void clear_current_heading();
  static const int kCurrentHeadingFieldNumber = 4;
  double current_heading() const;
  void set_current_heading(double value);

  // optional double heading_error = 5;
  bool has_heading_error() const;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 5;
  double heading_error() const;
  void set_heading_error(double value);

  // optional double current_steer_wheel_angle = 6;
  bool has_current_steer_wheel_angle() const;
  void clear_current_steer_wheel_angle();
  static const int kCurrentSteerWheelAngleFieldNumber = 6;
  double current_steer_wheel_angle() const;
  void set_current_steer_wheel_angle(double value);

  // optional double speed_cmd = 7;
  bool has_speed_cmd() const;
  void clear_speed_cmd();
  static const int kSpeedCmdFieldNumber = 7;
  double speed_cmd() const;
  void set_speed_cmd(double value);

  // optional double steer_angle_cmd = 8;
  bool has_steer_angle_cmd() const;
  void clear_steer_angle_cmd();
  static const int kSteerAngleCmdFieldNumber = 8;
  double steer_angle_cmd() const;
  void set_steer_angle_cmd(double value);

  // @@protoc_insertion_point(class_scope:controller.SimplePIDLatLonDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::points::TrajectoryPoint* target_point_;
  double look_ahead_station_;
  double station_error_;
  double current_speed_;
  double current_heading_;
  double heading_error_;
  double current_steer_wheel_angle_;
  double speed_cmd_;
  double steer_angle_cmd_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class StanleyDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.StanleyDebug) */ {
 public:
  StanleyDebug();
  virtual ~StanleyDebug();

  StanleyDebug(const StanleyDebug& from);

  inline StanleyDebug& operator=(const StanleyDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StanleyDebug(StanleyDebug&& from) noexcept
    : StanleyDebug() {
    *this = ::std::move(from);
  }

  inline StanleyDebug& operator=(StanleyDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StanleyDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StanleyDebug* internal_default_instance() {
    return reinterpret_cast<const StanleyDebug*>(
               &_StanleyDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StanleyDebug* other);
  friend void swap(StanleyDebug& a, StanleyDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StanleyDebug* New() const final {
    return CreateMaybeMessage<StanleyDebug>(nullptr);
  }

  StanleyDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StanleyDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StanleyDebug& from);
  void MergeFrom(const StanleyDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StanleyDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .points.TrajectoryPoint target_point = 9;
  bool has_target_point() const;
  void clear_target_point();
  static const int kTargetPointFieldNumber = 9;
  const ::points::TrajectoryPoint& target_point() const;
  ::points::TrajectoryPoint* release_target_point();
  ::points::TrajectoryPoint* mutable_target_point();
  void set_allocated_target_point(::points::TrajectoryPoint* target_point);

  // optional .points.PathPoint matched_point = 10;
  bool has_matched_point() const;
  void clear_matched_point();
  static const int kMatchedPointFieldNumber = 10;
  const ::points::PathPoint& matched_point() const;
  ::points::PathPoint* release_matched_point();
  ::points::PathPoint* mutable_matched_point();
  void set_allocated_matched_point(::points::PathPoint* matched_point);

  // optional double station_error = 1;
  bool has_station_error() const;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 1;
  double station_error() const;
  void set_station_error(double value);

  // optional double lateral_error = 2;
  bool has_lateral_error() const;
  void clear_lateral_error();
  static const int kLateralErrorFieldNumber = 2;
  double lateral_error() const;
  void set_lateral_error(double value);

  // optional double current_speed = 3;
  bool has_current_speed() const;
  void clear_current_speed();
  static const int kCurrentSpeedFieldNumber = 3;
  double current_speed() const;
  void set_current_speed(double value);

  // optional double current_heading = 4;
  bool has_current_heading() const;
  void clear_current_heading();
  static const int kCurrentHeadingFieldNumber = 4;
  double current_heading() const;
  void set_current_heading(double value);

  // optional double heading_error = 5;
  bool has_heading_error() const;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 5;
  double heading_error() const;
  void set_heading_error(double value);

  // optional double current_steer_wheel_angle = 6;
  bool has_current_steer_wheel_angle() const;
  void clear_current_steer_wheel_angle();
  static const int kCurrentSteerWheelAngleFieldNumber = 6;
  double current_steer_wheel_angle() const;
  void set_current_steer_wheel_angle(double value);

  // optional double speed_cmd = 7;
  bool has_speed_cmd() const;
  void clear_speed_cmd();
  static const int kSpeedCmdFieldNumber = 7;
  double speed_cmd() const;
  void set_speed_cmd(double value);

  // optional double steer_angle_cmd = 8;
  bool has_steer_angle_cmd() const;
  void clear_steer_angle_cmd();
  static const int kSteerAngleCmdFieldNumber = 8;
  double steer_angle_cmd() const;
  void set_steer_angle_cmd(double value);

  // @@protoc_insertion_point(class_scope:controller.StanleyDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::points::TrajectoryPoint* target_point_;
  ::points::PathPoint* matched_point_;
  double station_error_;
  double lateral_error_;
  double current_speed_;
  double current_heading_;
  double heading_error_;
  double current_steer_wheel_angle_;
  double speed_cmd_;
  double steer_angle_cmd_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class MracDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.MracDebug) */ {
 public:
  MracDebug();
  virtual ~MracDebug();

  MracDebug(const MracDebug& from);

  inline MracDebug& operator=(const MracDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MracDebug(MracDebug&& from) noexcept
    : MracDebug() {
    *this = ::std::move(from);
  }

  inline MracDebug& operator=(MracDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MracDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MracDebug* internal_default_instance() {
    return reinterpret_cast<const MracDebug*>(
               &_MracDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MracDebug* other);
  friend void swap(MracDebug& a, MracDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MracDebug* New() const final {
    return CreateMaybeMessage<MracDebug>(nullptr);
  }

  MracDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MracDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MracDebug& from);
  void MergeFrom(const MracDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MracDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double mrac_reference_state = 2;
  int mrac_reference_state_size() const;
  void clear_mrac_reference_state();
  static const int kMracReferenceStateFieldNumber = 2;
  double mrac_reference_state(int index) const;
  void set_mrac_reference_state(int index, double value);
  void add_mrac_reference_state(double value);
  const ::google::protobuf::RepeatedField< double >&
      mrac_reference_state() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_mrac_reference_state();

  // repeated double mrac_state_error = 3;
  int mrac_state_error_size() const;
  void clear_mrac_state_error();
  static const int kMracStateErrorFieldNumber = 3;
  double mrac_state_error(int index) const;
  void set_mrac_state_error(int index, double value);
  void add_mrac_state_error(double value);
  const ::google::protobuf::RepeatedField< double >&
      mrac_state_error() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_mrac_state_error();

  // optional .controller.MracAdaptiveGain mrac_adaptive_gain = 4;
  bool has_mrac_adaptive_gain() const;
  void clear_mrac_adaptive_gain();
  static const int kMracAdaptiveGainFieldNumber = 4;
  const ::controller::MracAdaptiveGain& mrac_adaptive_gain() const;
  ::controller::MracAdaptiveGain* release_mrac_adaptive_gain();
  ::controller::MracAdaptiveGain* mutable_mrac_adaptive_gain();
  void set_allocated_mrac_adaptive_gain(::controller::MracAdaptiveGain* mrac_adaptive_gain);

  // optional int32 mrac_model_order = 1;
  bool has_mrac_model_order() const;
  void clear_mrac_model_order();
  static const int kMracModelOrderFieldNumber = 1;
  ::google::protobuf::int32 mrac_model_order() const;
  void set_mrac_model_order(::google::protobuf::int32 value);

  // optional int32 mrac_reference_saturation_status = 5;
  bool has_mrac_reference_saturation_status() const;
  void clear_mrac_reference_saturation_status();
  static const int kMracReferenceSaturationStatusFieldNumber = 5;
  ::google::protobuf::int32 mrac_reference_saturation_status() const;
  void set_mrac_reference_saturation_status(::google::protobuf::int32 value);

  // optional int32 mrac_control_saturation_status = 6;
  bool has_mrac_control_saturation_status() const;
  void clear_mrac_control_saturation_status();
  static const int kMracControlSaturationStatusFieldNumber = 6;
  ::google::protobuf::int32 mrac_control_saturation_status() const;
  void set_mrac_control_saturation_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:controller.MracDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > mrac_reference_state_;
  ::google::protobuf::RepeatedField< double > mrac_state_error_;
  ::controller::MracAdaptiveGain* mrac_adaptive_gain_;
  ::google::protobuf::int32 mrac_model_order_;
  ::google::protobuf::int32 mrac_reference_saturation_status_;
  ::google::protobuf::int32 mrac_control_saturation_status_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class MracAdaptiveGain :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.MracAdaptiveGain) */ {
 public:
  MracAdaptiveGain();
  virtual ~MracAdaptiveGain();

  MracAdaptiveGain(const MracAdaptiveGain& from);

  inline MracAdaptiveGain& operator=(const MracAdaptiveGain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MracAdaptiveGain(MracAdaptiveGain&& from) noexcept
    : MracAdaptiveGain() {
    *this = ::std::move(from);
  }

  inline MracAdaptiveGain& operator=(MracAdaptiveGain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MracAdaptiveGain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MracAdaptiveGain* internal_default_instance() {
    return reinterpret_cast<const MracAdaptiveGain*>(
               &_MracAdaptiveGain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MracAdaptiveGain* other);
  friend void swap(MracAdaptiveGain& a, MracAdaptiveGain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MracAdaptiveGain* New() const final {
    return CreateMaybeMessage<MracAdaptiveGain>(nullptr);
  }

  MracAdaptiveGain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MracAdaptiveGain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MracAdaptiveGain& from);
  void MergeFrom(const MracAdaptiveGain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MracAdaptiveGain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double state_adaptive_gain = 1;
  int state_adaptive_gain_size() const;
  void clear_state_adaptive_gain();
  static const int kStateAdaptiveGainFieldNumber = 1;
  double state_adaptive_gain(int index) const;
  void set_state_adaptive_gain(int index, double value);
  void add_state_adaptive_gain(double value);
  const ::google::protobuf::RepeatedField< double >&
      state_adaptive_gain() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_state_adaptive_gain();

  // repeated double input_adaptive_gain = 2;
  int input_adaptive_gain_size() const;
  void clear_input_adaptive_gain();
  static const int kInputAdaptiveGainFieldNumber = 2;
  double input_adaptive_gain(int index) const;
  void set_input_adaptive_gain(int index, double value);
  void add_input_adaptive_gain(double value);
  const ::google::protobuf::RepeatedField< double >&
      input_adaptive_gain() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_input_adaptive_gain();

  // repeated double nonlinear_adaptive_gain = 3;
  int nonlinear_adaptive_gain_size() const;
  void clear_nonlinear_adaptive_gain();
  static const int kNonlinearAdaptiveGainFieldNumber = 3;
  double nonlinear_adaptive_gain(int index) const;
  void set_nonlinear_adaptive_gain(int index, double value);
  void add_nonlinear_adaptive_gain(double value);
  const ::google::protobuf::RepeatedField< double >&
      nonlinear_adaptive_gain() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_nonlinear_adaptive_gain();

  // @@protoc_insertion_point(class_scope:controller.MracAdaptiveGain)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > state_adaptive_gain_;
  ::google::protobuf::RepeatedField< double > input_adaptive_gain_;
  ::google::protobuf::RepeatedField< double > nonlinear_adaptive_gain_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class InputDebug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.InputDebug) */ {
 public:
  InputDebug();
  virtual ~InputDebug();

  InputDebug(const InputDebug& from);

  inline InputDebug& operator=(const InputDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputDebug(InputDebug&& from) noexcept
    : InputDebug() {
    *this = ::std::move(from);
  }

  inline InputDebug& operator=(InputDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InputDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputDebug* internal_default_instance() {
    return reinterpret_cast<const InputDebug*>(
               &_InputDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(InputDebug* other);
  friend void swap(InputDebug& a, InputDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputDebug* New() const final {
    return CreateMaybeMessage<InputDebug>(nullptr);
  }

  InputDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputDebug& from);
  void MergeFrom(const InputDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .controller.Header localization_header = 1;
  bool has_localization_header() const;
  void clear_localization_header();
  static const int kLocalizationHeaderFieldNumber = 1;
  const ::controller::Header& localization_header() const;
  ::controller::Header* release_localization_header();
  ::controller::Header* mutable_localization_header();
  void set_allocated_localization_header(::controller::Header* localization_header);

  // optional .controller.Header canbus_header = 2;
  bool has_canbus_header() const;
  void clear_canbus_header();
  static const int kCanbusHeaderFieldNumber = 2;
  const ::controller::Header& canbus_header() const;
  ::controller::Header* release_canbus_header();
  ::controller::Header* mutable_canbus_header();
  void set_allocated_canbus_header(::controller::Header* canbus_header);

  // optional .controller.Header trajectory_header = 3;
  bool has_trajectory_header() const;
  void clear_trajectory_header();
  static const int kTrajectoryHeaderFieldNumber = 3;
  const ::controller::Header& trajectory_header() const;
  ::controller::Header* release_trajectory_header();
  ::controller::Header* mutable_trajectory_header();
  void set_allocated_trajectory_header(::controller::Header* trajectory_header);

  // optional .controller.Header latest_replan_trajectory_header = 4;
  bool has_latest_replan_trajectory_header() const;
  void clear_latest_replan_trajectory_header();
  static const int kLatestReplanTrajectoryHeaderFieldNumber = 4;
  const ::controller::Header& latest_replan_trajectory_header() const;
  ::controller::Header* release_latest_replan_trajectory_header();
  ::controller::Header* mutable_latest_replan_trajectory_header();
  void set_allocated_latest_replan_trajectory_header(::controller::Header* latest_replan_trajectory_header);

  // @@protoc_insertion_point(class_scope:controller.InputDebug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::Header* localization_header_;
  ::controller::Header* canbus_header_;
  ::controller::Header* trajectory_header_;
  ::controller::Header* latest_replan_trajectory_header_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class Debug :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(Debug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Debug* other);
  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Debug* New() const final {
    return CreateMaybeMessage<Debug>(nullptr);
  }

  Debug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .controller.SimpleLongitudinalDebug simple_lon_debug = 1;
  bool has_simple_lon_debug() const;
  void clear_simple_lon_debug();
  static const int kSimpleLonDebugFieldNumber = 1;
  const ::controller::SimpleLongitudinalDebug& simple_lon_debug() const;
  ::controller::SimpleLongitudinalDebug* release_simple_lon_debug();
  ::controller::SimpleLongitudinalDebug* mutable_simple_lon_debug();
  void set_allocated_simple_lon_debug(::controller::SimpleLongitudinalDebug* simple_lon_debug);

  // optional .controller.SimpleLateralDebug simple_lat_debug = 2;
  bool has_simple_lat_debug() const;
  void clear_simple_lat_debug();
  static const int kSimpleLatDebugFieldNumber = 2;
  const ::controller::SimpleLateralDebug& simple_lat_debug() const;
  ::controller::SimpleLateralDebug* release_simple_lat_debug();
  ::controller::SimpleLateralDebug* mutable_simple_lat_debug();
  void set_allocated_simple_lat_debug(::controller::SimpleLateralDebug* simple_lat_debug);

  // optional .controller.InputDebug input_debug = 3;
  bool has_input_debug() const;
  void clear_input_debug();
  static const int kInputDebugFieldNumber = 3;
  const ::controller::InputDebug& input_debug() const;
  ::controller::InputDebug* release_input_debug();
  ::controller::InputDebug* mutable_input_debug();
  void set_allocated_input_debug(::controller::InputDebug* input_debug);

  // optional .controller.SimpleMPCDebug simple_mpc_debug = 4;
  bool has_simple_mpc_debug() const;
  void clear_simple_mpc_debug();
  static const int kSimpleMpcDebugFieldNumber = 4;
  const ::controller::SimpleMPCDebug& simple_mpc_debug() const;
  ::controller::SimpleMPCDebug* release_simple_mpc_debug();
  ::controller::SimpleMPCDebug* mutable_simple_mpc_debug();
  void set_allocated_simple_mpc_debug(::controller::SimpleMPCDebug* simple_mpc_debug);

  // optional .controller.SimplePIDLatLonDebug simple_pid_lat_lon_debug = 5;
  bool has_simple_pid_lat_lon_debug() const;
  void clear_simple_pid_lat_lon_debug();
  static const int kSimplePidLatLonDebugFieldNumber = 5;
  const ::controller::SimplePIDLatLonDebug& simple_pid_lat_lon_debug() const;
  ::controller::SimplePIDLatLonDebug* release_simple_pid_lat_lon_debug();
  ::controller::SimplePIDLatLonDebug* mutable_simple_pid_lat_lon_debug();
  void set_allocated_simple_pid_lat_lon_debug(::controller::SimplePIDLatLonDebug* simple_pid_lat_lon_debug);

  // optional .controller.StanleyDebug stanley_debug = 6;
  bool has_stanley_debug() const;
  void clear_stanley_debug();
  static const int kStanleyDebugFieldNumber = 6;
  const ::controller::StanleyDebug& stanley_debug() const;
  ::controller::StanleyDebug* release_stanley_debug();
  ::controller::StanleyDebug* mutable_stanley_debug();
  void set_allocated_stanley_debug(::controller::StanleyDebug* stanley_debug);

  // @@protoc_insertion_point(class_scope:controller.Debug)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::SimpleLongitudinalDebug* simple_lon_debug_;
  ::controller::SimpleLateralDebug* simple_lat_debug_;
  ::controller::InputDebug* input_debug_;
  ::controller::SimpleMPCDebug* simple_mpc_debug_;
  ::controller::SimplePIDLatLonDebug* simple_pid_lat_lon_debug_;
  ::controller::StanleyDebug* stanley_debug_;
  friend struct ::TableStruct_control_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:controller.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  _has_bits_[0] |= 0x00000001u;
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:controller.LatencyStats.total_time_ms)
}

// repeated double controller_time_ms = 2;
inline int LatencyStats::controller_time_ms_size() const {
  return controller_time_ms_.size();
}
inline void LatencyStats::clear_controller_time_ms() {
  controller_time_ms_.Clear();
}
inline double LatencyStats::controller_time_ms(int index) const {
  // @@protoc_insertion_point(field_get:controller.LatencyStats.controller_time_ms)
  return controller_time_ms_.Get(index);
}
inline void LatencyStats::set_controller_time_ms(int index, double value) {
  controller_time_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.LatencyStats.controller_time_ms)
}
inline void LatencyStats::add_controller_time_ms(double value) {
  controller_time_ms_.Add(value);
  // @@protoc_insertion_point(field_add:controller.LatencyStats.controller_time_ms)
}
inline const ::google::protobuf::RepeatedField< double >&
LatencyStats::controller_time_ms() const {
  // @@protoc_insertion_point(field_list:controller.LatencyStats.controller_time_ms)
  return controller_time_ms_;
}
inline ::google::protobuf::RepeatedField< double >*
LatencyStats::mutable_controller_time_ms() {
  // @@protoc_insertion_point(field_mutable_list:controller.LatencyStats.controller_time_ms)
  return &controller_time_ms_;
}

// optional bool total_time_exceeded = 3;
inline bool LatencyStats::has_total_time_exceeded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyStats::clear_total_time_exceeded() {
  total_time_exceeded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LatencyStats::total_time_exceeded() const {
  // @@protoc_insertion_point(field_get:controller.LatencyStats.total_time_exceeded)
  return total_time_exceeded_;
}
inline void LatencyStats::set_total_time_exceeded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  total_time_exceeded_ = value;
  // @@protoc_insertion_point(field_set:controller.LatencyStats.total_time_exceeded)
}

// -------------------------------------------------------------------

// ControlCommand

// optional .controller.Header header = 1;
inline bool ControlCommand::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::Header& ControlCommand::header() const {
  const ::controller::Header* p = header_;
  // @@protoc_insertion_point(field_get:controller.ControlCommand.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* ControlCommand::release_header() {
  // @@protoc_insertion_point(field_release:controller.ControlCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::controller::Header* ControlCommand::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlCommand.header)
  return header_;
}
inline void ControlCommand::set_allocated_header(::controller::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlCommand.header)
}

// optional double throttle = 3;
inline bool ControlCommand::has_throttle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControlCommand::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.throttle)
  return throttle_;
}
inline void ControlCommand::set_throttle(double value) {
  _has_bits_[0] |= 0x00000008u;
  throttle_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.throttle)
}

// optional double brake = 4;
inline bool ControlCommand::has_brake() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControlCommand::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.brake)
  return brake_;
}
inline void ControlCommand::set_brake(double value) {
  _has_bits_[0] |= 0x00000010u;
  brake_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.brake)
}

// optional double steering_rate = 6;
inline bool ControlCommand::has_steering_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ControlCommand::clear_steering_rate() {
  steering_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double ControlCommand::steering_rate() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.steering_rate)
  return steering_rate_;
}
inline void ControlCommand::set_steering_rate(double value) {
  _has_bits_[0] |= 0x00000020u;
  steering_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.steering_rate)
}

// optional double steering_target = 7;
inline bool ControlCommand::has_steering_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.steering_target)
  return steering_target_;
}
inline void ControlCommand::set_steering_target(double value) {
  _has_bits_[0] |= 0x00000040u;
  steering_target_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.steering_target)
}

// optional bool parking_brake = 8;
inline bool ControlCommand::has_parking_brake() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ControlCommand::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ControlCommand::parking_brake() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.parking_brake)
  return parking_brake_;
}
inline void ControlCommand::set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00004000u;
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.parking_brake)
}

// optional double speed = 9;
inline bool ControlCommand::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ControlCommand::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ControlCommand::speed() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.speed)
  return speed_;
}
inline void ControlCommand::set_speed(double value) {
  _has_bits_[0] |= 0x00000080u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.speed)
}

// optional double acceleration = 10;
inline bool ControlCommand::has_acceleration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ControlCommand::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ControlCommand::acceleration() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.acceleration)
  return acceleration_;
}
inline void ControlCommand::set_acceleration(double value) {
  _has_bits_[0] |= 0x00000100u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.acceleration)
}

// optional bool reset_model = 16 [deprecated = true];
inline bool ControlCommand::has_reset_model() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ControlCommand::clear_reset_model() {
  reset_model_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ControlCommand::reset_model() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.reset_model)
  return reset_model_;
}
inline void ControlCommand::set_reset_model(bool value) {
  _has_bits_[0] |= 0x00008000u;
  reset_model_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.reset_model)
}

// optional bool engine_on_off = 17;
inline bool ControlCommand::has_engine_on_off() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ControlCommand::clear_engine_on_off() {
  engine_on_off_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ControlCommand::engine_on_off() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.engine_on_off)
  return engine_on_off_;
}
inline void ControlCommand::set_engine_on_off(bool value) {
  _has_bits_[0] |= 0x00010000u;
  engine_on_off_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.engine_on_off)
}

// optional double trajectory_fraction = 18;
inline bool ControlCommand::has_trajectory_fraction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ControlCommand::clear_trajectory_fraction() {
  trajectory_fraction_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double ControlCommand::trajectory_fraction() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.trajectory_fraction)
  return trajectory_fraction_;
}
inline void ControlCommand::set_trajectory_fraction(double value) {
  _has_bits_[0] |= 0x00080000u;
  trajectory_fraction_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.trajectory_fraction)
}

// optional .canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
inline bool ControlCommand::has_driving_mode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ControlCommand::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::canbus::Chassis_DrivingMode ControlCommand::driving_mode() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.driving_mode)
  return static_cast< ::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void ControlCommand::set_driving_mode(::canbus::Chassis_DrivingMode value) {
  assert(::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.driving_mode)
}

// optional .canbus.Chassis.GearPosition gear_location = 20;
inline bool ControlCommand::has_gear_location() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ControlCommand::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::canbus::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.gear_location)
  return static_cast< ::canbus::Chassis_GearPosition >(gear_location_);
}
inline void ControlCommand::set_gear_location(::canbus::Chassis_GearPosition value) {
  assert(::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.gear_location)
}

// optional .controller.Debug debug = 22;
inline bool ControlCommand::has_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlCommand::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::controller::Debug& ControlCommand::debug() const {
  const ::controller::Debug* p = debug_;
  // @@protoc_insertion_point(field_get:controller.ControlCommand.debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Debug*>(
      &::controller::_Debug_default_instance_);
}
inline ::controller::Debug* ControlCommand::release_debug() {
  // @@protoc_insertion_point(field_release:controller.ControlCommand.debug)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::controller::Debug* ControlCommand::mutable_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Debug>(GetArenaNoVirtual());
    debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlCommand.debug)
  return debug_;
}
inline void ControlCommand::set_allocated_debug(::controller::Debug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlCommand.debug)
}

// optional .controller.LatencyStats latency_stats = 24;
inline bool ControlCommand::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlCommand::clear_latency_stats() {
  if (latency_stats_ != nullptr) latency_stats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::controller::LatencyStats& ControlCommand::latency_stats() const {
  const ::controller::LatencyStats* p = latency_stats_;
  // @@protoc_insertion_point(field_get:controller.ControlCommand.latency_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::LatencyStats*>(
      &::controller::_LatencyStats_default_instance_);
}
inline ::controller::LatencyStats* ControlCommand::release_latency_stats() {
  // @@protoc_insertion_point(field_release:controller.ControlCommand.latency_stats)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::LatencyStats* temp = latency_stats_;
  latency_stats_ = nullptr;
  return temp;
}
inline ::controller::LatencyStats* ControlCommand::mutable_latency_stats() {
  _has_bits_[0] |= 0x00000004u;
  if (latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::LatencyStats>(GetArenaNoVirtual());
    latency_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlCommand.latency_stats)
  return latency_stats_;
}
inline void ControlCommand::set_allocated_latency_stats(::controller::LatencyStats* latency_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latency_stats_;
  }
  if (latency_stats) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latency_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlCommand.latency_stats)
}

// optional bool is_in_safe_mode = 27 [default = false];
inline bool ControlCommand::has_is_in_safe_mode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ControlCommand::clear_is_in_safe_mode() {
  is_in_safe_mode_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ControlCommand::is_in_safe_mode() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.is_in_safe_mode)
  return is_in_safe_mode_;
}
inline void ControlCommand::set_is_in_safe_mode(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_in_safe_mode_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.is_in_safe_mode)
}

// optional bool left_turn = 13 [deprecated = true];
inline bool ControlCommand::has_left_turn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ControlCommand::clear_left_turn() {
  left_turn_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ControlCommand::left_turn() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.left_turn)
  return left_turn_;
}
inline void ControlCommand::set_left_turn(bool value) {
  _has_bits_[0] |= 0x00000200u;
  left_turn_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.left_turn)
}

// optional bool right_turn = 14 [deprecated = true];
inline bool ControlCommand::has_right_turn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ControlCommand::clear_right_turn() {
  right_turn_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ControlCommand::right_turn() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.right_turn)
  return right_turn_;
}
inline void ControlCommand::set_right_turn(bool value) {
  _has_bits_[0] |= 0x00000400u;
  right_turn_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.right_turn)
}

// optional bool high_beam = 11 [deprecated = true];
inline bool ControlCommand::has_high_beam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ControlCommand::clear_high_beam() {
  high_beam_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ControlCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.high_beam)
  return high_beam_;
}
inline void ControlCommand::set_high_beam(bool value) {
  _has_bits_[0] |= 0x00000800u;
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.high_beam)
}

// optional bool low_beam = 12 [deprecated = true];
inline bool ControlCommand::has_low_beam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ControlCommand::clear_low_beam() {
  low_beam_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ControlCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.low_beam)
  return low_beam_;
}
inline void ControlCommand::set_low_beam(bool value) {
  _has_bits_[0] |= 0x00001000u;
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.low_beam)
}

// optional bool horn = 15 [deprecated = true];
inline bool ControlCommand::has_horn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ControlCommand::clear_horn() {
  horn_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ControlCommand::horn() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.horn)
  return horn_;
}
inline void ControlCommand::set_horn(bool value) {
  _has_bits_[0] |= 0x00002000u;
  horn_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.horn)
}

// optional .controller.TurnSignal turnsignal = 21 [deprecated = true];
inline bool ControlCommand::has_turnsignal() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ControlCommand::clear_turnsignal() {
  turnsignal_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::controller::TurnSignal ControlCommand::turnsignal() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.turnsignal)
  return static_cast< ::controller::TurnSignal >(turnsignal_);
}
inline void ControlCommand::set_turnsignal(::controller::TurnSignal value) {
  assert(::controller::TurnSignal_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  turnsignal_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.turnsignal)
}

// -------------------------------------------------------------------

// SimpleLongitudinalDebug

// optional double station_reference = 1;
inline bool SimpleLongitudinalDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleLongitudinalDebug::clear_station_reference() {
  station_reference_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleLongitudinalDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.station_reference)
  return station_reference_;
}
inline void SimpleLongitudinalDebug::set_station_reference(double value) {
  _has_bits_[0] |= 0x00000008u;
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.station_reference)
}

// optional double station_error = 2;
inline bool SimpleLongitudinalDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleLongitudinalDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLongitudinalDebug::station_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.station_error)
  return station_error_;
}
inline void SimpleLongitudinalDebug::set_station_error(double value) {
  _has_bits_[0] |= 0x00000010u;
  station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.station_error)
}

// optional double station_error_limited = 3;
inline bool SimpleLongitudinalDebug::has_station_error_limited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleLongitudinalDebug::clear_station_error_limited() {
  station_error_limited_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLongitudinalDebug::station_error_limited() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.station_error_limited)
  return station_error_limited_;
}
inline void SimpleLongitudinalDebug::set_station_error_limited(double value) {
  _has_bits_[0] |= 0x00000020u;
  station_error_limited_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.station_error_limited)
}

// optional double preview_station_error = 4;
inline bool SimpleLongitudinalDebug::has_preview_station_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimpleLongitudinalDebug::clear_preview_station_error() {
  preview_station_error_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLongitudinalDebug::preview_station_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.preview_station_error)
  return preview_station_error_;
}
inline void SimpleLongitudinalDebug::set_preview_station_error(double value) {
  _has_bits_[0] |= 0x00000040u;
  preview_station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.preview_station_error)
}

// optional double speed_reference = 5;
inline bool SimpleLongitudinalDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimpleLongitudinalDebug::clear_speed_reference() {
  speed_reference_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLongitudinalDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.speed_reference)
  return speed_reference_;
}
inline void SimpleLongitudinalDebug::set_speed_reference(double value) {
  _has_bits_[0] |= 0x00000080u;
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.speed_reference)
}

// optional double speed_error = 6;
inline bool SimpleLongitudinalDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimpleLongitudinalDebug::clear_speed_error() {
  speed_error_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLongitudinalDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.speed_error)
  return speed_error_;
}
inline void SimpleLongitudinalDebug::set_speed_error(double value) {
  _has_bits_[0] |= 0x00000100u;
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.speed_error)
}

// optional double speed_controller_input_limited = 7;
inline bool SimpleLongitudinalDebug::has_speed_controller_input_limited() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimpleLongitudinalDebug::clear_speed_controller_input_limited() {
  speed_controller_input_limited_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLongitudinalDebug::speed_controller_input_limited() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.speed_controller_input_limited)
  return speed_controller_input_limited_;
}
inline void SimpleLongitudinalDebug::set_speed_controller_input_limited(double value) {
  _has_bits_[0] |= 0x00000200u;
  speed_controller_input_limited_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.speed_controller_input_limited)
}

// optional double preview_speed_reference = 8;
inline bool SimpleLongitudinalDebug::has_preview_speed_reference() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimpleLongitudinalDebug::clear_preview_speed_reference() {
  preview_speed_reference_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLongitudinalDebug::preview_speed_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.preview_speed_reference)
  return preview_speed_reference_;
}
inline void SimpleLongitudinalDebug::set_preview_speed_reference(double value) {
  _has_bits_[0] |= 0x00000400u;
  preview_speed_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.preview_speed_reference)
}

// optional double preview_speed_error = 9;
inline bool SimpleLongitudinalDebug::has_preview_speed_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimpleLongitudinalDebug::clear_preview_speed_error() {
  preview_speed_error_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLongitudinalDebug::preview_speed_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.preview_speed_error)
  return preview_speed_error_;
}
inline void SimpleLongitudinalDebug::set_preview_speed_error(double value) {
  _has_bits_[0] |= 0x00000800u;
  preview_speed_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.preview_speed_error)
}

// optional double preview_acceleration_reference = 10;
inline bool SimpleLongitudinalDebug::has_preview_acceleration_reference() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_preview_acceleration_reference() {
  preview_acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLongitudinalDebug::preview_acceleration_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.preview_acceleration_reference)
  return preview_acceleration_reference_;
}
inline void SimpleLongitudinalDebug::set_preview_acceleration_reference(double value) {
  _has_bits_[0] |= 0x00001000u;
  preview_acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.preview_acceleration_reference)
}

// optional double acceleration_cmd_closeloop = 11;
inline bool SimpleLongitudinalDebug::has_acceleration_cmd_closeloop() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLongitudinalDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd_closeloop(double value) {
  _has_bits_[0] |= 0x00002000u;
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 12;
inline bool SimpleLongitudinalDebug::has_acceleration_cmd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLongitudinalDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.acceleration_cmd)
  return acceleration_cmd_;
}
inline void SimpleLongitudinalDebug::set_acceleration_cmd(double value) {
  _has_bits_[0] |= 0x00004000u;
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 13;
inline bool SimpleLongitudinalDebug::has_acceleration_lookup() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLongitudinalDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.acceleration_lookup)
  return acceleration_lookup_;
}
inline void SimpleLongitudinalDebug::set_acceleration_lookup(double value) {
  _has_bits_[0] |= 0x00008000u;
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.acceleration_lookup)
}

// optional double speed_lookup = 14;
inline bool SimpleLongitudinalDebug::has_speed_lookup() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLongitudinalDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.speed_lookup)
  return speed_lookup_;
}
inline void SimpleLongitudinalDebug::set_speed_lookup(double value) {
  _has_bits_[0] |= 0x00010000u;
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.speed_lookup)
}

// optional double calibration_value = 15;
inline bool SimpleLongitudinalDebug::has_calibration_value() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_calibration_value() {
  calibration_value_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLongitudinalDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.calibration_value)
  return calibration_value_;
}
inline void SimpleLongitudinalDebug::set_calibration_value(double value) {
  _has_bits_[0] |= 0x00020000u;
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.calibration_value)
}

// optional double throttle_cmd = 16;
inline bool SimpleLongitudinalDebug::has_throttle_cmd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_throttle_cmd() {
  throttle_cmd_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLongitudinalDebug::throttle_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.throttle_cmd)
  return throttle_cmd_;
}
inline void SimpleLongitudinalDebug::set_throttle_cmd(double value) {
  _has_bits_[0] |= 0x00040000u;
  throttle_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.throttle_cmd)
}

// optional double brake_cmd = 17;
inline bool SimpleLongitudinalDebug::has_brake_cmd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_brake_cmd() {
  brake_cmd_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLongitudinalDebug::brake_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.brake_cmd)
  return brake_cmd_;
}
inline void SimpleLongitudinalDebug::set_brake_cmd(double value) {
  _has_bits_[0] |= 0x00080000u;
  brake_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.brake_cmd)
}

// optional bool is_full_stop = 18;
inline bool SimpleLongitudinalDebug::has_is_full_stop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool SimpleLongitudinalDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.is_full_stop)
  return is_full_stop_;
}
inline void SimpleLongitudinalDebug::set_is_full_stop(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.is_full_stop)
}

// optional double slope_offset_compensation = 19;
inline bool SimpleLongitudinalDebug::has_slope_offset_compensation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_slope_offset_compensation() {
  slope_offset_compensation_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLongitudinalDebug::slope_offset_compensation() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.slope_offset_compensation)
  return slope_offset_compensation_;
}
inline void SimpleLongitudinalDebug::set_slope_offset_compensation(double value) {
  _has_bits_[0] |= 0x00100000u;
  slope_offset_compensation_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.slope_offset_compensation)
}

// optional double current_station = 20;
inline bool SimpleLongitudinalDebug::has_current_station() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_current_station() {
  current_station_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLongitudinalDebug::current_station() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_station)
  return current_station_;
}
inline void SimpleLongitudinalDebug::set_current_station(double value) {
  _has_bits_[0] |= 0x00200000u;
  current_station_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.current_station)
}

// optional double path_remain = 21;
inline bool SimpleLongitudinalDebug::has_path_remain() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_path_remain() {
  path_remain_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double SimpleLongitudinalDebug::path_remain() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.path_remain)
  return path_remain_;
}
inline void SimpleLongitudinalDebug::set_path_remain(double value) {
  _has_bits_[0] |= 0x01000000u;
  path_remain_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.path_remain)
}

// optional int32 pid_saturation_status = 22;
inline bool SimpleLongitudinalDebug::has_pid_saturation_status() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_pid_saturation_status() {
  pid_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::int32 SimpleLongitudinalDebug::pid_saturation_status() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.pid_saturation_status)
  return pid_saturation_status_;
}
inline void SimpleLongitudinalDebug::set_pid_saturation_status(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  pid_saturation_status_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.pid_saturation_status)
}

// optional int32 leadlag_saturation_status = 23;
inline bool SimpleLongitudinalDebug::has_leadlag_saturation_status() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SimpleLongitudinalDebug::clear_leadlag_saturation_status() {
  leadlag_saturation_status_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::int32 SimpleLongitudinalDebug::leadlag_saturation_status() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.leadlag_saturation_status)
  return leadlag_saturation_status_;
}
inline void SimpleLongitudinalDebug::set_leadlag_saturation_status(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  leadlag_saturation_status_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.leadlag_saturation_status)
}

// optional double speed_offset = 24;
inline bool SimpleLongitudinalDebug::has_speed_offset() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_speed_offset() {
  speed_offset_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleLongitudinalDebug::speed_offset() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.speed_offset)
  return speed_offset_;
}
inline void SimpleLongitudinalDebug::set_speed_offset(double value) {
  _has_bits_[0] |= 0x02000000u;
  speed_offset_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.speed_offset)
}

// optional double current_speed = 25;
inline bool SimpleLongitudinalDebug::has_current_speed() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_current_speed() {
  current_speed_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLongitudinalDebug::current_speed() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_speed)
  return current_speed_;
}
inline void SimpleLongitudinalDebug::set_current_speed(double value) {
  _has_bits_[0] |= 0x04000000u;
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.current_speed)
}

// optional double acceleration_reference = 26;
inline bool SimpleLongitudinalDebug::has_acceleration_reference() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLongitudinalDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.acceleration_reference)
  return acceleration_reference_;
}
inline void SimpleLongitudinalDebug::set_acceleration_reference(double value) {
  _has_bits_[0] |= 0x08000000u;
  acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.acceleration_reference)
}

// optional double current_acceleration = 27;
inline bool SimpleLongitudinalDebug::has_current_acceleration() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_current_acceleration() {
  current_acceleration_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLongitudinalDebug::current_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_acceleration)
  return current_acceleration_;
}
inline void SimpleLongitudinalDebug::set_current_acceleration(double value) {
  _has_bits_[0] |= 0x10000000u;
  current_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.current_acceleration)
}

// optional double acceleration_error = 28;
inline bool SimpleLongitudinalDebug::has_acceleration_error() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_acceleration_error() {
  acceleration_error_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLongitudinalDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.acceleration_error)
  return acceleration_error_;
}
inline void SimpleLongitudinalDebug::set_acceleration_error(double value) {
  _has_bits_[0] |= 0x20000000u;
  acceleration_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.acceleration_error)
}

// optional double jerk_reference = 29;
inline bool SimpleLongitudinalDebug::has_jerk_reference() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_jerk_reference() {
  jerk_reference_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLongitudinalDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.jerk_reference)
  return jerk_reference_;
}
inline void SimpleLongitudinalDebug::set_jerk_reference(double value) {
  _has_bits_[0] |= 0x40000000u;
  jerk_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.jerk_reference)
}

// optional double current_jerk = 30;
inline bool SimpleLongitudinalDebug::has_current_jerk() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SimpleLongitudinalDebug::clear_current_jerk() {
  current_jerk_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLongitudinalDebug::current_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_jerk)
  return current_jerk_;
}
inline void SimpleLongitudinalDebug::set_current_jerk(double value) {
  _has_bits_[0] |= 0x80000000u;
  current_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.current_jerk)
}

// optional double jerk_error = 31;
inline bool SimpleLongitudinalDebug::has_jerk_error() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SimpleLongitudinalDebug::clear_jerk_error() {
  jerk_error_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double SimpleLongitudinalDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.jerk_error)
  return jerk_error_;
}
inline void SimpleLongitudinalDebug::set_jerk_error(double value) {
  _has_bits_[1] |= 0x00000001u;
  jerk_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLongitudinalDebug.jerk_error)
}

// optional .points.TrajectoryPoint current_matched_point = 32;
inline bool SimpleLongitudinalDebug::has_current_matched_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::points::TrajectoryPoint& SimpleLongitudinalDebug::current_matched_point() const {
  const ::points::TrajectoryPoint* p = current_matched_point_;
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_matched_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::release_current_matched_point() {
  // @@protoc_insertion_point(field_release:controller.SimpleLongitudinalDebug.current_matched_point)
  _has_bits_[0] &= ~0x00000001u;
  ::points::TrajectoryPoint* temp = current_matched_point_;
  current_matched_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::mutable_current_matched_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_matched_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    current_matched_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimpleLongitudinalDebug.current_matched_point)
  return current_matched_point_;
}
inline void SimpleLongitudinalDebug::set_allocated_current_matched_point(::points::TrajectoryPoint* current_matched_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_matched_point_);
  }
  if (current_matched_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_matched_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_matched_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_matched_point_ = current_matched_point;
  // @@protoc_insertion_point(field_set_allocated:controller.SimpleLongitudinalDebug.current_matched_point)
}

// optional .points.TrajectoryPoint current_reference_point = 33;
inline bool SimpleLongitudinalDebug::has_current_reference_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::points::TrajectoryPoint& SimpleLongitudinalDebug::current_reference_point() const {
  const ::points::TrajectoryPoint* p = current_reference_point_;
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.current_reference_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::release_current_reference_point() {
  // @@protoc_insertion_point(field_release:controller.SimpleLongitudinalDebug.current_reference_point)
  _has_bits_[0] &= ~0x00000002u;
  ::points::TrajectoryPoint* temp = current_reference_point_;
  current_reference_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::mutable_current_reference_point() {
  _has_bits_[0] |= 0x00000002u;
  if (current_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    current_reference_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimpleLongitudinalDebug.current_reference_point)
  return current_reference_point_;
}
inline void SimpleLongitudinalDebug::set_allocated_current_reference_point(::points::TrajectoryPoint* current_reference_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_reference_point_);
  }
  if (current_reference_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_reference_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_reference_point_ = current_reference_point;
  // @@protoc_insertion_point(field_set_allocated:controller.SimpleLongitudinalDebug.current_reference_point)
}

// optional .points.TrajectoryPoint preview_reference_point = 34;
inline bool SimpleLongitudinalDebug::has_preview_reference_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::points::TrajectoryPoint& SimpleLongitudinalDebug::preview_reference_point() const {
  const ::points::TrajectoryPoint* p = preview_reference_point_;
  // @@protoc_insertion_point(field_get:controller.SimpleLongitudinalDebug.preview_reference_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::release_preview_reference_point() {
  // @@protoc_insertion_point(field_release:controller.SimpleLongitudinalDebug.preview_reference_point)
  _has_bits_[0] &= ~0x00000004u;
  ::points::TrajectoryPoint* temp = preview_reference_point_;
  preview_reference_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* SimpleLongitudinalDebug::mutable_preview_reference_point() {
  _has_bits_[0] |= 0x00000004u;
  if (preview_reference_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    preview_reference_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimpleLongitudinalDebug.preview_reference_point)
  return preview_reference_point_;
}
inline void SimpleLongitudinalDebug::set_allocated_preview_reference_point(::points::TrajectoryPoint* preview_reference_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(preview_reference_point_);
  }
  if (preview_reference_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preview_reference_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preview_reference_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preview_reference_point_ = preview_reference_point;
  // @@protoc_insertion_point(field_set_allocated:controller.SimpleLongitudinalDebug.preview_reference_point)
}

// -------------------------------------------------------------------

// SimpleLateralDebug

// optional double lateral_error = 1;
inline bool SimpleLateralDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleLateralDebug::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SimpleLateralDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.lateral_error)
  return lateral_error_;
}
inline void SimpleLateralDebug::set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000004u;
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.lateral_error)
}

// optional double ref_heading = 2;
inline bool SimpleLateralDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleLateralDebug::clear_ref_heading() {
  ref_heading_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleLateralDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.ref_heading)
  return ref_heading_;
}
inline void SimpleLateralDebug::set_ref_heading(double value) {
  _has_bits_[0] |= 0x00000008u;
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.ref_heading)
}

// optional double heading = 3;
inline bool SimpleLateralDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleLateralDebug::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleLateralDebug::heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading)
  return heading_;
}
inline void SimpleLateralDebug::set_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading)
}

// optional double heading_error = 4;
inline bool SimpleLateralDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleLateralDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleLateralDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_error)
  return heading_error_;
}
inline void SimpleLateralDebug::set_heading_error(double value) {
  _has_bits_[0] |= 0x00000020u;
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_error)
}

// optional double heading_error_rate = 5;
inline bool SimpleLateralDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimpleLateralDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleLateralDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_error_rate)
  return heading_error_rate_;
}
inline void SimpleLateralDebug::set_heading_error_rate(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
inline bool SimpleLateralDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimpleLateralDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleLateralDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.lateral_error_rate)
  return lateral_error_rate_;
}
inline void SimpleLateralDebug::set_lateral_error_rate(double value) {
  _has_bits_[0] |= 0x00000080u;
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.lateral_error_rate)
}

// optional double curvature = 7;
inline bool SimpleLateralDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimpleLateralDebug::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleLateralDebug::curvature() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.curvature)
  return curvature_;
}
inline void SimpleLateralDebug::set_curvature(double value) {
  _has_bits_[0] |= 0x00000100u;
  curvature_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.curvature)
}

// optional double steer_angle = 8;
inline bool SimpleLateralDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle() {
  steer_angle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleLateralDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle)
  return steer_angle_;
}
inline void SimpleLateralDebug::set_steer_angle(double value) {
  _has_bits_[0] |= 0x00000200u;
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleLateralDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleLateralDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
inline void SimpleLateralDebug::set_steer_angle_feedforward(double value) {
  _has_bits_[0] |= 0x00000400u;
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleLateralDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleLateralDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_contribution(double value) {
  _has_bits_[0] |= 0x00000800u;
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleLateralDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleLateralDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _has_bits_[0] |= 0x00001000u;
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleLateralDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleLateralDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_heading_contribution(double value) {
  _has_bits_[0] |= 0x00002000u;
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleLateralDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleLateralDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
inline void SimpleLateralDebug::set_steer_angle_heading_rate_contribution(double value) {
  _has_bits_[0] |= 0x00004000u;
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
inline bool SimpleLateralDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleLateralDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
inline void SimpleLateralDebug::set_steer_angle_feedback(double value) {
  _has_bits_[0] |= 0x00008000u;
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
inline bool SimpleLateralDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SimpleLateralDebug::clear_steering_position() {
  steering_position_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleLateralDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steering_position)
  return steering_position_;
}
inline void SimpleLateralDebug::set_steering_position(double value) {
  _has_bits_[0] |= 0x00010000u;
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steering_position)
}

// optional double ref_speed = 16;
inline bool SimpleLateralDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SimpleLateralDebug::clear_ref_speed() {
  ref_speed_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleLateralDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.ref_speed)
  return ref_speed_;
}
inline void SimpleLateralDebug::set_ref_speed(double value) {
  _has_bits_[0] |= 0x00020000u;
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
inline bool SimpleLateralDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleLateralDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_limited)
  return steer_angle_limited_;
}
inline void SimpleLateralDebug::set_steer_angle_limited(double value) {
  _has_bits_[0] |= 0x00040000u;
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_limited)
}

// optional double lateral_acceleration = 18;
inline bool SimpleLateralDebug::has_lateral_acceleration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SimpleLateralDebug::clear_lateral_acceleration() {
  lateral_acceleration_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleLateralDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.lateral_acceleration)
  return lateral_acceleration_;
}
inline void SimpleLateralDebug::set_lateral_acceleration(double value) {
  _has_bits_[0] |= 0x00080000u;
  lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.lateral_acceleration)
}

// optional double lateral_jerk = 19;
inline bool SimpleLateralDebug::has_lateral_jerk() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SimpleLateralDebug::clear_lateral_jerk() {
  lateral_jerk_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleLateralDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.lateral_jerk)
  return lateral_jerk_;
}
inline void SimpleLateralDebug::set_lateral_jerk(double value) {
  _has_bits_[0] |= 0x00100000u;
  lateral_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.lateral_jerk)
}

// optional double ref_heading_rate = 20;
inline bool SimpleLateralDebug::has_ref_heading_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SimpleLateralDebug::clear_ref_heading_rate() {
  ref_heading_rate_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleLateralDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.ref_heading_rate)
  return ref_heading_rate_;
}
inline void SimpleLateralDebug::set_ref_heading_rate(double value) {
  _has_bits_[0] |= 0x00200000u;
  ref_heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.ref_heading_rate)
}

// optional double heading_rate = 21;
inline bool SimpleLateralDebug::has_heading_rate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_rate() {
  heading_rate_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double SimpleLateralDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_rate)
  return heading_rate_;
}
inline void SimpleLateralDebug::set_heading_rate(double value) {
  _has_bits_[0] |= 0x00400000u;
  heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_rate)
}

// optional double ref_heading_acceleration = 22;
inline bool SimpleLateralDebug::has_ref_heading_acceleration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SimpleLateralDebug::clear_ref_heading_acceleration() {
  ref_heading_acceleration_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double SimpleLateralDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.ref_heading_acceleration)
  return ref_heading_acceleration_;
}
inline void SimpleLateralDebug::set_ref_heading_acceleration(double value) {
  _has_bits_[0] |= 0x00800000u;
  ref_heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.ref_heading_acceleration)
}

// optional double heading_acceleration = 23;
inline bool SimpleLateralDebug::has_heading_acceleration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double SimpleLateralDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_acceleration)
  return heading_acceleration_;
}
inline void SimpleLateralDebug::set_heading_acceleration(double value) {
  _has_bits_[0] |= 0x01000000u;
  heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_acceleration)
}

// optional double heading_error_acceleration = 24;
inline bool SimpleLateralDebug::has_heading_error_acceleration() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_error_acceleration() {
  heading_error_acceleration_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleLateralDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_error_acceleration)
  return heading_error_acceleration_;
}
inline void SimpleLateralDebug::set_heading_error_acceleration(double value) {
  _has_bits_[0] |= 0x02000000u;
  heading_error_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_error_acceleration)
}

// optional double ref_heading_jerk = 25;
inline bool SimpleLateralDebug::has_ref_heading_jerk() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SimpleLateralDebug::clear_ref_heading_jerk() {
  ref_heading_jerk_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleLateralDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.ref_heading_jerk)
  return ref_heading_jerk_;
}
inline void SimpleLateralDebug::set_ref_heading_jerk(double value) {
  _has_bits_[0] |= 0x04000000u;
  ref_heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.ref_heading_jerk)
}

// optional double heading_jerk = 26;
inline bool SimpleLateralDebug::has_heading_jerk() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_jerk() {
  heading_jerk_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleLateralDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_jerk)
  return heading_jerk_;
}
inline void SimpleLateralDebug::set_heading_jerk(double value) {
  _has_bits_[0] |= 0x08000000u;
  heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_jerk)
}

// optional double heading_error_jerk = 27;
inline bool SimpleLateralDebug::has_heading_error_jerk() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_error_jerk() {
  heading_error_jerk_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleLateralDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_error_jerk)
  return heading_error_jerk_;
}
inline void SimpleLateralDebug::set_heading_error_jerk(double value) {
  _has_bits_[0] |= 0x10000000u;
  heading_error_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_error_jerk)
}

// optional double lateral_error_feedback = 28;
inline bool SimpleLateralDebug::has_lateral_error_feedback() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SimpleLateralDebug::clear_lateral_error_feedback() {
  lateral_error_feedback_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleLateralDebug::lateral_error_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.lateral_error_feedback)
  return lateral_error_feedback_;
}
inline void SimpleLateralDebug::set_lateral_error_feedback(double value) {
  _has_bits_[0] |= 0x20000000u;
  lateral_error_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.lateral_error_feedback)
}

// optional double heading_error_feedback = 29;
inline bool SimpleLateralDebug::has_heading_error_feedback() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SimpleLateralDebug::clear_heading_error_feedback() {
  heading_error_feedback_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleLateralDebug::heading_error_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.heading_error_feedback)
  return heading_error_feedback_;
}
inline void SimpleLateralDebug::set_heading_error_feedback(double value) {
  _has_bits_[0] |= 0x40000000u;
  heading_error_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.heading_error_feedback)
}

// optional .points.TrajectoryPoint current_target_point = 30;
inline bool SimpleLateralDebug::has_current_target_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::points::TrajectoryPoint& SimpleLateralDebug::current_target_point() const {
  const ::points::TrajectoryPoint* p = current_target_point_;
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.current_target_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* SimpleLateralDebug::release_current_target_point() {
  // @@protoc_insertion_point(field_release:controller.SimpleLateralDebug.current_target_point)
  _has_bits_[0] &= ~0x00000001u;
  ::points::TrajectoryPoint* temp = current_target_point_;
  current_target_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* SimpleLateralDebug::mutable_current_target_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_target_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    current_target_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimpleLateralDebug.current_target_point)
  return current_target_point_;
}
inline void SimpleLateralDebug::set_allocated_current_target_point(::points::TrajectoryPoint* current_target_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_target_point_);
  }
  if (current_target_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_target_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_target_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_target_point_ = current_target_point;
  // @@protoc_insertion_point(field_set_allocated:controller.SimpleLateralDebug.current_target_point)
}

// optional double steer_angle_feedback_augment = 31;
inline bool SimpleLateralDebug::has_steer_angle_feedback_augment() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SimpleLateralDebug::clear_steer_angle_feedback_augment() {
  steer_angle_feedback_augment_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleLateralDebug::steer_angle_feedback_augment() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_angle_feedback_augment)
  return steer_angle_feedback_augment_;
}
inline void SimpleLateralDebug::set_steer_angle_feedback_augment(double value) {
  _has_bits_[0] |= 0x80000000u;
  steer_angle_feedback_augment_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_angle_feedback_augment)
}

// optional .controller.MracDebug steer_mrac_debug = 32;
inline bool SimpleLateralDebug::has_steer_mrac_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleLateralDebug::clear_steer_mrac_debug() {
  if (steer_mrac_debug_ != nullptr) steer_mrac_debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::controller::MracDebug& SimpleLateralDebug::steer_mrac_debug() const {
  const ::controller::MracDebug* p = steer_mrac_debug_;
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_mrac_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::MracDebug*>(
      &::controller::_MracDebug_default_instance_);
}
inline ::controller::MracDebug* SimpleLateralDebug::release_steer_mrac_debug() {
  // @@protoc_insertion_point(field_release:controller.SimpleLateralDebug.steer_mrac_debug)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::MracDebug* temp = steer_mrac_debug_;
  steer_mrac_debug_ = nullptr;
  return temp;
}
inline ::controller::MracDebug* SimpleLateralDebug::mutable_steer_mrac_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (steer_mrac_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::MracDebug>(GetArenaNoVirtual());
    steer_mrac_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimpleLateralDebug.steer_mrac_debug)
  return steer_mrac_debug_;
}
inline void SimpleLateralDebug::set_allocated_steer_mrac_debug(::controller::MracDebug* steer_mrac_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steer_mrac_debug_;
  }
  if (steer_mrac_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steer_mrac_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steer_mrac_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steer_mrac_debug_ = steer_mrac_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.SimpleLateralDebug.steer_mrac_debug)
}

// optional bool steer_mrac_enable_status = 33;
inline bool SimpleLateralDebug::has_steer_mrac_enable_status() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SimpleLateralDebug::clear_steer_mrac_enable_status() {
  steer_mrac_enable_status_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool SimpleLateralDebug::steer_mrac_enable_status() const {
  // @@protoc_insertion_point(field_get:controller.SimpleLateralDebug.steer_mrac_enable_status)
  return steer_mrac_enable_status_;
}
inline void SimpleLateralDebug::set_steer_mrac_enable_status(bool value) {
  _has_bits_[1] |= 0x00000001u;
  steer_mrac_enable_status_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleLateralDebug.steer_mrac_enable_status)
}

// -------------------------------------------------------------------

// SimpleMPCDebug

// optional double lateral_error = 1;
inline bool SimpleMPCDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleMPCDebug::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SimpleMPCDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_error)
  return lateral_error_;
}
inline void SimpleMPCDebug::set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000001u;
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_error)
}

// optional double ref_heading = 2;
inline bool SimpleMPCDebug::has_ref_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleMPCDebug::clear_ref_heading() {
  ref_heading_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SimpleMPCDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading)
  return ref_heading_;
}
inline void SimpleMPCDebug::set_ref_heading(double value) {
  _has_bits_[0] |= 0x00000002u;
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading)
}

// optional double heading = 3;
inline bool SimpleMPCDebug::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleMPCDebug::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SimpleMPCDebug::heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading)
  return heading_;
}
inline void SimpleMPCDebug::set_heading(double value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading)
}

// optional double heading_error = 4;
inline bool SimpleMPCDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleMPCDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimpleMPCDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error)
  return heading_error_;
}
inline void SimpleMPCDebug::set_heading_error(double value) {
  _has_bits_[0] |= 0x00000008u;
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error)
}

// optional double heading_error_rate = 5;
inline bool SimpleMPCDebug::has_heading_error_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleMPCDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimpleMPCDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_rate)
  return heading_error_rate_;
}
inline void SimpleMPCDebug::set_heading_error_rate(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_rate)
}

// optional double lateral_error_rate = 6;
inline bool SimpleMPCDebug::has_lateral_error_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleMPCDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimpleMPCDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_error_rate)
  return lateral_error_rate_;
}
inline void SimpleMPCDebug::set_lateral_error_rate(double value) {
  _has_bits_[0] |= 0x00000020u;
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_error_rate)
}

// optional double curvature = 7;
inline bool SimpleMPCDebug::has_curvature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimpleMPCDebug::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimpleMPCDebug::curvature() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.curvature)
  return curvature_;
}
inline void SimpleMPCDebug::set_curvature(double value) {
  _has_bits_[0] |= 0x00000040u;
  curvature_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.curvature)
}

// optional double steer_angle = 8;
inline bool SimpleMPCDebug::has_steer_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle() {
  steer_angle_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimpleMPCDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle)
  return steer_angle_;
}
inline void SimpleMPCDebug::set_steer_angle(double value) {
  _has_bits_[0] |= 0x00000080u;
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle)
}

// optional double steer_angle_feedforward = 9;
inline bool SimpleMPCDebug::has_steer_angle_feedforward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimpleMPCDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward(double value) {
  _has_bits_[0] |= 0x00000100u;
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedforward)
}

// optional double steer_angle_lateral_contribution = 10;
inline bool SimpleMPCDebug::has_steer_angle_lateral_contribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimpleMPCDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_contribution(double value) {
  _has_bits_[0] |= 0x00000200u;
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_lateral_contribution)
}

// optional double steer_angle_lateral_rate_contribution = 11;
inline bool SimpleMPCDebug::has_steer_angle_lateral_rate_contribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimpleMPCDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_rate_contribution(double value) {
  _has_bits_[0] |= 0x00000400u;
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
}

// optional double steer_angle_heading_contribution = 12;
inline bool SimpleMPCDebug::has_steer_angle_heading_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimpleMPCDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_heading_contribution(double value) {
  _has_bits_[0] |= 0x00000800u;
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_heading_contribution)
}

// optional double steer_angle_heading_rate_contribution = 13;
inline bool SimpleMPCDebug::has_steer_angle_heading_rate_contribution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimpleMPCDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_heading_rate_contribution(double value) {
  _has_bits_[0] |= 0x00001000u;
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_heading_rate_contribution)
}

// optional double steer_angle_feedback = 14;
inline bool SimpleMPCDebug::has_steer_angle_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimpleMPCDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
inline void SimpleMPCDebug::set_steer_angle_feedback(double value) {
  _has_bits_[0] |= 0x00002000u;
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedback)
}

// optional double steering_position = 15;
inline bool SimpleMPCDebug::has_steering_position() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimpleMPCDebug::clear_steering_position() {
  steering_position_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimpleMPCDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steering_position)
  return steering_position_;
}
inline void SimpleMPCDebug::set_steering_position(double value) {
  _has_bits_[0] |= 0x00004000u;
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steering_position)
}

// optional double ref_speed = 16;
inline bool SimpleMPCDebug::has_ref_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SimpleMPCDebug::clear_ref_speed() {
  ref_speed_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimpleMPCDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_speed)
  return ref_speed_;
}
inline void SimpleMPCDebug::set_ref_speed(double value) {
  _has_bits_[0] |= 0x00008000u;
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_speed)
}

// optional double steer_angle_limited = 17;
inline bool SimpleMPCDebug::has_steer_angle_limited() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double SimpleMPCDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_limited)
  return steer_angle_limited_;
}
inline void SimpleMPCDebug::set_steer_angle_limited(double value) {
  _has_bits_[0] |= 0x00010000u;
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_limited)
}

// optional double station_reference = 18;
inline bool SimpleMPCDebug::has_station_reference() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SimpleMPCDebug::clear_station_reference() {
  station_reference_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimpleMPCDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_reference)
  return station_reference_;
}
inline void SimpleMPCDebug::set_station_reference(double value) {
  _has_bits_[0] |= 0x00020000u;
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_reference)
}

// optional double station_error = 19;
inline bool SimpleMPCDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SimpleMPCDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double SimpleMPCDebug::station_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_error)
  return station_error_;
}
inline void SimpleMPCDebug::set_station_error(double value) {
  _has_bits_[0] |= 0x00040000u;
  station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_error)
}

// optional double speed_reference = 20;
inline bool SimpleMPCDebug::has_speed_reference() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SimpleMPCDebug::clear_speed_reference() {
  speed_reference_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double SimpleMPCDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_reference)
  return speed_reference_;
}
inline void SimpleMPCDebug::set_speed_reference(double value) {
  _has_bits_[0] |= 0x00080000u;
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_reference)
}

// optional double speed_error = 21;
inline bool SimpleMPCDebug::has_speed_error() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SimpleMPCDebug::clear_speed_error() {
  speed_error_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double SimpleMPCDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_error)
  return speed_error_;
}
inline void SimpleMPCDebug::set_speed_error(double value) {
  _has_bits_[0] |= 0x00100000u;
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_error)
}

// optional double acceleration_reference = 22;
inline bool SimpleMPCDebug::has_acceleration_reference() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double SimpleMPCDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_reference)
  return acceleration_reference_;
}
inline void SimpleMPCDebug::set_acceleration_reference(double value) {
  _has_bits_[0] |= 0x00200000u;
  acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_reference)
}

// optional bool is_full_stop = 23;
inline bool SimpleMPCDebug::has_is_full_stop() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SimpleMPCDebug::clear_is_full_stop() {
  is_full_stop_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool SimpleMPCDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.is_full_stop)
  return is_full_stop_;
}
inline void SimpleMPCDebug::set_is_full_stop(bool value) {
  _has_bits_[1] |= 0x00004000u;
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.is_full_stop)
}

// optional double station_feedback = 24;
inline bool SimpleMPCDebug::has_station_feedback() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SimpleMPCDebug::clear_station_feedback() {
  station_feedback_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double SimpleMPCDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_feedback)
  return station_feedback_;
}
inline void SimpleMPCDebug::set_station_feedback(double value) {
  _has_bits_[0] |= 0x00400000u;
  station_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_feedback)
}

// optional double speed_feedback = 25;
inline bool SimpleMPCDebug::has_speed_feedback() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SimpleMPCDebug::clear_speed_feedback() {
  speed_feedback_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double SimpleMPCDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_feedback)
  return speed_feedback_;
}
inline void SimpleMPCDebug::set_speed_feedback(double value) {
  _has_bits_[0] |= 0x00800000u;
  speed_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_feedback)
}

// optional double acceleration_cmd_closeloop = 26;
inline bool SimpleMPCDebug::has_acceleration_cmd_closeloop() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double SimpleMPCDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
inline void SimpleMPCDebug::set_acceleration_cmd_closeloop(double value) {
  _has_bits_[0] |= 0x01000000u;
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_cmd_closeloop)
}

// optional double acceleration_cmd = 27;
inline bool SimpleMPCDebug::has_acceleration_cmd() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double SimpleMPCDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_cmd)
  return acceleration_cmd_;
}
inline void SimpleMPCDebug::set_acceleration_cmd(double value) {
  _has_bits_[0] |= 0x02000000u;
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_cmd)
}

// optional double acceleration_lookup = 28;
inline bool SimpleMPCDebug::has_acceleration_lookup() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double SimpleMPCDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_lookup)
  return acceleration_lookup_;
}
inline void SimpleMPCDebug::set_acceleration_lookup(double value) {
  _has_bits_[0] |= 0x04000000u;
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_lookup)
}

// optional double speed_lookup = 29;
inline bool SimpleMPCDebug::has_speed_lookup() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SimpleMPCDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double SimpleMPCDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_lookup)
  return speed_lookup_;
}
inline void SimpleMPCDebug::set_speed_lookup(double value) {
  _has_bits_[0] |= 0x08000000u;
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_lookup)
}

// optional double calibration_value = 30;
inline bool SimpleMPCDebug::has_calibration_value() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SimpleMPCDebug::clear_calibration_value() {
  calibration_value_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double SimpleMPCDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.calibration_value)
  return calibration_value_;
}
inline void SimpleMPCDebug::set_calibration_value(double value) {
  _has_bits_[0] |= 0x10000000u;
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.calibration_value)
}

// optional double steer_unconstrained_control_diff = 31;
inline bool SimpleMPCDebug::has_steer_unconstrained_control_diff() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SimpleMPCDebug::clear_steer_unconstrained_control_diff() {
  steer_unconstrained_control_diff_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double SimpleMPCDebug::steer_unconstrained_control_diff() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_unconstrained_control_diff)
  return steer_unconstrained_control_diff_;
}
inline void SimpleMPCDebug::set_steer_unconstrained_control_diff(double value) {
  _has_bits_[0] |= 0x20000000u;
  steer_unconstrained_control_diff_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_unconstrained_control_diff)
}

// optional double steer_angle_feedforward_compensation = 32;
inline bool SimpleMPCDebug::has_steer_angle_feedforward_compensation() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SimpleMPCDebug::clear_steer_angle_feedforward_compensation() {
  steer_angle_feedforward_compensation_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double SimpleMPCDebug::steer_angle_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedforward_compensation)
  return steer_angle_feedforward_compensation_;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward_compensation(double value) {
  _has_bits_[0] |= 0x40000000u;
  steer_angle_feedforward_compensation_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedforward_compensation)
}

// repeated double matrix_q_updated = 33;
inline int SimpleMPCDebug::matrix_q_updated_size() const {
  return matrix_q_updated_.size();
}
inline void SimpleMPCDebug::clear_matrix_q_updated() {
  matrix_q_updated_.Clear();
}
inline double SimpleMPCDebug::matrix_q_updated(int index) const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.matrix_q_updated)
  return matrix_q_updated_.Get(index);
}
inline void SimpleMPCDebug::set_matrix_q_updated(int index, double value) {
  matrix_q_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.matrix_q_updated)
}
inline void SimpleMPCDebug::add_matrix_q_updated(double value) {
  matrix_q_updated_.Add(value);
  // @@protoc_insertion_point(field_add:controller.SimpleMPCDebug.matrix_q_updated)
}
inline const ::google::protobuf::RepeatedField< double >&
SimpleMPCDebug::matrix_q_updated() const {
  // @@protoc_insertion_point(field_list:controller.SimpleMPCDebug.matrix_q_updated)
  return matrix_q_updated_;
}
inline ::google::protobuf::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_q_updated() {
  // @@protoc_insertion_point(field_mutable_list:controller.SimpleMPCDebug.matrix_q_updated)
  return &matrix_q_updated_;
}

// repeated double matrix_r_updated = 34;
inline int SimpleMPCDebug::matrix_r_updated_size() const {
  return matrix_r_updated_.size();
}
inline void SimpleMPCDebug::clear_matrix_r_updated() {
  matrix_r_updated_.Clear();
}
inline double SimpleMPCDebug::matrix_r_updated(int index) const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.matrix_r_updated)
  return matrix_r_updated_.Get(index);
}
inline void SimpleMPCDebug::set_matrix_r_updated(int index, double value) {
  matrix_r_updated_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.matrix_r_updated)
}
inline void SimpleMPCDebug::add_matrix_r_updated(double value) {
  matrix_r_updated_.Add(value);
  // @@protoc_insertion_point(field_add:controller.SimpleMPCDebug.matrix_r_updated)
}
inline const ::google::protobuf::RepeatedField< double >&
SimpleMPCDebug::matrix_r_updated() const {
  // @@protoc_insertion_point(field_list:controller.SimpleMPCDebug.matrix_r_updated)
  return matrix_r_updated_;
}
inline ::google::protobuf::RepeatedField< double >*
SimpleMPCDebug::mutable_matrix_r_updated() {
  // @@protoc_insertion_point(field_mutable_list:controller.SimpleMPCDebug.matrix_r_updated)
  return &matrix_r_updated_;
}

// optional double lateral_acceleration = 35;
inline bool SimpleMPCDebug::has_lateral_acceleration() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SimpleMPCDebug::clear_lateral_acceleration() {
  lateral_acceleration_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double SimpleMPCDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_acceleration)
  return lateral_acceleration_;
}
inline void SimpleMPCDebug::set_lateral_acceleration(double value) {
  _has_bits_[0] |= 0x80000000u;
  lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_acceleration)
}

// optional double lateral_jerk = 36;
inline bool SimpleMPCDebug::has_lateral_jerk() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SimpleMPCDebug::clear_lateral_jerk() {
  lateral_jerk_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline double SimpleMPCDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_jerk)
  return lateral_jerk_;
}
inline void SimpleMPCDebug::set_lateral_jerk(double value) {
  _has_bits_[1] |= 0x00000001u;
  lateral_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_jerk)
}

// optional double ref_heading_rate = 37;
inline bool SimpleMPCDebug::has_ref_heading_rate() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SimpleMPCDebug::clear_ref_heading_rate() {
  ref_heading_rate_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline double SimpleMPCDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_rate)
  return ref_heading_rate_;
}
inline void SimpleMPCDebug::set_ref_heading_rate(double value) {
  _has_bits_[1] |= 0x00000002u;
  ref_heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_rate)
}

// optional double heading_rate = 38;
inline bool SimpleMPCDebug::has_heading_rate() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SimpleMPCDebug::clear_heading_rate() {
  heading_rate_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline double SimpleMPCDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_rate)
  return heading_rate_;
}
inline void SimpleMPCDebug::set_heading_rate(double value) {
  _has_bits_[1] |= 0x00000004u;
  heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_rate)
}

// optional double ref_heading_acceleration = 39;
inline bool SimpleMPCDebug::has_ref_heading_acceleration() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SimpleMPCDebug::clear_ref_heading_acceleration() {
  ref_heading_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double SimpleMPCDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_acceleration)
  return ref_heading_acceleration_;
}
inline void SimpleMPCDebug::set_ref_heading_acceleration(double value) {
  _has_bits_[1] |= 0x00000008u;
  ref_heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_acceleration)
}

// optional double heading_acceleration = 40;
inline bool SimpleMPCDebug::has_heading_acceleration() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SimpleMPCDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline double SimpleMPCDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_acceleration)
  return heading_acceleration_;
}
inline void SimpleMPCDebug::set_heading_acceleration(double value) {
  _has_bits_[1] |= 0x00000010u;
  heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_acceleration)
}

// optional double heading_error_acceleration = 41;
inline bool SimpleMPCDebug::has_heading_error_acceleration() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SimpleMPCDebug::clear_heading_error_acceleration() {
  heading_error_acceleration_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline double SimpleMPCDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_acceleration)
  return heading_error_acceleration_;
}
inline void SimpleMPCDebug::set_heading_error_acceleration(double value) {
  _has_bits_[1] |= 0x00000020u;
  heading_error_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_acceleration)
}

// optional double ref_heading_jerk = 42;
inline bool SimpleMPCDebug::has_ref_heading_jerk() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SimpleMPCDebug::clear_ref_heading_jerk() {
  ref_heading_jerk_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline double SimpleMPCDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_jerk)
  return ref_heading_jerk_;
}
inline void SimpleMPCDebug::set_ref_heading_jerk(double value) {
  _has_bits_[1] |= 0x00000040u;
  ref_heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_jerk)
}

// optional double heading_jerk = 43;
inline bool SimpleMPCDebug::has_heading_jerk() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SimpleMPCDebug::clear_heading_jerk() {
  heading_jerk_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline double SimpleMPCDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_jerk)
  return heading_jerk_;
}
inline void SimpleMPCDebug::set_heading_jerk(double value) {
  _has_bits_[1] |= 0x00000080u;
  heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_jerk)
}

// optional double heading_error_jerk = 44;
inline bool SimpleMPCDebug::has_heading_error_jerk() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SimpleMPCDebug::clear_heading_error_jerk() {
  heading_error_jerk_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline double SimpleMPCDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_jerk)
  return heading_error_jerk_;
}
inline void SimpleMPCDebug::set_heading_error_jerk(double value) {
  _has_bits_[1] |= 0x00000100u;
  heading_error_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_jerk)
}

// optional double acceleration_feedback = 45;
inline bool SimpleMPCDebug::has_acceleration_feedback() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_feedback() {
  acceleration_feedback_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline double SimpleMPCDebug::acceleration_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_feedback)
  return acceleration_feedback_;
}
inline void SimpleMPCDebug::set_acceleration_feedback(double value) {
  _has_bits_[1] |= 0x00000200u;
  acceleration_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_feedback)
}

// optional double acceleration_error = 46;
inline bool SimpleMPCDebug::has_acceleration_error() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SimpleMPCDebug::clear_acceleration_error() {
  acceleration_error_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline double SimpleMPCDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_error)
  return acceleration_error_;
}
inline void SimpleMPCDebug::set_acceleration_error(double value) {
  _has_bits_[1] |= 0x00000400u;
  acceleration_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_error)
}

// optional double jerk_reference = 47;
inline bool SimpleMPCDebug::has_jerk_reference() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SimpleMPCDebug::clear_jerk_reference() {
  jerk_reference_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline double SimpleMPCDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_reference)
  return jerk_reference_;
}
inline void SimpleMPCDebug::set_jerk_reference(double value) {
  _has_bits_[1] |= 0x00000800u;
  jerk_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_reference)
}

// optional double jerk_feedback = 48;
inline bool SimpleMPCDebug::has_jerk_feedback() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SimpleMPCDebug::clear_jerk_feedback() {
  jerk_feedback_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline double SimpleMPCDebug::jerk_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_feedback)
  return jerk_feedback_;
}
inline void SimpleMPCDebug::set_jerk_feedback(double value) {
  _has_bits_[1] |= 0x00001000u;
  jerk_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_feedback)
}

// optional double jerk_error = 49;
inline bool SimpleMPCDebug::has_jerk_error() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SimpleMPCDebug::clear_jerk_error() {
  jerk_error_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline double SimpleMPCDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_error)
  return jerk_error_;
}
inline void SimpleMPCDebug::set_jerk_error(double value) {
  _has_bits_[1] |= 0x00002000u;
  jerk_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_error)
}

// -------------------------------------------------------------------

// SimplePIDLatLonDebug

// optional double look_ahead_station = 1;
inline bool SimplePIDLatLonDebug::has_look_ahead_station() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimplePIDLatLonDebug::clear_look_ahead_station() {
  look_ahead_station_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SimplePIDLatLonDebug::look_ahead_station() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.look_ahead_station)
  return look_ahead_station_;
}
inline void SimplePIDLatLonDebug::set_look_ahead_station(double value) {
  _has_bits_[0] |= 0x00000002u;
  look_ahead_station_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.look_ahead_station)
}

// optional double station_error = 2;
inline bool SimplePIDLatLonDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimplePIDLatLonDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SimplePIDLatLonDebug::station_error() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.station_error)
  return station_error_;
}
inline void SimplePIDLatLonDebug::set_station_error(double value) {
  _has_bits_[0] |= 0x00000004u;
  station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.station_error)
}

// optional double current_speed = 3;
inline bool SimplePIDLatLonDebug::has_current_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimplePIDLatLonDebug::clear_current_speed() {
  current_speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimplePIDLatLonDebug::current_speed() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.current_speed)
  return current_speed_;
}
inline void SimplePIDLatLonDebug::set_current_speed(double value) {
  _has_bits_[0] |= 0x00000008u;
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.current_speed)
}

// optional double current_heading = 4;
inline bool SimplePIDLatLonDebug::has_current_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimplePIDLatLonDebug::clear_current_heading() {
  current_heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimplePIDLatLonDebug::current_heading() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.current_heading)
  return current_heading_;
}
inline void SimplePIDLatLonDebug::set_current_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  current_heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.current_heading)
}

// optional double heading_error = 5;
inline bool SimplePIDLatLonDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimplePIDLatLonDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimplePIDLatLonDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.heading_error)
  return heading_error_;
}
inline void SimplePIDLatLonDebug::set_heading_error(double value) {
  _has_bits_[0] |= 0x00000020u;
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.heading_error)
}

// optional double current_steer_wheel_angle = 6;
inline bool SimplePIDLatLonDebug::has_current_steer_wheel_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimplePIDLatLonDebug::clear_current_steer_wheel_angle() {
  current_steer_wheel_angle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimplePIDLatLonDebug::current_steer_wheel_angle() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.current_steer_wheel_angle)
  return current_steer_wheel_angle_;
}
inline void SimplePIDLatLonDebug::set_current_steer_wheel_angle(double value) {
  _has_bits_[0] |= 0x00000040u;
  current_steer_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.current_steer_wheel_angle)
}

// optional double speed_cmd = 7;
inline bool SimplePIDLatLonDebug::has_speed_cmd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimplePIDLatLonDebug::clear_speed_cmd() {
  speed_cmd_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimplePIDLatLonDebug::speed_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.speed_cmd)
  return speed_cmd_;
}
inline void SimplePIDLatLonDebug::set_speed_cmd(double value) {
  _has_bits_[0] |= 0x00000080u;
  speed_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.speed_cmd)
}

// optional double steer_angle_cmd = 8;
inline bool SimplePIDLatLonDebug::has_steer_angle_cmd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimplePIDLatLonDebug::clear_steer_angle_cmd() {
  steer_angle_cmd_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimplePIDLatLonDebug::steer_angle_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.steer_angle_cmd)
  return steer_angle_cmd_;
}
inline void SimplePIDLatLonDebug::set_steer_angle_cmd(double value) {
  _has_bits_[0] |= 0x00000100u;
  steer_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimplePIDLatLonDebug.steer_angle_cmd)
}

// optional .points.TrajectoryPoint target_point = 9;
inline bool SimplePIDLatLonDebug::has_target_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::points::TrajectoryPoint& SimplePIDLatLonDebug::target_point() const {
  const ::points::TrajectoryPoint* p = target_point_;
  // @@protoc_insertion_point(field_get:controller.SimplePIDLatLonDebug.target_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* SimplePIDLatLonDebug::release_target_point() {
  // @@protoc_insertion_point(field_release:controller.SimplePIDLatLonDebug.target_point)
  _has_bits_[0] &= ~0x00000001u;
  ::points::TrajectoryPoint* temp = target_point_;
  target_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* SimplePIDLatLonDebug::mutable_target_point() {
  _has_bits_[0] |= 0x00000001u;
  if (target_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    target_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.SimplePIDLatLonDebug.target_point)
  return target_point_;
}
inline void SimplePIDLatLonDebug::set_allocated_target_point(::points::TrajectoryPoint* target_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_point_);
  }
  if (target_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_point_ = target_point;
  // @@protoc_insertion_point(field_set_allocated:controller.SimplePIDLatLonDebug.target_point)
}

// -------------------------------------------------------------------

// StanleyDebug

// optional double station_error = 1;
inline bool StanleyDebug::has_station_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StanleyDebug::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double StanleyDebug::station_error() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.station_error)
  return station_error_;
}
inline void StanleyDebug::set_station_error(double value) {
  _has_bits_[0] |= 0x00000004u;
  station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.station_error)
}

// optional double lateral_error = 2;
inline bool StanleyDebug::has_lateral_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StanleyDebug::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double StanleyDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.lateral_error)
  return lateral_error_;
}
inline void StanleyDebug::set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000008u;
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.lateral_error)
}

// optional double current_speed = 3;
inline bool StanleyDebug::has_current_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StanleyDebug::clear_current_speed() {
  current_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double StanleyDebug::current_speed() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.current_speed)
  return current_speed_;
}
inline void StanleyDebug::set_current_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.current_speed)
}

// optional double current_heading = 4;
inline bool StanleyDebug::has_current_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StanleyDebug::clear_current_heading() {
  current_heading_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double StanleyDebug::current_heading() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.current_heading)
  return current_heading_;
}
inline void StanleyDebug::set_current_heading(double value) {
  _has_bits_[0] |= 0x00000020u;
  current_heading_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.current_heading)
}

// optional double heading_error = 5;
inline bool StanleyDebug::has_heading_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StanleyDebug::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double StanleyDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.heading_error)
  return heading_error_;
}
inline void StanleyDebug::set_heading_error(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.heading_error)
}

// optional double current_steer_wheel_angle = 6;
inline bool StanleyDebug::has_current_steer_wheel_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StanleyDebug::clear_current_steer_wheel_angle() {
  current_steer_wheel_angle_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double StanleyDebug::current_steer_wheel_angle() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.current_steer_wheel_angle)
  return current_steer_wheel_angle_;
}
inline void StanleyDebug::set_current_steer_wheel_angle(double value) {
  _has_bits_[0] |= 0x00000080u;
  current_steer_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.current_steer_wheel_angle)
}

// optional double speed_cmd = 7;
inline bool StanleyDebug::has_speed_cmd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StanleyDebug::clear_speed_cmd() {
  speed_cmd_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double StanleyDebug::speed_cmd() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.speed_cmd)
  return speed_cmd_;
}
inline void StanleyDebug::set_speed_cmd(double value) {
  _has_bits_[0] |= 0x00000100u;
  speed_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.speed_cmd)
}

// optional double steer_angle_cmd = 8;
inline bool StanleyDebug::has_steer_angle_cmd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StanleyDebug::clear_steer_angle_cmd() {
  steer_angle_cmd_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double StanleyDebug::steer_angle_cmd() const {
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.steer_angle_cmd)
  return steer_angle_cmd_;
}
inline void StanleyDebug::set_steer_angle_cmd(double value) {
  _has_bits_[0] |= 0x00000200u;
  steer_angle_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.StanleyDebug.steer_angle_cmd)
}

// optional .points.TrajectoryPoint target_point = 9;
inline bool StanleyDebug::has_target_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::points::TrajectoryPoint& StanleyDebug::target_point() const {
  const ::points::TrajectoryPoint* p = target_point_;
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.target_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::TrajectoryPoint*>(
      &::points::_TrajectoryPoint_default_instance_);
}
inline ::points::TrajectoryPoint* StanleyDebug::release_target_point() {
  // @@protoc_insertion_point(field_release:controller.StanleyDebug.target_point)
  _has_bits_[0] &= ~0x00000001u;
  ::points::TrajectoryPoint* temp = target_point_;
  target_point_ = nullptr;
  return temp;
}
inline ::points::TrajectoryPoint* StanleyDebug::mutable_target_point() {
  _has_bits_[0] |= 0x00000001u;
  if (target_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::TrajectoryPoint>(GetArenaNoVirtual());
    target_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.StanleyDebug.target_point)
  return target_point_;
}
inline void StanleyDebug::set_allocated_target_point(::points::TrajectoryPoint* target_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_point_);
  }
  if (target_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_point_ = target_point;
  // @@protoc_insertion_point(field_set_allocated:controller.StanleyDebug.target_point)
}

// optional .points.PathPoint matched_point = 10;
inline bool StanleyDebug::has_matched_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::points::PathPoint& StanleyDebug::matched_point() const {
  const ::points::PathPoint* p = matched_point_;
  // @@protoc_insertion_point(field_get:controller.StanleyDebug.matched_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::points::PathPoint*>(
      &::points::_PathPoint_default_instance_);
}
inline ::points::PathPoint* StanleyDebug::release_matched_point() {
  // @@protoc_insertion_point(field_release:controller.StanleyDebug.matched_point)
  _has_bits_[0] &= ~0x00000002u;
  ::points::PathPoint* temp = matched_point_;
  matched_point_ = nullptr;
  return temp;
}
inline ::points::PathPoint* StanleyDebug::mutable_matched_point() {
  _has_bits_[0] |= 0x00000002u;
  if (matched_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::points::PathPoint>(GetArenaNoVirtual());
    matched_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.StanleyDebug.matched_point)
  return matched_point_;
}
inline void StanleyDebug::set_allocated_matched_point(::points::PathPoint* matched_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matched_point_);
  }
  if (matched_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matched_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matched_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  matched_point_ = matched_point;
  // @@protoc_insertion_point(field_set_allocated:controller.StanleyDebug.matched_point)
}

// -------------------------------------------------------------------

// MracDebug

// optional int32 mrac_model_order = 1;
inline bool MracDebug::has_mrac_model_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MracDebug::clear_mrac_model_order() {
  mrac_model_order_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 MracDebug::mrac_model_order() const {
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_model_order)
  return mrac_model_order_;
}
inline void MracDebug::set_mrac_model_order(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mrac_model_order_ = value;
  // @@protoc_insertion_point(field_set:controller.MracDebug.mrac_model_order)
}

// repeated double mrac_reference_state = 2;
inline int MracDebug::mrac_reference_state_size() const {
  return mrac_reference_state_.size();
}
inline void MracDebug::clear_mrac_reference_state() {
  mrac_reference_state_.Clear();
}
inline double MracDebug::mrac_reference_state(int index) const {
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_reference_state)
  return mrac_reference_state_.Get(index);
}
inline void MracDebug::set_mrac_reference_state(int index, double value) {
  mrac_reference_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MracDebug.mrac_reference_state)
}
inline void MracDebug::add_mrac_reference_state(double value) {
  mrac_reference_state_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MracDebug.mrac_reference_state)
}
inline const ::google::protobuf::RepeatedField< double >&
MracDebug::mrac_reference_state() const {
  // @@protoc_insertion_point(field_list:controller.MracDebug.mrac_reference_state)
  return mrac_reference_state_;
}
inline ::google::protobuf::RepeatedField< double >*
MracDebug::mutable_mrac_reference_state() {
  // @@protoc_insertion_point(field_mutable_list:controller.MracDebug.mrac_reference_state)
  return &mrac_reference_state_;
}

// repeated double mrac_state_error = 3;
inline int MracDebug::mrac_state_error_size() const {
  return mrac_state_error_.size();
}
inline void MracDebug::clear_mrac_state_error() {
  mrac_state_error_.Clear();
}
inline double MracDebug::mrac_state_error(int index) const {
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_state_error)
  return mrac_state_error_.Get(index);
}
inline void MracDebug::set_mrac_state_error(int index, double value) {
  mrac_state_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MracDebug.mrac_state_error)
}
inline void MracDebug::add_mrac_state_error(double value) {
  mrac_state_error_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MracDebug.mrac_state_error)
}
inline const ::google::protobuf::RepeatedField< double >&
MracDebug::mrac_state_error() const {
  // @@protoc_insertion_point(field_list:controller.MracDebug.mrac_state_error)
  return mrac_state_error_;
}
inline ::google::protobuf::RepeatedField< double >*
MracDebug::mutable_mrac_state_error() {
  // @@protoc_insertion_point(field_mutable_list:controller.MracDebug.mrac_state_error)
  return &mrac_state_error_;
}

// optional .controller.MracAdaptiveGain mrac_adaptive_gain = 4;
inline bool MracDebug::has_mrac_adaptive_gain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MracDebug::clear_mrac_adaptive_gain() {
  if (mrac_adaptive_gain_ != nullptr) mrac_adaptive_gain_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::controller::MracAdaptiveGain& MracDebug::mrac_adaptive_gain() const {
  const ::controller::MracAdaptiveGain* p = mrac_adaptive_gain_;
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_adaptive_gain)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::MracAdaptiveGain*>(
      &::controller::_MracAdaptiveGain_default_instance_);
}
inline ::controller::MracAdaptiveGain* MracDebug::release_mrac_adaptive_gain() {
  // @@protoc_insertion_point(field_release:controller.MracDebug.mrac_adaptive_gain)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::MracAdaptiveGain* temp = mrac_adaptive_gain_;
  mrac_adaptive_gain_ = nullptr;
  return temp;
}
inline ::controller::MracAdaptiveGain* MracDebug::mutable_mrac_adaptive_gain() {
  _has_bits_[0] |= 0x00000001u;
  if (mrac_adaptive_gain_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::MracAdaptiveGain>(GetArenaNoVirtual());
    mrac_adaptive_gain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MracDebug.mrac_adaptive_gain)
  return mrac_adaptive_gain_;
}
inline void MracDebug::set_allocated_mrac_adaptive_gain(::controller::MracAdaptiveGain* mrac_adaptive_gain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mrac_adaptive_gain_;
  }
  if (mrac_adaptive_gain) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mrac_adaptive_gain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mrac_adaptive_gain, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mrac_adaptive_gain_ = mrac_adaptive_gain;
  // @@protoc_insertion_point(field_set_allocated:controller.MracDebug.mrac_adaptive_gain)
}

// optional int32 mrac_reference_saturation_status = 5;
inline bool MracDebug::has_mrac_reference_saturation_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MracDebug::clear_mrac_reference_saturation_status() {
  mrac_reference_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 MracDebug::mrac_reference_saturation_status() const {
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_reference_saturation_status)
  return mrac_reference_saturation_status_;
}
inline void MracDebug::set_mrac_reference_saturation_status(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mrac_reference_saturation_status_ = value;
  // @@protoc_insertion_point(field_set:controller.MracDebug.mrac_reference_saturation_status)
}

// optional int32 mrac_control_saturation_status = 6;
inline bool MracDebug::has_mrac_control_saturation_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MracDebug::clear_mrac_control_saturation_status() {
  mrac_control_saturation_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 MracDebug::mrac_control_saturation_status() const {
  // @@protoc_insertion_point(field_get:controller.MracDebug.mrac_control_saturation_status)
  return mrac_control_saturation_status_;
}
inline void MracDebug::set_mrac_control_saturation_status(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mrac_control_saturation_status_ = value;
  // @@protoc_insertion_point(field_set:controller.MracDebug.mrac_control_saturation_status)
}

// -------------------------------------------------------------------

// MracAdaptiveGain

// repeated double state_adaptive_gain = 1;
inline int MracAdaptiveGain::state_adaptive_gain_size() const {
  return state_adaptive_gain_.size();
}
inline void MracAdaptiveGain::clear_state_adaptive_gain() {
  state_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::state_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:controller.MracAdaptiveGain.state_adaptive_gain)
  return state_adaptive_gain_.Get(index);
}
inline void MracAdaptiveGain::set_state_adaptive_gain(int index, double value) {
  state_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MracAdaptiveGain.state_adaptive_gain)
}
inline void MracAdaptiveGain::add_state_adaptive_gain(double value) {
  state_adaptive_gain_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MracAdaptiveGain.state_adaptive_gain)
}
inline const ::google::protobuf::RepeatedField< double >&
MracAdaptiveGain::state_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:controller.MracAdaptiveGain.state_adaptive_gain)
  return state_adaptive_gain_;
}
inline ::google::protobuf::RepeatedField< double >*
MracAdaptiveGain::mutable_state_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:controller.MracAdaptiveGain.state_adaptive_gain)
  return &state_adaptive_gain_;
}

// repeated double input_adaptive_gain = 2;
inline int MracAdaptiveGain::input_adaptive_gain_size() const {
  return input_adaptive_gain_.size();
}
inline void MracAdaptiveGain::clear_input_adaptive_gain() {
  input_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::input_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:controller.MracAdaptiveGain.input_adaptive_gain)
  return input_adaptive_gain_.Get(index);
}
inline void MracAdaptiveGain::set_input_adaptive_gain(int index, double value) {
  input_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MracAdaptiveGain.input_adaptive_gain)
}
inline void MracAdaptiveGain::add_input_adaptive_gain(double value) {
  input_adaptive_gain_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MracAdaptiveGain.input_adaptive_gain)
}
inline const ::google::protobuf::RepeatedField< double >&
MracAdaptiveGain::input_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:controller.MracAdaptiveGain.input_adaptive_gain)
  return input_adaptive_gain_;
}
inline ::google::protobuf::RepeatedField< double >*
MracAdaptiveGain::mutable_input_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:controller.MracAdaptiveGain.input_adaptive_gain)
  return &input_adaptive_gain_;
}

// repeated double nonlinear_adaptive_gain = 3;
inline int MracAdaptiveGain::nonlinear_adaptive_gain_size() const {
  return nonlinear_adaptive_gain_.size();
}
inline void MracAdaptiveGain::clear_nonlinear_adaptive_gain() {
  nonlinear_adaptive_gain_.Clear();
}
inline double MracAdaptiveGain::nonlinear_adaptive_gain(int index) const {
  // @@protoc_insertion_point(field_get:controller.MracAdaptiveGain.nonlinear_adaptive_gain)
  return nonlinear_adaptive_gain_.Get(index);
}
inline void MracAdaptiveGain::set_nonlinear_adaptive_gain(int index, double value) {
  nonlinear_adaptive_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MracAdaptiveGain.nonlinear_adaptive_gain)
}
inline void MracAdaptiveGain::add_nonlinear_adaptive_gain(double value) {
  nonlinear_adaptive_gain_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MracAdaptiveGain.nonlinear_adaptive_gain)
}
inline const ::google::protobuf::RepeatedField< double >&
MracAdaptiveGain::nonlinear_adaptive_gain() const {
  // @@protoc_insertion_point(field_list:controller.MracAdaptiveGain.nonlinear_adaptive_gain)
  return nonlinear_adaptive_gain_;
}
inline ::google::protobuf::RepeatedField< double >*
MracAdaptiveGain::mutable_nonlinear_adaptive_gain() {
  // @@protoc_insertion_point(field_mutable_list:controller.MracAdaptiveGain.nonlinear_adaptive_gain)
  return &nonlinear_adaptive_gain_;
}

// -------------------------------------------------------------------

// InputDebug

// optional .controller.Header localization_header = 1;
inline bool InputDebug::has_localization_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::Header& InputDebug::localization_header() const {
  const ::controller::Header* p = localization_header_;
  // @@protoc_insertion_point(field_get:controller.InputDebug.localization_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* InputDebug::release_localization_header() {
  // @@protoc_insertion_point(field_release:controller.InputDebug.localization_header)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::Header* temp = localization_header_;
  localization_header_ = nullptr;
  return temp;
}
inline ::controller::Header* InputDebug::mutable_localization_header() {
  _has_bits_[0] |= 0x00000001u;
  if (localization_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    localization_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.InputDebug.localization_header)
  return localization_header_;
}
inline void InputDebug::set_allocated_localization_header(::controller::Header* localization_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(localization_header_);
  }
  if (localization_header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      localization_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, localization_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  localization_header_ = localization_header;
  // @@protoc_insertion_point(field_set_allocated:controller.InputDebug.localization_header)
}

// optional .controller.Header canbus_header = 2;
inline bool InputDebug::has_canbus_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::controller::Header& InputDebug::canbus_header() const {
  const ::controller::Header* p = canbus_header_;
  // @@protoc_insertion_point(field_get:controller.InputDebug.canbus_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* InputDebug::release_canbus_header() {
  // @@protoc_insertion_point(field_release:controller.InputDebug.canbus_header)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::Header* temp = canbus_header_;
  canbus_header_ = nullptr;
  return temp;
}
inline ::controller::Header* InputDebug::mutable_canbus_header() {
  _has_bits_[0] |= 0x00000002u;
  if (canbus_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    canbus_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.InputDebug.canbus_header)
  return canbus_header_;
}
inline void InputDebug::set_allocated_canbus_header(::controller::Header* canbus_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(canbus_header_);
  }
  if (canbus_header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      canbus_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, canbus_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  canbus_header_ = canbus_header;
  // @@protoc_insertion_point(field_set_allocated:controller.InputDebug.canbus_header)
}

// optional .controller.Header trajectory_header = 3;
inline bool InputDebug::has_trajectory_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::controller::Header& InputDebug::trajectory_header() const {
  const ::controller::Header* p = trajectory_header_;
  // @@protoc_insertion_point(field_get:controller.InputDebug.trajectory_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* InputDebug::release_trajectory_header() {
  // @@protoc_insertion_point(field_release:controller.InputDebug.trajectory_header)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::Header* temp = trajectory_header_;
  trajectory_header_ = nullptr;
  return temp;
}
inline ::controller::Header* InputDebug::mutable_trajectory_header() {
  _has_bits_[0] |= 0x00000004u;
  if (trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    trajectory_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.InputDebug.trajectory_header)
  return trajectory_header_;
}
inline void InputDebug::set_allocated_trajectory_header(::controller::Header* trajectory_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trajectory_header_);
  }
  if (trajectory_header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trajectory_header_ = trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:controller.InputDebug.trajectory_header)
}

// optional .controller.Header latest_replan_trajectory_header = 4;
inline bool InputDebug::has_latest_replan_trajectory_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::controller::Header& InputDebug::latest_replan_trajectory_header() const {
  const ::controller::Header* p = latest_replan_trajectory_header_;
  // @@protoc_insertion_point(field_get:controller.InputDebug.latest_replan_trajectory_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* InputDebug::release_latest_replan_trajectory_header() {
  // @@protoc_insertion_point(field_release:controller.InputDebug.latest_replan_trajectory_header)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::Header* temp = latest_replan_trajectory_header_;
  latest_replan_trajectory_header_ = nullptr;
  return temp;
}
inline ::controller::Header* InputDebug::mutable_latest_replan_trajectory_header() {
  _has_bits_[0] |= 0x00000008u;
  if (latest_replan_trajectory_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    latest_replan_trajectory_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.InputDebug.latest_replan_trajectory_header)
  return latest_replan_trajectory_header_;
}
inline void InputDebug::set_allocated_latest_replan_trajectory_header(::controller::Header* latest_replan_trajectory_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latest_replan_trajectory_header_);
  }
  if (latest_replan_trajectory_header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latest_replan_trajectory_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latest_replan_trajectory_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  latest_replan_trajectory_header_ = latest_replan_trajectory_header;
  // @@protoc_insertion_point(field_set_allocated:controller.InputDebug.latest_replan_trajectory_header)
}

// -------------------------------------------------------------------

// Debug

// optional .controller.SimpleLongitudinalDebug simple_lon_debug = 1;
inline bool Debug::has_simple_lon_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug::clear_simple_lon_debug() {
  if (simple_lon_debug_ != nullptr) simple_lon_debug_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::controller::SimpleLongitudinalDebug& Debug::simple_lon_debug() const {
  const ::controller::SimpleLongitudinalDebug* p = simple_lon_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.simple_lon_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::SimpleLongitudinalDebug*>(
      &::controller::_SimpleLongitudinalDebug_default_instance_);
}
inline ::controller::SimpleLongitudinalDebug* Debug::release_simple_lon_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.simple_lon_debug)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::SimpleLongitudinalDebug* temp = simple_lon_debug_;
  simple_lon_debug_ = nullptr;
  return temp;
}
inline ::controller::SimpleLongitudinalDebug* Debug::mutable_simple_lon_debug() {
  _has_bits_[0] |= 0x00000001u;
  if (simple_lon_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::SimpleLongitudinalDebug>(GetArenaNoVirtual());
    simple_lon_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.simple_lon_debug)
  return simple_lon_debug_;
}
inline void Debug::set_allocated_simple_lon_debug(::controller::SimpleLongitudinalDebug* simple_lon_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simple_lon_debug_;
  }
  if (simple_lon_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_lon_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple_lon_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  simple_lon_debug_ = simple_lon_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.simple_lon_debug)
}

// optional .controller.SimpleLateralDebug simple_lat_debug = 2;
inline bool Debug::has_simple_lat_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug::clear_simple_lat_debug() {
  if (simple_lat_debug_ != nullptr) simple_lat_debug_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::controller::SimpleLateralDebug& Debug::simple_lat_debug() const {
  const ::controller::SimpleLateralDebug* p = simple_lat_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.simple_lat_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::SimpleLateralDebug*>(
      &::controller::_SimpleLateralDebug_default_instance_);
}
inline ::controller::SimpleLateralDebug* Debug::release_simple_lat_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.simple_lat_debug)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::SimpleLateralDebug* temp = simple_lat_debug_;
  simple_lat_debug_ = nullptr;
  return temp;
}
inline ::controller::SimpleLateralDebug* Debug::mutable_simple_lat_debug() {
  _has_bits_[0] |= 0x00000002u;
  if (simple_lat_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::SimpleLateralDebug>(GetArenaNoVirtual());
    simple_lat_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.simple_lat_debug)
  return simple_lat_debug_;
}
inline void Debug::set_allocated_simple_lat_debug(::controller::SimpleLateralDebug* simple_lat_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simple_lat_debug_;
  }
  if (simple_lat_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_lat_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple_lat_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  simple_lat_debug_ = simple_lat_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.simple_lat_debug)
}

// optional .controller.InputDebug input_debug = 3;
inline bool Debug::has_input_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug::clear_input_debug() {
  if (input_debug_ != nullptr) input_debug_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::controller::InputDebug& Debug::input_debug() const {
  const ::controller::InputDebug* p = input_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.input_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::InputDebug*>(
      &::controller::_InputDebug_default_instance_);
}
inline ::controller::InputDebug* Debug::release_input_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.input_debug)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::InputDebug* temp = input_debug_;
  input_debug_ = nullptr;
  return temp;
}
inline ::controller::InputDebug* Debug::mutable_input_debug() {
  _has_bits_[0] |= 0x00000004u;
  if (input_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::InputDebug>(GetArenaNoVirtual());
    input_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.input_debug)
  return input_debug_;
}
inline void Debug::set_allocated_input_debug(::controller::InputDebug* input_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_debug_;
  }
  if (input_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_debug_ = input_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.input_debug)
}

// optional .controller.SimpleMPCDebug simple_mpc_debug = 4;
inline bool Debug::has_simple_mpc_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Debug::clear_simple_mpc_debug() {
  if (simple_mpc_debug_ != nullptr) simple_mpc_debug_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::controller::SimpleMPCDebug& Debug::simple_mpc_debug() const {
  const ::controller::SimpleMPCDebug* p = simple_mpc_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.simple_mpc_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::SimpleMPCDebug*>(
      &::controller::_SimpleMPCDebug_default_instance_);
}
inline ::controller::SimpleMPCDebug* Debug::release_simple_mpc_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.simple_mpc_debug)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::SimpleMPCDebug* temp = simple_mpc_debug_;
  simple_mpc_debug_ = nullptr;
  return temp;
}
inline ::controller::SimpleMPCDebug* Debug::mutable_simple_mpc_debug() {
  _has_bits_[0] |= 0x00000008u;
  if (simple_mpc_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::SimpleMPCDebug>(GetArenaNoVirtual());
    simple_mpc_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.simple_mpc_debug)
  return simple_mpc_debug_;
}
inline void Debug::set_allocated_simple_mpc_debug(::controller::SimpleMPCDebug* simple_mpc_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simple_mpc_debug_;
  }
  if (simple_mpc_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_mpc_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple_mpc_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  simple_mpc_debug_ = simple_mpc_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.simple_mpc_debug)
}

// optional .controller.SimplePIDLatLonDebug simple_pid_lat_lon_debug = 5;
inline bool Debug::has_simple_pid_lat_lon_debug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Debug::clear_simple_pid_lat_lon_debug() {
  if (simple_pid_lat_lon_debug_ != nullptr) simple_pid_lat_lon_debug_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::controller::SimplePIDLatLonDebug& Debug::simple_pid_lat_lon_debug() const {
  const ::controller::SimplePIDLatLonDebug* p = simple_pid_lat_lon_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.simple_pid_lat_lon_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::SimplePIDLatLonDebug*>(
      &::controller::_SimplePIDLatLonDebug_default_instance_);
}
inline ::controller::SimplePIDLatLonDebug* Debug::release_simple_pid_lat_lon_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.simple_pid_lat_lon_debug)
  _has_bits_[0] &= ~0x00000010u;
  ::controller::SimplePIDLatLonDebug* temp = simple_pid_lat_lon_debug_;
  simple_pid_lat_lon_debug_ = nullptr;
  return temp;
}
inline ::controller::SimplePIDLatLonDebug* Debug::mutable_simple_pid_lat_lon_debug() {
  _has_bits_[0] |= 0x00000010u;
  if (simple_pid_lat_lon_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::SimplePIDLatLonDebug>(GetArenaNoVirtual());
    simple_pid_lat_lon_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.simple_pid_lat_lon_debug)
  return simple_pid_lat_lon_debug_;
}
inline void Debug::set_allocated_simple_pid_lat_lon_debug(::controller::SimplePIDLatLonDebug* simple_pid_lat_lon_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simple_pid_lat_lon_debug_;
  }
  if (simple_pid_lat_lon_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_pid_lat_lon_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple_pid_lat_lon_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  simple_pid_lat_lon_debug_ = simple_pid_lat_lon_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.simple_pid_lat_lon_debug)
}

// optional .controller.StanleyDebug stanley_debug = 6;
inline bool Debug::has_stanley_debug() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Debug::clear_stanley_debug() {
  if (stanley_debug_ != nullptr) stanley_debug_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::controller::StanleyDebug& Debug::stanley_debug() const {
  const ::controller::StanleyDebug* p = stanley_debug_;
  // @@protoc_insertion_point(field_get:controller.Debug.stanley_debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::StanleyDebug*>(
      &::controller::_StanleyDebug_default_instance_);
}
inline ::controller::StanleyDebug* Debug::release_stanley_debug() {
  // @@protoc_insertion_point(field_release:controller.Debug.stanley_debug)
  _has_bits_[0] &= ~0x00000020u;
  ::controller::StanleyDebug* temp = stanley_debug_;
  stanley_debug_ = nullptr;
  return temp;
}
inline ::controller::StanleyDebug* Debug::mutable_stanley_debug() {
  _has_bits_[0] |= 0x00000020u;
  if (stanley_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::StanleyDebug>(GetArenaNoVirtual());
    stanley_debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Debug.stanley_debug)
  return stanley_debug_;
}
inline void Debug::set_allocated_stanley_debug(::controller::StanleyDebug* stanley_debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stanley_debug_;
  }
  if (stanley_debug) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stanley_debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stanley_debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stanley_debug_ = stanley_debug;
  // @@protoc_insertion_point(field_set_allocated:controller.Debug.stanley_debug)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::controller::TurnSignal> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::controller::TurnSignal>() {
  return ::controller::TurnSignal_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_control_5fcmd_2eproto
