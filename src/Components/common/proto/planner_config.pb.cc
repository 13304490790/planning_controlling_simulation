// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner_config.proto

#include "planner_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_fem_5fpos_5fdeviation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BSplineConfig_planner_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig_planner_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto;
namespace planning {
class PlannerOpenSpaceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerOpenSpaceConfig> _instance;
} _PlannerOpenSpaceConfig_default_instance_;
class WarmStartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WarmStartConfig> _instance;
} _WarmStartConfig_default_instance_;
class PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkSpeedOptimizerConfig> _instance;
} _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
class IterativeAnchoringConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IterativeAnchoringConfig> _instance;
} _IterativeAnchoringConfig_default_instance_;
class BSplineConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BSplineConfig> _instance;
} _BSplineConfig_default_instance_;
}  // namespace planning
static void InitDefaultsPlannerOpenSpaceConfig_planner_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PlannerOpenSpaceConfig_default_instance_;
    new (ptr) ::planning::PlannerOpenSpaceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PlannerOpenSpaceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlannerOpenSpaceConfig_planner_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlannerOpenSpaceConfig_planner_5fconfig_2eproto}, {
      &scc_info_WarmStartConfig_planner_5fconfig_2eproto.base,
      &scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto.base,}};

static void InitDefaultsWarmStartConfig_planner_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_WarmStartConfig_default_instance_;
    new (ptr) ::planning::WarmStartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::WarmStartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig_planner_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWarmStartConfig_planner_5fconfig_2eproto}, {
      &scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto.base,}};

static void InitDefaultsPiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_;
    new (ptr) ::planning::PiecewiseJerkSpeedOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto}, {}};

static void InitDefaultsIterativeAnchoringConfig_planner_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_IterativeAnchoringConfig_default_instance_;
    new (ptr) ::planning::IterativeAnchoringConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::IterativeAnchoringConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsIterativeAnchoringConfig_planner_5fconfig_2eproto}, {
      &scc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_2eproto.base,
      &scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto.base,
      &scc_info_BSplineConfig_planner_5fconfig_2eproto.base,}};

static void InitDefaultsBSplineConfig_planner_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_BSplineConfig_default_instance_;
    new (ptr) ::planning::BSplineConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::BSplineConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BSplineConfig_planner_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBSplineConfig_planner_5fconfig_2eproto}, {}};

void InitDefaults_planner_5fconfig_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlannerOpenSpaceConfig_planner_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WarmStartConfig_planner_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BSplineConfig_planner_5fconfig_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_planner_5fconfig_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_planner_5fconfig_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_planner_5fconfig_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_planner_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, iterative_anchoring_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, enable_linear_interpolation_),
  PROTOBUF_FIELD_OFFSET(::planning::PlannerOpenSpaceConfig, is_near_destination_theta_threshold_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, node_radius_),
  PROTOBUF_FIELD_OFFSET(::planning::WarmStartConfig, s_curve_config_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, max_forward_v_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, max_reverse_v_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, max_forward_acc_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, max_reverse_acc_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, max_acc_jerk_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, acc_weight_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, kappa_penalty_weight_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, ref_s_weight_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, ref_v_weight_),
  PROTOBUF_FIELD_OFFSET(::planning::PiecewiseJerkSpeedOptimizerConfig, k_dense_time_resoltuion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, interpolated_delta_s_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, reanchoring_trails_num_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, reanchoring_pos_stddev_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, reanchoring_length_stddev_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, estimate_bound_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, default_bound_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, vehicle_shortest_dimension_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, fem_pos_deviation_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, collision_decrease_ratio_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_forward_v_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_reverse_v_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_forward_acc_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_reverse_acc_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_acc_jerk_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, s_curve_config_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, max_iteration_num_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, k_dense_time_resolution_),
  PROTOBUF_FIELD_OFFSET(::planning::IterativeAnchoringConfig, bspline_config_),
  3,
  5,
  4,
  7,
  6,
  8,
  9,
  0,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  1,
  17,
  18,
  2,
  PROTOBUF_FIELD_OFFSET(::planning::BSplineConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::BSplineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::BSplineConfig, degrees_),
  PROTOBUF_FIELD_OFFSET(::planning::BSplineConfig, samples_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::planning::PlannerOpenSpaceConfig)},
  { 19, 36, sizeof(::planning::WarmStartConfig)},
  { 48, 65, sizeof(::planning::PiecewiseJerkSpeedOptimizerConfig)},
  { 77, 101, sizeof(::planning::IterativeAnchoringConfig)},
  { 120, 127, sizeof(::planning::BSplineConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_WarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_IterativeAnchoringConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_BSplineConfig_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_planner_5fconfig_2eproto = {
  {}, AddDescriptors_planner_5fconfig_2eproto, "planner_config.proto", schemas,
  file_default_instances, TableStruct_planner_5fconfig_2eproto::offsets,
  file_level_metadata_planner_5fconfig_2eproto, 5, file_level_enum_descriptors_planner_5fconfig_2eproto, file_level_service_descriptors_planner_5fconfig_2eproto,
};

const char descriptor_table_protodef_planner_5fconfig_2eproto[] =
  "\n\024planner_config.proto\022\010planning\032\027fem_po"
  "s_deviation.proto\"\360\002\n\026PlannerOpenSpaceCo"
  "nfig\0224\n\021warm_start_config\030\002 \001(\0132\031.planni"
  "ng.WarmStartConfig\022O\n#iterative_anchorin"
  "g_smoother_config\030\005 \001(\0132\".planning.Itera"
  "tiveAnchoringConfig\022\022\n\007delta_t\030\007 \001(\002:\0011\022"
  "+\n\035is_near_destination_threshold\030\010 \001(\001:\004"
  "0.02\022/\n enable_check_parallel_trajectory"
  "\030\t \001(\010:\005false\022*\n\033enable_linear_interpola"
  "tion\030\n \001(\010:\005false\0221\n#is_near_destination"
  "_theta_threshold\030\013 \001(\001:\0040.05\"\277\003\n\017WarmSta"
  "rtConfig\022\037\n\022xy_grid_resolution\030\001 \001(\001:\0030."
  "1\022 \n\023phi_grid_resolution\030\002 \001(\001:\0030.1\022\031\n\rn"
  "ext_node_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001("
  "\001:\0030.5\022 \n\024traj_forward_penalty\030\005 \001(\001:\00210"
  "\022\036\n\021traj_back_penalty\030\006 \001(\001:\003100\022%\n\030traj"
  "_gear_switch_penalty\030\007 \001(\001:\003100\022\036\n\022traj_"
  "steer_penalty\030\010 \001(\001:\00250\022&\n\031traj_steer_ch"
  "ange_penalty\030\t \001(\001:\003150\022&\n\031grid_a_star_x"
  "y_resolution\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020"
  " \001(\001:\0030.3\022C\n\016s_curve_config\030\021 \001(\0132+.plan"
  "ning.PiecewiseJerkSpeedOptimizerConfig\"\364"
  "\002\n!PiecewiseJerkSpeedOptimizerConfig\022\030\n\r"
  "max_forward_v\030\001 \001(\001:\0011\022\030\n\rmax_reverse_v\030"
  "\002 \001(\001:\0011\022\034\n\017max_forward_acc\030\003 \001(\001:\0030.5\022\034"
  "\n\017max_reverse_acc\030\004 \001(\001:\0030.5\022\031\n\014max_acc_"
  "jerk\030\005 \001(\001:\0030.5\022\024\n\007delta_t\030\006 \001(\001:\0030.2\022\025\n"
  "\nacc_weight\030\007 \001(\001:\0011\022\027\n\013jerk_weight\030\010 \001("
  "\001:\00210\022\"\n\024kappa_penalty_weight\030\t \001(\001:\004100"
  "0\022\032\n\014ref_s_weight\030\n \001(\001:\0041000\022\030\n\014ref_v_w"
  "eight\030\013 \001(\001:\00210\022$\n\027k_dense_time_resoltui"
  "on\030\014 \001(\001:\0030.5\"\342\005\n\030IterativeAnchoringConf"
  "ig\022!\n\024interpolated_delta_s\030\001 \001(\001:\0030.1\022\"\n"
  "\026reanchoring_trails_num\030\002 \001(\005:\00250\022$\n\026rea"
  "nchoring_pos_stddev\030\003 \001(\001:\0040.25\022$\n\031reanc"
  "horing_length_stddev\030\004 \001(\001:\0011\022\034\n\016estimat"
  "e_bound\030\005 \001(\010:\004true\022\030\n\rdefault_bound\030\006 \001"
  "(\001:\0012\022(\n\032vehicle_shortest_dimension\030\007 \001("
  "\001:\0041.04\022R\n!fem_pos_deviation_smoother_co"
  "nfig\030\010 \001(\0132\'.smoother.FemPosDeviationSmo"
  "otherConfig\022%\n\030collision_decrease_ratio\030"
  "\t \001(\001:\0030.9\022\030\n\rmax_forward_v\030\n \001(\001:\0011\022\030\n\r"
  "max_reverse_v\030\013 \001(\001:\0011\022\032\n\017max_forward_ac"
  "c\030\014 \001(\001:\0012\022\032\n\017max_reverse_acc\030\r \001(\001:\0011\022\031"
  "\n\014max_acc_jerk\030\016 \001(\001:\0030.5\022\024\n\007delta_t\030\017 \001"
  "(\001:\0030.2\022C\n\016s_curve_config\030\020 \001(\0132+.planni"
  "ng.PiecewiseJerkSpeedOptimizerConfig\022\035\n\021"
  "max_iteration_num\030\021 \001(\003:\00250\022$\n\027k_dense_t"
  "ime_resolution\030\022 \001(\001:\0030.1\022/\n\016bspline_con"
  "fig\030\023 \001(\0132\027.planning.BSplineConfig\"8\n\rBS"
  "plineConfig\022\022\n\007degrees\030\001 \001(\005:\0013\022\023\n\007sampl"
  "es\030\002 \001(\005:\00230"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_planner_5fconfig_2eproto = {
  false, InitDefaults_planner_5fconfig_2eproto, 
  descriptor_table_protodef_planner_5fconfig_2eproto,
  "planner_config.proto", &assign_descriptors_table_planner_5fconfig_2eproto, 2052,
};

void AddDescriptors_planner_5fconfig_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_fem_5fpos_5fdeviation_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_planner_5fconfig_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planner_5fconfig_2eproto = []() { AddDescriptors_planner_5fconfig_2eproto(); return true; }();
namespace planning {

// ===================================================================

void PlannerOpenSpaceConfig::InitAsDefaultInstance() {
  ::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->warm_start_config_ = const_cast< ::planning::WarmStartConfig*>(
      ::planning::WarmStartConfig::internal_default_instance());
  ::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->iterative_anchoring_smoother_config_ = const_cast< ::planning::IterativeAnchoringConfig*>(
      ::planning::IterativeAnchoringConfig::internal_default_instance());
}
class PlannerOpenSpaceConfig::HasBitSetters {
 public:
  static const ::planning::WarmStartConfig& warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_warm_start_config(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::planning::IterativeAnchoringConfig& iterative_anchoring_smoother_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_iterative_anchoring_smoother_config(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_delta_t(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_near_destination_threshold(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_enable_check_parallel_trajectory(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_enable_linear_interpolation(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_near_destination_theta_threshold(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::planning::WarmStartConfig&
PlannerOpenSpaceConfig::HasBitSetters::warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->warm_start_config_;
}
const ::planning::IterativeAnchoringConfig&
PlannerOpenSpaceConfig::HasBitSetters::iterative_anchoring_smoother_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->iterative_anchoring_smoother_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerOpenSpaceConfig::kWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kIterativeAnchoringSmootherConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDeltaTFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThresholdFieldNumber;
const int PlannerOpenSpaceConfig::kEnableCheckParallelTrajectoryFieldNumber;
const int PlannerOpenSpaceConfig::kEnableLinearInterpolationFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThetaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerOpenSpaceConfig::PlannerOpenSpaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_warm_start_config()) {
    warm_start_config_ = new ::planning::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = nullptr;
  }
  if (from.has_iterative_anchoring_smoother_config()) {
    iterative_anchoring_smoother_config_ = new ::planning::IterativeAnchoringConfig(*from.iterative_anchoring_smoother_config_);
  } else {
    iterative_anchoring_smoother_config_ = nullptr;
  }
  ::memcpy(&enable_check_parallel_trajectory_, &from.enable_check_parallel_trajectory_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:planning.PlannerOpenSpaceConfig)
}

void PlannerOpenSpaceConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlannerOpenSpaceConfig_planner_5fconfig_2eproto.base);
  ::memset(&warm_start_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&warm_start_config_)) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  is_near_destination_threshold_ = 0.02;
  is_near_destination_theta_threshold_ = 0.05;
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:planning.PlannerOpenSpaceConfig)
  SharedDtor();
}

void PlannerOpenSpaceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete warm_start_config_;
  if (this != internal_default_instance()) delete iterative_anchoring_smoother_config_;
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannerOpenSpaceConfig& PlannerOpenSpaceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlannerOpenSpaceConfig_planner_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(warm_start_config_ != nullptr);
      warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(iterative_anchoring_smoother_config_ != nullptr);
      iterative_anchoring_smoother_config_->Clear();
    }
  }
  ::memset(&enable_check_parallel_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(enable_linear_interpolation_));
  if (cached_has_bits & 0x00000070u) {
    delta_t_ = 1;
    is_near_destination_threshold_ = 0.02;
    is_near_destination_theta_threshold_ = 0.05;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlannerOpenSpaceConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlannerOpenSpaceConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .planning.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::WarmStartConfig::_InternalParse;
        object = msg->mutable_warm_start_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::IterativeAnchoringConfig::_InternalParse;
        object = msg->mutable_iterative_anchoring_smoother_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_delta_t(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double is_near_destination_threshold = 8 [default = 0.02];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_is_near_destination_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_enable_check_parallel_trajectory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_enable_linear_interpolation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_is_near_destination_theta_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlannerOpenSpaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PlannerOpenSpaceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .planning.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iterative_anchoring_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_delta_t(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 8 [default = 0.02];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_is_near_destination_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_enable_check_parallel_trajectory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_parallel_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_enable_linear_interpolation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_linear_interpolation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_is_near_destination_theta_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_theta_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PlannerOpenSpaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PlannerOpenSpaceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlannerOpenSpaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::warm_start_config(this), output);
  }

  // optional .planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::iterative_anchoring_smoother_config(this), output);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->is_near_destination_threshold(), output);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_check_parallel_trajectory(), output);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_linear_interpolation(), output);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->is_near_destination_theta_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PlannerOpenSpaceConfig)
}

::google::protobuf::uint8* PlannerOpenSpaceConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::warm_start_config(this), target);
  }

  // optional .planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::iterative_anchoring_smoother_config(this), target);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_linear_interpolation(), target);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->is_near_destination_theta_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .planning.WarmStartConfig warm_start_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *warm_start_config_);
    }

    // optional .planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iterative_anchoring_smoother_config_);
    }

    // optional bool enable_check_parallel_trajectory = 9 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 10 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float delta_t = 7 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 8 [default = 0.02];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerOpenSpaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerOpenSpaceConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PlannerOpenSpaceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PlannerOpenSpaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PlannerOpenSpaceConfig)
    MergeFrom(*source);
  }
}

void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_warm_start_config()->::planning::WarmStartConfig::MergeFrom(from.warm_start_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_iterative_anchoring_smoother_config()->::planning::IterativeAnchoringConfig::MergeFrom(from.iterative_anchoring_smoother_config());
    }
    if (cached_has_bits & 0x00000004u) {
      enable_check_parallel_trajectory_ = from.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_linear_interpolation_ = from.enable_linear_interpolation_;
    }
    if (cached_has_bits & 0x00000010u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_near_destination_theta_threshold_ = from.is_near_destination_theta_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannerOpenSpaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::Swap(PlannerOpenSpaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(warm_start_config_, other->warm_start_config_);
  swap(iterative_anchoring_smoother_config_, other->iterative_anchoring_smoother_config_);
  swap(enable_check_parallel_trajectory_, other->enable_check_parallel_trajectory_);
  swap(enable_linear_interpolation_, other->enable_linear_interpolation_);
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  swap(is_near_destination_theta_threshold_, other->is_near_destination_theta_threshold_);
}

::google::protobuf::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planner_5fconfig_2eproto);
  return ::file_level_metadata_planner_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WarmStartConfig::InitAsDefaultInstance() {
  ::planning::_WarmStartConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      ::planning::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
}
class WarmStartConfig::HasBitSetters {
 public:
  static void set_has_xy_grid_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_phi_grid_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_next_node_num(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_step_size(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_traj_forward_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_traj_back_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_traj_gear_switch_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_traj_steer_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_traj_steer_change_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_grid_a_star_xy_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_node_radius(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const WarmStartConfig* msg);
  static void set_has_s_curve_config(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::planning::PiecewiseJerkSpeedOptimizerConfig&
WarmStartConfig::HasBitSetters::s_curve_config(const WarmStartConfig* msg) {
  return *msg->s_curve_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarmStartConfig::kXyGridResolutionFieldNumber;
const int WarmStartConfig::kPhiGridResolutionFieldNumber;
const int WarmStartConfig::kNextNodeNumFieldNumber;
const int WarmStartConfig::kStepSizeFieldNumber;
const int WarmStartConfig::kTrajForwardPenaltyFieldNumber;
const int WarmStartConfig::kTrajBackPenaltyFieldNumber;
const int WarmStartConfig::kTrajGearSwitchPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerChangePenaltyFieldNumber;
const int WarmStartConfig::kGridAStarXyResolutionFieldNumber;
const int WarmStartConfig::kNodeRadiusFieldNumber;
const int WarmStartConfig::kSCurveConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarmStartConfig::WarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::planning::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = nullptr;
  }
  ::memcpy(&xy_grid_resolution_, &from.xy_grid_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&xy_grid_resolution_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:planning.WarmStartConfig)
}

void WarmStartConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WarmStartConfig_planner_5fconfig_2eproto.base);
  s_curve_config_ = nullptr;
  xy_grid_resolution_ = 0.1;
  phi_grid_resolution_ = 0.1;
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  step_size_ = 0.5;
  traj_forward_penalty_ = 10;
  traj_back_penalty_ = 100;
  traj_gear_switch_penalty_ = 100;
  traj_steer_penalty_ = 50;
  traj_steer_change_penalty_ = 150;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.3;
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:planning.WarmStartConfig)
  SharedDtor();
}

void WarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete s_curve_config_;
}

void WarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarmStartConfig& WarmStartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WarmStartConfig_planner_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(s_curve_config_ != nullptr);
      s_curve_config_->Clear();
    }
    xy_grid_resolution_ = 0.1;
    phi_grid_resolution_ = 0.1;
    next_node_num_ = PROTOBUF_ULONGLONG(10);
    step_size_ = 0.5;
    traj_forward_penalty_ = 10;
    traj_back_penalty_ = 100;
    traj_gear_switch_penalty_ = 100;
  }
  if (cached_has_bits & 0x00000f00u) {
    traj_steer_penalty_ = 50;
    traj_steer_change_penalty_ = 150;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WarmStartConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WarmStartConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_xy_grid_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double phi_grid_resolution = 2 [default = 0.1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_phi_grid_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_next_node_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_step_size(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_forward_penalty = 5 [default = 10];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_traj_forward_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_back_penalty = 6 [default = 100];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_traj_back_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_gear_switch_penalty = 7 [default = 100];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_traj_gear_switch_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_steer_penalty = 8 [default = 50];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_traj_steer_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_steer_change_penalty = 9 [default = 150];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_traj_steer_change_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_grid_a_star_xy_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double node_radius = 16 [default = 0.3];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_node_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::PiecewiseJerkSpeedOptimizerConfig::_InternalParse;
        object = msg->mutable_s_curve_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.WarmStartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_xy_grid_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_phi_grid_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_next_node_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_step_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_traj_forward_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 100];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_traj_back_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 100];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_traj_gear_switch_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 50];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_traj_steer_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 150];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_traj_steer_change_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_grid_a_star_xy_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.3];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_node_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.WarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.WarmStartConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 150];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.3];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::s_curve_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.WarmStartConfig)
}

::google::protobuf::uint8* WarmStartConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 150];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.3];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::s_curve_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.WarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional double xy_grid_resolution = 1 [default = 0.1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double traj_forward_penalty = 5 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 100];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 100];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double traj_steer_penalty = 8 [default = 50];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 150];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.3];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmStartConfig* source =
      ::google::protobuf::DynamicCastToGenerated<WarmStartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.WarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.WarmStartConfig)
    MergeFrom(*source);
  }
}

void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s_curve_config()->::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000004u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000040u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::Swap(WarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_curve_config_, other->s_curve_config_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
}

::google::protobuf::Metadata WarmStartConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planner_5fconfig_2eproto);
  return ::file_level_metadata_planner_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance() {
}
class PiecewiseJerkSpeedOptimizerConfig::HasBitSetters {
 public:
  static void set_has_max_forward_v(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_reverse_v(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_forward_acc(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_reverse_acc(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_acc_jerk(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_delta_t(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_acc_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_jerk_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_kappa_penalty_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_ref_s_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_ref_v_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_k_dense_time_resoltuion(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkSpeedOptimizerConfig::kMaxForwardVFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kMaxReverseVFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kMaxForwardAccFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kMaxReverseAccFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kMaxAccJerkFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kDeltaTFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kAccWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kKappaPenaltyWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefVWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kKDenseTimeResoltuionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PiecewiseJerkSpeedOptimizerConfig)
}
PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_forward_v_, &from.max_forward_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_dense_time_resoltuion_) -
    reinterpret_cast<char*>(&max_forward_v_)) + sizeof(k_dense_time_resoltuion_));
  // @@protoc_insertion_point(copy_constructor:planning.PiecewiseJerkSpeedOptimizerConfig)
}

void PiecewiseJerkSpeedOptimizerConfig::SharedCtor() {
  max_forward_v_ = 1;
  max_reverse_v_ = 1;
  max_forward_acc_ = 0.5;
  max_reverse_acc_ = 0.5;
  max_acc_jerk_ = 0.5;
  delta_t_ = 0.2;
  acc_weight_ = 1;
  jerk_weight_ = 10;
  kappa_penalty_weight_ = 1000;
  ref_s_weight_ = 1000;
  ref_v_weight_ = 10;
  k_dense_time_resoltuion_ = 0.5;
}

PiecewiseJerkSpeedOptimizerConfig::~PiecewiseJerkSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:planning.PiecewiseJerkSpeedOptimizerConfig)
  SharedDtor();
}

void PiecewiseJerkSpeedOptimizerConfig::SharedDtor() {
}

void PiecewiseJerkSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiecewiseJerkSpeedOptimizerConfig& PiecewiseJerkSpeedOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PiecewiseJerkSpeedOptimizerConfig_planner_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiecewiseJerkSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_forward_v_ = 1;
    max_reverse_v_ = 1;
    max_forward_acc_ = 0.5;
    max_reverse_acc_ = 0.5;
    max_acc_jerk_ = 0.5;
    delta_t_ = 0.2;
    acc_weight_ = 1;
    jerk_weight_ = 10;
  }
  if (cached_has_bits & 0x00000f00u) {
    kappa_penalty_weight_ = 1000;
    ref_s_weight_ = 1000;
    ref_v_weight_ = 10;
    k_dense_time_resoltuion_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PiecewiseJerkSpeedOptimizerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PiecewiseJerkSpeedOptimizerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double max_forward_v = 1 [default = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_max_forward_v(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_reverse_v = 2 [default = 1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_max_reverse_v(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_forward_acc = 3 [default = 0.5];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_max_forward_acc(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_reverse_acc = 4 [default = 0.5];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_max_reverse_acc(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_acc_jerk = 5 [default = 0.5];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_max_acc_jerk(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double delta_t = 6 [default = 0.2];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_delta_t(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_weight = 7 [default = 1];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_acc_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double jerk_weight = 8 [default = 10];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_jerk_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kappa_penalty_weight = 9 [default = 1000];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_kappa_penalty_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ref_s_weight = 10 [default = 1000];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_ref_s_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ref_v_weight = 11 [default = 10];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_ref_v_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double k_dense_time_resoltuion = 12 [default = 0.5];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_k_dense_time_resoltuion(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PiecewiseJerkSpeedOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_forward_v = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_max_forward_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_v = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_max_reverse_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_acc = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_max_forward_acc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_acc = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_max_reverse_acc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acc_jerk = 5 [default = 0.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_max_acc_jerk(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta_t = 6 [default = 0.2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_delta_t(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_weight = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_acc_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_jerk_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_penalty_weight = 9 [default = 1000];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_kappa_penalty_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_penalty_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 10 [default = 1000];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_ref_s_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 11 [default = 10];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_ref_v_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double k_dense_time_resoltuion = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          HasBitSetters::set_has_k_dense_time_resoltuion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_dense_time_resoltuion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PiecewiseJerkSpeedOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PiecewiseJerkSpeedOptimizerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PiecewiseJerkSpeedOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_forward_v = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_forward_v(), output);
  }

  // optional double max_reverse_v = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_reverse_v(), output);
  }

  // optional double max_forward_acc = 3 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_forward_acc(), output);
  }

  // optional double max_reverse_acc = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_reverse_acc(), output);
  }

  // optional double max_acc_jerk = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_acc_jerk(), output);
  }

  // optional double delta_t = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->delta_t(), output);
  }

  // optional double acc_weight = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_weight(), output);
  }

  // optional double jerk_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->jerk_weight(), output);
  }

  // optional double kappa_penalty_weight = 9 [default = 1000];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->kappa_penalty_weight(), output);
  }

  // optional double ref_s_weight = 10 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ref_s_weight(), output);
  }

  // optional double ref_v_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ref_v_weight(), output);
  }

  // optional double k_dense_time_resoltuion = 12 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->k_dense_time_resoltuion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PiecewiseJerkSpeedOptimizerConfig)
}

::google::protobuf::uint8* PiecewiseJerkSpeedOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_forward_v = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_forward_v(), target);
  }

  // optional double max_reverse_v = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_reverse_v(), target);
  }

  // optional double max_forward_acc = 3 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_forward_acc(), target);
  }

  // optional double max_reverse_acc = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_reverse_acc(), target);
  }

  // optional double max_acc_jerk = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_acc_jerk(), target);
  }

  // optional double delta_t = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->delta_t(), target);
  }

  // optional double acc_weight = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_weight(), target);
  }

  // optional double jerk_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->jerk_weight(), target);
  }

  // optional double kappa_penalty_weight = 9 [default = 1000];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->kappa_penalty_weight(), target);
  }

  // optional double ref_s_weight = 10 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ref_s_weight(), target);
  }

  // optional double ref_v_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ref_v_weight(), target);
  }

  // optional double k_dense_time_resoltuion = 12 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->k_dense_time_resoltuion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PiecewiseJerkSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_forward_v = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_v = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_forward_acc = 3 [default = 0.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_acc = 4 [default = 0.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_acc_jerk = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double delta_t = 6 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double acc_weight = 7 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 8 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double kappa_penalty_weight = 9 [default = 1000];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 10 [default = 1000];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 11 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double k_dense_time_resoltuion = 12 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkSpeedOptimizerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PiecewiseJerkSpeedOptimizerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PiecewiseJerkSpeedOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PiecewiseJerkSpeedOptimizerConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_forward_v_ = from.max_forward_v_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_reverse_v_ = from.max_reverse_v_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_forward_acc_ = from.max_forward_acc_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_reverse_acc_ = from.max_reverse_acc_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_acc_jerk_ = from.max_acc_jerk_;
    }
    if (cached_has_bits & 0x00000020u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      jerk_weight_ = from.jerk_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      kappa_penalty_weight_ = from.kappa_penalty_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      k_dense_time_resoltuion_ = from.k_dense_time_resoltuion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkSpeedOptimizerConfig::Swap(PiecewiseJerkSpeedOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkSpeedOptimizerConfig::InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_forward_v_, other->max_forward_v_);
  swap(max_reverse_v_, other->max_reverse_v_);
  swap(max_forward_acc_, other->max_forward_acc_);
  swap(max_reverse_acc_, other->max_reverse_acc_);
  swap(max_acc_jerk_, other->max_acc_jerk_);
  swap(delta_t_, other->delta_t_);
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(kappa_penalty_weight_, other->kappa_penalty_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
  swap(k_dense_time_resoltuion_, other->k_dense_time_resoltuion_);
}

::google::protobuf::Metadata PiecewiseJerkSpeedOptimizerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planner_5fconfig_2eproto);
  return ::file_level_metadata_planner_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IterativeAnchoringConfig::InitAsDefaultInstance() {
  ::planning::_IterativeAnchoringConfig_default_instance_._instance.get_mutable()->fem_pos_deviation_smoother_config_ = const_cast< ::smoother::FemPosDeviationSmootherConfig*>(
      ::smoother::FemPosDeviationSmootherConfig::internal_default_instance());
  ::planning::_IterativeAnchoringConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      ::planning::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
  ::planning::_IterativeAnchoringConfig_default_instance_._instance.get_mutable()->bspline_config_ = const_cast< ::planning::BSplineConfig*>(
      ::planning::BSplineConfig::internal_default_instance());
}
class IterativeAnchoringConfig::HasBitSetters {
 public:
  static void set_has_interpolated_delta_s(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_reanchoring_trails_num(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_reanchoring_pos_stddev(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_reanchoring_length_stddev(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_estimate_bound(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_default_bound(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_vehicle_shortest_dimension(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::smoother::FemPosDeviationSmootherConfig& fem_pos_deviation_smoother_config(const IterativeAnchoringConfig* msg);
  static void set_has_fem_pos_deviation_smoother_config(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_collision_decrease_ratio(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_max_forward_v(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_max_reverse_v(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_max_forward_acc(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_max_reverse_acc(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_max_acc_jerk(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_delta_t(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static const ::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const IterativeAnchoringConfig* msg);
  static void set_has_s_curve_config(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_iteration_num(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_k_dense_time_resolution(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static const ::planning::BSplineConfig& bspline_config(const IterativeAnchoringConfig* msg);
  static void set_has_bspline_config(IterativeAnchoringConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::smoother::FemPosDeviationSmootherConfig&
IterativeAnchoringConfig::HasBitSetters::fem_pos_deviation_smoother_config(const IterativeAnchoringConfig* msg) {
  return *msg->fem_pos_deviation_smoother_config_;
}
const ::planning::PiecewiseJerkSpeedOptimizerConfig&
IterativeAnchoringConfig::HasBitSetters::s_curve_config(const IterativeAnchoringConfig* msg) {
  return *msg->s_curve_config_;
}
const ::planning::BSplineConfig&
IterativeAnchoringConfig::HasBitSetters::bspline_config(const IterativeAnchoringConfig* msg) {
  return *msg->bspline_config_;
}
void IterativeAnchoringConfig::clear_fem_pos_deviation_smoother_config() {
  if (fem_pos_deviation_smoother_config_ != nullptr) fem_pos_deviation_smoother_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IterativeAnchoringConfig::kInterpolatedDeltaSFieldNumber;
const int IterativeAnchoringConfig::kReanchoringTrailsNumFieldNumber;
const int IterativeAnchoringConfig::kReanchoringPosStddevFieldNumber;
const int IterativeAnchoringConfig::kReanchoringLengthStddevFieldNumber;
const int IterativeAnchoringConfig::kEstimateBoundFieldNumber;
const int IterativeAnchoringConfig::kDefaultBoundFieldNumber;
const int IterativeAnchoringConfig::kVehicleShortestDimensionFieldNumber;
const int IterativeAnchoringConfig::kFemPosDeviationSmootherConfigFieldNumber;
const int IterativeAnchoringConfig::kCollisionDecreaseRatioFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardVFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseVFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardAccFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseAccFieldNumber;
const int IterativeAnchoringConfig::kMaxAccJerkFieldNumber;
const int IterativeAnchoringConfig::kDeltaTFieldNumber;
const int IterativeAnchoringConfig::kSCurveConfigFieldNumber;
const int IterativeAnchoringConfig::kMaxIterationNumFieldNumber;
const int IterativeAnchoringConfig::kKDenseTimeResolutionFieldNumber;
const int IterativeAnchoringConfig::kBsplineConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IterativeAnchoringConfig::IterativeAnchoringConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.IterativeAnchoringConfig)
}
IterativeAnchoringConfig::IterativeAnchoringConfig(const IterativeAnchoringConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fem_pos_deviation_smoother_config()) {
    fem_pos_deviation_smoother_config_ = new ::smoother::FemPosDeviationSmootherConfig(*from.fem_pos_deviation_smoother_config_);
  } else {
    fem_pos_deviation_smoother_config_ = nullptr;
  }
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::planning::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = nullptr;
  }
  if (from.has_bspline_config()) {
    bspline_config_ = new ::planning::BSplineConfig(*from.bspline_config_);
  } else {
    bspline_config_ = nullptr;
  }
  ::memcpy(&interpolated_delta_s_, &from.interpolated_delta_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_dense_time_resolution_) -
    reinterpret_cast<char*>(&interpolated_delta_s_)) + sizeof(k_dense_time_resolution_));
  // @@protoc_insertion_point(copy_constructor:planning.IterativeAnchoringConfig)
}

void IterativeAnchoringConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto.base);
  ::memset(&fem_pos_deviation_smoother_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bspline_config_) -
      reinterpret_cast<char*>(&fem_pos_deviation_smoother_config_)) + sizeof(bspline_config_));
  interpolated_delta_s_ = 0.1;
  reanchoring_pos_stddev_ = 0.25;
  reanchoring_trails_num_ = 50;
  estimate_bound_ = true;
  reanchoring_length_stddev_ = 1;
  default_bound_ = 2;
  vehicle_shortest_dimension_ = 1.04;
  collision_decrease_ratio_ = 0.9;
  max_forward_v_ = 1;
  max_reverse_v_ = 1;
  max_forward_acc_ = 2;
  max_reverse_acc_ = 1;
  max_acc_jerk_ = 0.5;
  delta_t_ = 0.2;
  max_iteration_num_ = PROTOBUF_LONGLONG(50);
  k_dense_time_resolution_ = 0.1;
}

IterativeAnchoringConfig::~IterativeAnchoringConfig() {
  // @@protoc_insertion_point(destructor:planning.IterativeAnchoringConfig)
  SharedDtor();
}

void IterativeAnchoringConfig::SharedDtor() {
  if (this != internal_default_instance()) delete fem_pos_deviation_smoother_config_;
  if (this != internal_default_instance()) delete s_curve_config_;
  if (this != internal_default_instance()) delete bspline_config_;
}

void IterativeAnchoringConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IterativeAnchoringConfig& IterativeAnchoringConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IterativeAnchoringConfig_planner_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void IterativeAnchoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fem_pos_deviation_smoother_config_ != nullptr);
      fem_pos_deviation_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s_curve_config_ != nullptr);
      s_curve_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bspline_config_ != nullptr);
      bspline_config_->Clear();
    }
    interpolated_delta_s_ = 0.1;
    reanchoring_pos_stddev_ = 0.25;
    reanchoring_trails_num_ = 50;
    estimate_bound_ = true;
    reanchoring_length_stddev_ = 1;
  }
  if (cached_has_bits & 0x0000ff00u) {
    default_bound_ = 2;
    vehicle_shortest_dimension_ = 1.04;
    collision_decrease_ratio_ = 0.9;
    max_forward_v_ = 1;
    max_reverse_v_ = 1;
    max_forward_acc_ = 2;
    max_reverse_acc_ = 1;
    max_acc_jerk_ = 0.5;
  }
  if (cached_has_bits & 0x00070000u) {
    delta_t_ = 0.2;
    max_iteration_num_ = PROTOBUF_LONGLONG(50);
    k_dense_time_resolution_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IterativeAnchoringConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IterativeAnchoringConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double interpolated_delta_s = 1 [default = 0.1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_interpolated_delta_s(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int32 reanchoring_trails_num = 2 [default = 50];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_reanchoring_trails_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double reanchoring_pos_stddev = 3 [default = 0.25];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_reanchoring_pos_stddev(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double reanchoring_length_stddev = 4 [default = 1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_reanchoring_length_stddev(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool estimate_bound = 5 [default = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_estimate_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double default_bound = 6 [default = 2];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_default_bound(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double vehicle_shortest_dimension = 7 [default = 1.04];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_vehicle_shortest_dimension(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .smoother.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::smoother::FemPosDeviationSmootherConfig::_InternalParse;
        object = msg->mutable_fem_pos_deviation_smoother_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double collision_decrease_ratio = 9 [default = 0.9];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_collision_decrease_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_forward_v = 10 [default = 1];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_max_forward_v(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_reverse_v = 11 [default = 1];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_max_reverse_v(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_forward_acc = 12 [default = 2];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_max_forward_acc(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_reverse_acc = 13 [default = 1];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_max_reverse_acc(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_acc_jerk = 14 [default = 0.5];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_max_acc_jerk(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double delta_t = 15 [default = 0.2];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_delta_t(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::PiecewiseJerkSpeedOptimizerConfig::_InternalParse;
        object = msg->mutable_s_curve_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional int64 max_iteration_num = 17 [default = 50];
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_max_iteration_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double k_dense_time_resolution = 18 [default = 0.1];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_k_dense_time_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .planning.BSplineConfig bspline_config = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::BSplineConfig::_InternalParse;
        object = msg->mutable_bspline_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IterativeAnchoringConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.IterativeAnchoringConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double interpolated_delta_s = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_interpolated_delta_s(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interpolated_delta_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reanchoring_trails_num = 2 [default = 50];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_reanchoring_trails_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reanchoring_trails_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_pos_stddev = 3 [default = 0.25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_reanchoring_pos_stddev(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_pos_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_length_stddev = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_reanchoring_length_stddev(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_length_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool estimate_bound = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_estimate_bound(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &estimate_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_bound = 6 [default = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_default_bound(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_shortest_dimension = 7 [default = 1.04];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_vehicle_shortest_dimension(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_shortest_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .smoother.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fem_pos_deviation_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double collision_decrease_ratio = 9 [default = 0.9];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_collision_decrease_ratio(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collision_decrease_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_v = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_max_forward_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_v = 11 [default = 1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_max_reverse_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_acc = 12 [default = 2];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          HasBitSetters::set_has_max_forward_acc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_acc = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_max_reverse_acc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acc_jerk = 14 [default = 0.5];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {
          HasBitSetters::set_has_max_acc_jerk(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta_t = 15 [default = 0.2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_delta_t(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_iteration_num = 17 [default = 50];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_max_iteration_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_iteration_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double k_dense_time_resolution = 18 [default = 0.1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {
          HasBitSetters::set_has_k_dense_time_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_dense_time_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.BSplineConfig bspline_config = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bspline_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.IterativeAnchoringConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.IterativeAnchoringConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IterativeAnchoringConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->interpolated_delta_s(), output);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reanchoring_trails_num(), output);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reanchoring_pos_stddev(), output);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->reanchoring_length_stddev(), output);
  }

  // optional bool estimate_bound = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->estimate_bound(), output);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->default_bound(), output);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vehicle_shortest_dimension(), output);
  }

  // optional .smoother.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::fem_pos_deviation_smoother_config(this), output);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->collision_decrease_ratio(), output);
  }

  // optional double max_forward_v = 10 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_forward_v(), output);
  }

  // optional double max_reverse_v = 11 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_reverse_v(), output);
  }

  // optional double max_forward_acc = 12 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_forward_acc(), output);
  }

  // optional double max_reverse_acc = 13 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_reverse_acc(), output);
  }

  // optional double max_acc_jerk = 14 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_acc_jerk(), output);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->delta_t(), output);
  }

  // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::s_curve_config(this), output);
  }

  // optional int64 max_iteration_num = 17 [default = 50];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->max_iteration_num(), output);
  }

  // optional double k_dense_time_resolution = 18 [default = 0.1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->k_dense_time_resolution(), output);
  }

  // optional .planning.BSplineConfig bspline_config = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::bspline_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.IterativeAnchoringConfig)
}

::google::protobuf::uint8* IterativeAnchoringConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->interpolated_delta_s(), target);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reanchoring_trails_num(), target);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reanchoring_pos_stddev(), target);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->reanchoring_length_stddev(), target);
  }

  // optional bool estimate_bound = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->estimate_bound(), target);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->default_bound(), target);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vehicle_shortest_dimension(), target);
  }

  // optional .smoother.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::fem_pos_deviation_smoother_config(this), target);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->collision_decrease_ratio(), target);
  }

  // optional double max_forward_v = 10 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_forward_v(), target);
  }

  // optional double max_reverse_v = 11 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_reverse_v(), target);
  }

  // optional double max_forward_acc = 12 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_forward_acc(), target);
  }

  // optional double max_reverse_acc = 13 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_reverse_acc(), target);
  }

  // optional double max_acc_jerk = 14 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_acc_jerk(), target);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->delta_t(), target);
  }

  // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::s_curve_config(this), target);
  }

  // optional int64 max_iteration_num = 17 [default = 50];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->max_iteration_num(), target);
  }

  // optional double k_dense_time_resolution = 18 [default = 0.1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->k_dense_time_resolution(), target);
  }

  // optional .planning.BSplineConfig bspline_config = 19;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::bspline_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.IterativeAnchoringConfig)
  return target;
}

size_t IterativeAnchoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.IterativeAnchoringConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .smoother.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fem_pos_deviation_smoother_config_);
    }

    // optional .planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional .planning.BSplineConfig bspline_config = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bspline_config_);
    }

    // optional double interpolated_delta_s = 1 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_pos_stddev = 3 [default = 0.25];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 reanchoring_trails_num = 2 [default = 50];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reanchoring_trails_num());
    }

    // optional bool estimate_bound = 5 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double reanchoring_length_stddev = 4 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double default_bound = 6 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_shortest_dimension = 7 [default = 1.04];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double collision_decrease_ratio = 9 [default = 0.9];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double max_forward_v = 10 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_v = 11 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double max_forward_acc = 12 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_acc = 13 [default = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double max_acc_jerk = 14 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional double delta_t = 15 [default = 0.2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional int64 max_iteration_num = 17 [default = 50];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_iteration_num());
    }

    // optional double k_dense_time_resolution = 18 [default = 0.1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IterativeAnchoringConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IterativeAnchoringConfig* source =
      ::google::protobuf::DynamicCastToGenerated<IterativeAnchoringConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.IterativeAnchoringConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.IterativeAnchoringConfig)
    MergeFrom(*source);
  }
}

void IterativeAnchoringConfig::MergeFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fem_pos_deviation_smoother_config()->::smoother::FemPosDeviationSmootherConfig::MergeFrom(from.fem_pos_deviation_smoother_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s_curve_config()->::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bspline_config()->::planning::BSplineConfig::MergeFrom(from.bspline_config());
    }
    if (cached_has_bits & 0x00000008u) {
      interpolated_delta_s_ = from.interpolated_delta_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      reanchoring_pos_stddev_ = from.reanchoring_pos_stddev_;
    }
    if (cached_has_bits & 0x00000020u) {
      reanchoring_trails_num_ = from.reanchoring_trails_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      estimate_bound_ = from.estimate_bound_;
    }
    if (cached_has_bits & 0x00000080u) {
      reanchoring_length_stddev_ = from.reanchoring_length_stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      default_bound_ = from.default_bound_;
    }
    if (cached_has_bits & 0x00000200u) {
      vehicle_shortest_dimension_ = from.vehicle_shortest_dimension_;
    }
    if (cached_has_bits & 0x00000400u) {
      collision_decrease_ratio_ = from.collision_decrease_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_forward_v_ = from.max_forward_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_reverse_v_ = from.max_reverse_v_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_forward_acc_ = from.max_forward_acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_reverse_acc_ = from.max_reverse_acc_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_acc_jerk_ = from.max_acc_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_iteration_num_ = from.max_iteration_num_;
    }
    if (cached_has_bits & 0x00040000u) {
      k_dense_time_resolution_ = from.k_dense_time_resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IterativeAnchoringConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterativeAnchoringConfig::CopyFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterativeAnchoringConfig::IsInitialized() const {
  return true;
}

void IterativeAnchoringConfig::Swap(IterativeAnchoringConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterativeAnchoringConfig::InternalSwap(IterativeAnchoringConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fem_pos_deviation_smoother_config_, other->fem_pos_deviation_smoother_config_);
  swap(s_curve_config_, other->s_curve_config_);
  swap(bspline_config_, other->bspline_config_);
  swap(interpolated_delta_s_, other->interpolated_delta_s_);
  swap(reanchoring_pos_stddev_, other->reanchoring_pos_stddev_);
  swap(reanchoring_trails_num_, other->reanchoring_trails_num_);
  swap(estimate_bound_, other->estimate_bound_);
  swap(reanchoring_length_stddev_, other->reanchoring_length_stddev_);
  swap(default_bound_, other->default_bound_);
  swap(vehicle_shortest_dimension_, other->vehicle_shortest_dimension_);
  swap(collision_decrease_ratio_, other->collision_decrease_ratio_);
  swap(max_forward_v_, other->max_forward_v_);
  swap(max_reverse_v_, other->max_reverse_v_);
  swap(max_forward_acc_, other->max_forward_acc_);
  swap(max_reverse_acc_, other->max_reverse_acc_);
  swap(max_acc_jerk_, other->max_acc_jerk_);
  swap(delta_t_, other->delta_t_);
  swap(max_iteration_num_, other->max_iteration_num_);
  swap(k_dense_time_resolution_, other->k_dense_time_resolution_);
}

::google::protobuf::Metadata IterativeAnchoringConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planner_5fconfig_2eproto);
  return ::file_level_metadata_planner_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BSplineConfig::InitAsDefaultInstance() {
}
class BSplineConfig::HasBitSetters {
 public:
  static void set_has_degrees(BSplineConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_samples(BSplineConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BSplineConfig::kDegreesFieldNumber;
const int BSplineConfig::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BSplineConfig::BSplineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.BSplineConfig)
}
BSplineConfig::BSplineConfig(const BSplineConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&degrees_, &from.degrees_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_) -
    reinterpret_cast<char*>(&degrees_)) + sizeof(samples_));
  // @@protoc_insertion_point(copy_constructor:planning.BSplineConfig)
}

void BSplineConfig::SharedCtor() {
  degrees_ = 3;
  samples_ = 30;
}

BSplineConfig::~BSplineConfig() {
  // @@protoc_insertion_point(destructor:planning.BSplineConfig)
  SharedDtor();
}

void BSplineConfig::SharedDtor() {
}

void BSplineConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSplineConfig& BSplineConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BSplineConfig_planner_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BSplineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.BSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    degrees_ = 3;
    samples_ = 30;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BSplineConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BSplineConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 degrees = 1 [default = 3];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_degrees(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 samples = 2 [default = 30];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_samples(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BSplineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.BSplineConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 degrees = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_degrees(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degrees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 samples = 2 [default = 30];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_samples(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.BSplineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.BSplineConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BSplineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.BSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 degrees = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->degrees(), output);
  }

  // optional int32 samples = 2 [default = 30];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.BSplineConfig)
}

::google::protobuf::uint8* BSplineConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.BSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 degrees = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->degrees(), target);
  }

  // optional int32 samples = 2 [default = 30];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.BSplineConfig)
  return target;
}

size_t BSplineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.BSplineConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 degrees = 1 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degrees());
    }

    // optional int32 samples = 2 [default = 30];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samples());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSplineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.BSplineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BSplineConfig* source =
      ::google::protobuf::DynamicCastToGenerated<BSplineConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.BSplineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.BSplineConfig)
    MergeFrom(*source);
  }
}

void BSplineConfig::MergeFrom(const BSplineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.BSplineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      degrees_ = from.degrees_;
    }
    if (cached_has_bits & 0x00000002u) {
      samples_ = from.samples_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BSplineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.BSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSplineConfig::CopyFrom(const BSplineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.BSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSplineConfig::IsInitialized() const {
  return true;
}

void BSplineConfig::Swap(BSplineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BSplineConfig::InternalSwap(BSplineConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(degrees_, other->degrees_);
  swap(samples_, other->samples_);
}

::google::protobuf::Metadata BSplineConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planner_5fconfig_2eproto);
  return ::file_level_metadata_planner_5fconfig_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage< ::planning::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PlannerOpenSpaceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::WarmStartConfig* Arena::CreateMaybeMessage< ::planning::WarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::WarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::planning::PiecewiseJerkSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PiecewiseJerkSpeedOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::IterativeAnchoringConfig* Arena::CreateMaybeMessage< ::planning::IterativeAnchoringConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::IterativeAnchoringConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::BSplineConfig* Arena::CreateMaybeMessage< ::planning::BSplineConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::BSplineConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
