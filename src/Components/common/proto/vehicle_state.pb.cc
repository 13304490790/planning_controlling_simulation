// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_state.proto

#include "vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_localization_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose_localization_2eproto;
namespace vehicle_state {
class VehicleStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleState> _instance;
} _VehicleState_default_instance_;
}  // namespace vehicle_state
static void InitDefaultsVehicleState_vehicle_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vehicle_state::_VehicleState_default_instance_;
    new (ptr) ::vehicle_state::VehicleState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle_state::VehicleState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleState_vehicle_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleState_vehicle_5fstate_2eproto}, {
      &scc_info_Pose_localization_2eproto.base,}};

void InitDefaults_vehicle_5fstate_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleState_vehicle_5fstate_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_vehicle_5fstate_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fstate_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fstate_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_vehicle_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, x_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, y_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, z_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, roll_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, pitch_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, yaw_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, heading_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, kappa_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, dt_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, gear_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, pose_),
  PROTOBUF_FIELD_OFFSET(::vehicle_state::VehicleState, steering_percentage_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  16,
  13,
  14,
  0,
  15,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::vehicle_state::VehicleState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle_state::_VehicleState_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_vehicle_5fstate_2eproto = {
  {}, AddDescriptors_vehicle_5fstate_2eproto, "vehicle_state.proto", schemas,
  file_default_instances, TableStruct_vehicle_5fstate_2eproto::offsets,
  file_level_metadata_vehicle_5fstate_2eproto, 1, file_level_enum_descriptors_vehicle_5fstate_2eproto, file_level_service_descriptors_vehicle_5fstate_2eproto,
};

const char descriptor_table_protodef_vehicle_5fstate_2eproto[] =
  "\n\023vehicle_state.proto\022\rvehicle_state\032\rch"
  "assis.proto\032\022localization.proto\"\255\003\n\014Vehi"
  "cleState\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001"
  "z\030\003 \001(\001:\0010\022\024\n\ttimestamp\030\004 \001(\001:\0010\022\017\n\004roll"
  "\030\005 \001(\001:\0010\022\020\n\005pitch\030\006 \001(\001:\0010\022\016\n\003yaw\030\007 \001(\001"
  ":\0010\022\022\n\007heading\030\010 \001(\001:\0010\022\020\n\005kappa\030\t \001(\001:\001"
  "0\022\032\n\017linear_velocity\030\n \001(\001:\0010\022\033\n\020angular"
  "_velocity\030\013 \001(\001:\0010\022\036\n\023linear_acceleratio"
  "n\030\014 \001(\001:\0010\022\017\n\002dt\030\r \001(\001:\0030.5\022*\n\004gear\030\016 \001("
  "\0162\034.canbus.Chassis.GearPosition\0221\n\014drivi"
  "ng_mode\030\017 \001(\0162\033.canbus.Chassis.DrivingMo"
  "de\022\036\n\004pose\030\020 \001(\0132\020.controller.Pose\022\033\n\023st"
  "eering_percentage\030\021 \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_vehicle_5fstate_2eproto = {
  false, InitDefaults_vehicle_5fstate_2eproto, 
  descriptor_table_protodef_vehicle_5fstate_2eproto,
  "vehicle_state.proto", &assign_descriptors_table_vehicle_5fstate_2eproto, 503,
};

void AddDescriptors_vehicle_5fstate_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_chassis_2eproto,
    ::AddDescriptors_localization_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_vehicle_5fstate_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fstate_2eproto = []() { AddDescriptors_vehicle_5fstate_2eproto(); return true; }();
namespace vehicle_state {

// ===================================================================

void VehicleState::InitAsDefaultInstance() {
  ::vehicle_state::_VehicleState_default_instance_._instance.get_mutable()->pose_ = const_cast< ::controller::Pose*>(
      ::controller::Pose::internal_default_instance());
}
class VehicleState::HasBitSetters {
 public:
  static void set_has_x(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_z(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_timestamp(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_roll(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_pitch(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_yaw(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_heading(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_kappa(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_linear_velocity(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_angular_velocity(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_linear_acceleration(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_dt(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_gear(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_driving_mode(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static const ::controller::Pose& pose(const VehicleState* msg);
  static void set_has_pose(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steering_percentage(VehicleState* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

const ::controller::Pose&
VehicleState::HasBitSetters::pose(const VehicleState* msg) {
  return *msg->pose_;
}
void VehicleState::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState::kXFieldNumber;
const int VehicleState::kYFieldNumber;
const int VehicleState::kZFieldNumber;
const int VehicleState::kTimestampFieldNumber;
const int VehicleState::kRollFieldNumber;
const int VehicleState::kPitchFieldNumber;
const int VehicleState::kYawFieldNumber;
const int VehicleState::kHeadingFieldNumber;
const int VehicleState::kKappaFieldNumber;
const int VehicleState::kLinearVelocityFieldNumber;
const int VehicleState::kAngularVelocityFieldNumber;
const int VehicleState::kLinearAccelerationFieldNumber;
const int VehicleState::kDtFieldNumber;
const int VehicleState::kGearFieldNumber;
const int VehicleState::kDrivingModeFieldNumber;
const int VehicleState::kPoseFieldNumber;
const int VehicleState::kSteeringPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState::VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle_state.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::controller::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&dt_) -
    reinterpret_cast<char*>(&x_)) + sizeof(dt_));
  // @@protoc_insertion_point(copy_constructor:vehicle_state.VehicleState)
}

void VehicleState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VehicleState_vehicle_5fstate_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_percentage_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(steering_percentage_));
  dt_ = 0.5;
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:vehicle_state.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void VehicleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleState& VehicleState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VehicleState_vehicle_5fstate_2eproto.base);
  return *internal_default_instance();
}


void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle_state.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pose_ != nullptr);
    pose_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_percentage_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(steering_percentage_));
  }
  dt_ = 0.5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VehicleState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double timestamp = 4 [default = 0];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double roll = 5 [default = 0];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_roll(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double pitch = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_pitch(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double yaw = 7 [default = 0];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_yaw(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double heading = 8 [default = 0];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_heading(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kappa = 9 [default = 0];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_kappa(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double linear_velocity = 10 [default = 0];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_linear_velocity(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double angular_velocity = 11 [default = 0];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_angular_velocity(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double linear_acceleration = 12 [default = 0];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_linear_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double dt = 13 [default = 0.5];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_dt(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .canbus.Chassis.GearPosition gear = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_GearPosition_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gear(static_cast<::canbus::Chassis_GearPosition>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .canbus.Chassis.DrivingMode driving_mode = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_DrivingMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(15, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_driving_mode(static_cast<::canbus::Chassis_DrivingMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .controller.Pose pose = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Pose::_InternalParse;
        object = msg->mutable_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double steering_percentage = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_steering_percentage(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle_state.VehicleState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roll = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_roll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pitch = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_pitch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_yaw(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_kappa(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_velocity = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_linear_velocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angular_velocity = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_angular_velocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_acceleration = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          HasBitSetters::set_has_linear_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dt = 13 [default = 0.5];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_dt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.GearPosition gear = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.DrivingMode driving_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Pose pose = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_percentage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {
          HasBitSetters::set_has_steering_percentage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle_state.VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle_state.VehicleState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle_state.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->roll(), output);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pitch(), output);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yaw(), output);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading(), output);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->kappa(), output);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->linear_velocity(), output);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->angular_velocity(), output);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->linear_acceleration(), output);
  }

  // optional double dt = 13 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->dt(), output);
  }

  // optional .canbus.Chassis.GearPosition gear = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->gear(), output);
  }

  // optional .canbus.Chassis.DrivingMode driving_mode = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->driving_mode(), output);
  }

  // optional .controller.Pose pose = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::pose(this), output);
  }

  // optional double steering_percentage = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steering_percentage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle_state.VehicleState)
}

::google::protobuf::uint8* VehicleState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle_state.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->roll(), target);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pitch(), target);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yaw(), target);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading(), target);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->kappa(), target);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->linear_velocity(), target);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->angular_velocity(), target);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->linear_acceleration(), target);
  }

  // optional double dt = 13 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->dt(), target);
  }

  // optional .canbus.Chassis.GearPosition gear = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->gear(), target);
  }

  // optional .canbus.Chassis.DrivingMode driving_mode = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->driving_mode(), target);
  }

  // optional .controller.Pose pose = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::pose(this), target);
  }

  // optional double steering_percentage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steering_percentage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle_state.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle_state.VehicleState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.Pose pose = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double roll = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double pitch = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double yaw = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double heading = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double angular_velocity = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double linear_acceleration = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional .canbus.Chassis.GearPosition gear = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .canbus.Chassis.DrivingMode driving_mode = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional double steering_percentage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  // optional double dt = 13 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle_state.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::google::protobuf::DynamicCastToGenerated<VehicleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle_state.VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle_state.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle_state.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::controller::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000040u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000080u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000400u) {
      linear_velocity_ = from.linear_velocity_;
    }
    if (cached_has_bits & 0x00000800u) {
      angular_velocity_ = from.angular_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_acceleration_ = from.linear_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00004000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_dt(from.dt());
  }
}

void VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle_state.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle_state.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::Swap(VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pose_, other->pose_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(timestamp_, other->timestamp_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(heading_, other->heading_);
  swap(kappa_, other->kappa_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(gear_, other->gear_);
  swap(driving_mode_, other->driving_mode_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(dt_, other->dt_);
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_vehicle_5fstate_2eproto);
  return ::file_level_metadata_vehicle_5fstate_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle_state
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vehicle_state::VehicleState* Arena::CreateMaybeMessage< ::vehicle_state::VehicleState >(Arena* arena) {
  return Arena::CreateInternal< ::vehicle_state::VehicleState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
