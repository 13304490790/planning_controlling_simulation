// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_config.proto

#include "vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencyParam_vehicle_5fconfig_2eproto;
namespace vehicle {
class LatencyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyParam> _instance;
} _LatencyParam_default_instance_;
class VehicleParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleParam> _instance;
} _VehicleParam_default_instance_;
}  // namespace vehicle
static void InitDefaultsLatencyParam_vehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vehicle::_LatencyParam_default_instance_;
    new (ptr) ::vehicle::LatencyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle::LatencyParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencyParam_vehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencyParam_vehicle_5fconfig_2eproto}, {}};

static void InitDefaultsVehicleParam_vehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vehicle::_VehicleParam_default_instance_;
    new (ptr) ::vehicle::VehicleParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle::VehicleParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleParam_vehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleParam_vehicle_5fconfig_2eproto}, {
      &scc_info_LatencyParam_vehicle_5fconfig_2eproto.base,}};

void InitDefaults_vehicle_5fconfig_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyParam_vehicle_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleParam_vehicle_5fconfig_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_vehicle_5fconfig_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fconfig_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fconfig_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_vehicle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, dead_time_),
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, rise_time_),
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, peak_time_),
  PROTOBUF_FIELD_OFFSET(::vehicle::LatencyParam, settling_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, front_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, back_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, left_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, right_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, length_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, width_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, height_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, min_turn_radius_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, max_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, max_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, min_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, steer_ratio_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, wheel_rolling_radius_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, max_abs_speed_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, brake_deadzone_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, throttle_deadzone_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, steering_latency_param_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, throttle_latency_param_),
  PROTOBUF_FIELD_OFFSET(::vehicle::VehicleParam, brake_latency_param_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  3,
  20,
  21,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::vehicle::LatencyParam)},
  { 13, 40, sizeof(::vehicle::VehicleParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle::_LatencyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle::_VehicleParam_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_vehicle_5fconfig_2eproto = {
  {}, AddDescriptors_vehicle_5fconfig_2eproto, "vehicle_config.proto", schemas,
  file_default_instances, TableStruct_vehicle_5fconfig_2eproto::offsets,
  file_level_metadata_vehicle_5fconfig_2eproto, 2, file_level_enum_descriptors_vehicle_5fconfig_2eproto, file_level_service_descriptors_vehicle_5fconfig_2eproto,
};

const char descriptor_table_protodef_vehicle_5fconfig_2eproto[] =
  "\n\024vehicle_config.proto\022\007vehicle\"^\n\014Laten"
  "cyParam\022\021\n\tdead_time\030\001 \001(\001\022\021\n\trise_time\030"
  "\002 \001(\001\022\021\n\tpeak_time\030\003 \001(\001\022\025\n\rsettling_tim"
  "e\030\004 \001(\001\"\203\006\n\014VehicleParam\022#\n\024front_edge_t"
  "o_center\030\003 \001(\001:\0053.524\022 \n\023back_edge_to_ce"
  "nter\030\004 \001(\001:\0031.2\022 \n\023left_edge_to_center\030\005"
  " \001(\001:\0031.1\022!\n\024right_edge_to_center\030\006 \001(\001:"
  "\0031.1\022\025\n\006length\030\007 \001(\001:\0054.724\022\022\n\005width\030\010 \001"
  "(\001:\0031.9\022\023\n\006height\030\t \001(\001:\0031.5\022\034\n\017min_turn"
  "_radius\030\n \001(\001:\0034.9\022\033\n\020max_acceleration\030\013"
  " \001(\001:\0018\022\034\n\020max_deceleration\030\014 \001(\001:\002-8\022\035\n"
  "\017max_steer_angle\030\r \001(\001:\0048.72\022%\n\024max_stee"
  "r_angle_rate\030\016 \001(\001:\0078.55211\022!\n\024min_steer"
  "_angle_rate\030\017 \001(\001:\003nan\022 \n\013steer_ratio\030\020 "
  "\001(\001:\01317.14335423\022\030\n\nwheel_base\030\021 \001(\001:\0042."
  "72\022!\n\024wheel_rolling_radius\030\022 \001(\001:\003nan\022\'\n"
  "\032max_abs_speed_when_stopped\030\023 \001(\002:\0030.1\022\033"
  "\n\016brake_deadzone\030\024 \001(\001:\003nan\022\036\n\021throttle_"
  "deadzone\030\025 \001(\001:\003nan\0225\n\026steering_latency_"
  "param\030\026 \001(\0132\025.vehicle.LatencyParam\0225\n\026th"
  "rottle_latency_param\030\027 \001(\0132\025.vehicle.Lat"
  "encyParam\0222\n\023brake_latency_param\030\030 \001(\0132\025"
  ".vehicle.LatencyParam"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_vehicle_5fconfig_2eproto = {
  false, InitDefaults_vehicle_5fconfig_2eproto, 
  descriptor_table_protodef_vehicle_5fconfig_2eproto,
  "vehicle_config.proto", &assign_descriptors_table_vehicle_5fconfig_2eproto, 901,
};

void AddDescriptors_vehicle_5fconfig_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_vehicle_5fconfig_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fconfig_2eproto = []() { AddDescriptors_vehicle_5fconfig_2eproto(); return true; }();
namespace vehicle {

// ===================================================================

void LatencyParam::InitAsDefaultInstance() {
}
class LatencyParam::HasBitSetters {
 public:
  static void set_has_dead_time(LatencyParam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rise_time(LatencyParam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_peak_time(LatencyParam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_settling_time(LatencyParam* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyParam::kDeadTimeFieldNumber;
const int LatencyParam::kRiseTimeFieldNumber;
const int LatencyParam::kPeakTimeFieldNumber;
const int LatencyParam::kSettlingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyParam::LatencyParam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:vehicle.LatencyParam)
}

void LatencyParam::SharedCtor() {
  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:vehicle.LatencyParam)
  SharedDtor();
}

void LatencyParam::SharedDtor() {
}

void LatencyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyParam& LatencyParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LatencyParam_vehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dead_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&settling_time_) -
        reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatencyParam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LatencyParam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double dead_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_dead_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double rise_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_rise_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double peak_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_peak_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double settling_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_settling_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatencyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle.LatencyParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dead_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_dead_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rise_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_rise_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rise_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double peak_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_peak_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double settling_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_settling_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settling_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle.LatencyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle.LatencyParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatencyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dead_time(), output);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rise_time(), output);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->peak_time(), output);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->settling_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle.LatencyParam)
}

::google::protobuf::uint8* LatencyParam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.LatencyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dead_time(), target);
  }

  // optional double rise_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rise_time(), target);
  }

  // optional double peak_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->peak_time(), target);
  }

  // optional double settling_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->settling_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.LatencyParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double dead_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rise_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double peak_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double settling_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyParam* source =
      ::google::protobuf::DynamicCastToGenerated<LatencyParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle.LatencyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle.LatencyParam)
    MergeFrom(*source);
  }
}

void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dead_time_ = from.dead_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rise_time_ = from.rise_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      peak_time_ = from.peak_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      settling_time_ = from.settling_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::Swap(LatencyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dead_time_, other->dead_time_);
  swap(rise_time_, other->rise_time_);
  swap(peak_time_, other->peak_time_);
  swap(settling_time_, other->settling_time_);
}

::google::protobuf::Metadata LatencyParam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_vehicle_5fconfig_2eproto);
  return ::file_level_metadata_vehicle_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
  ::vehicle::_VehicleParam_default_instance_._instance.get_mutable()->steering_latency_param_ = const_cast< ::vehicle::LatencyParam*>(
      ::vehicle::LatencyParam::internal_default_instance());
  ::vehicle::_VehicleParam_default_instance_._instance.get_mutable()->throttle_latency_param_ = const_cast< ::vehicle::LatencyParam*>(
      ::vehicle::LatencyParam::internal_default_instance());
  ::vehicle::_VehicleParam_default_instance_._instance.get_mutable()->brake_latency_param_ = const_cast< ::vehicle::LatencyParam*>(
      ::vehicle::LatencyParam::internal_default_instance());
}
class VehicleParam::HasBitSetters {
 public:
  static void set_has_front_edge_to_center(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_back_edge_to_center(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_left_edge_to_center(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_right_edge_to_center(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_length(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_width(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_height(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_min_turn_radius(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_max_acceleration(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_max_deceleration(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_max_steer_angle(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_max_steer_angle_rate(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_min_steer_angle_rate(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_steer_ratio(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_wheel_base(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_wheel_rolling_radius(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_max_abs_speed_when_stopped(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_brake_deadzone(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_throttle_deadzone(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static const ::vehicle::LatencyParam& steering_latency_param(const VehicleParam* msg);
  static void set_has_steering_latency_param(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::vehicle::LatencyParam& throttle_latency_param(const VehicleParam* msg);
  static void set_has_throttle_latency_param(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::vehicle::LatencyParam& brake_latency_param(const VehicleParam* msg);
  static void set_has_brake_latency_param(VehicleParam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::vehicle::LatencyParam&
VehicleParam::HasBitSetters::steering_latency_param(const VehicleParam* msg) {
  return *msg->steering_latency_param_;
}
const ::vehicle::LatencyParam&
VehicleParam::HasBitSetters::throttle_latency_param(const VehicleParam* msg) {
  return *msg->throttle_latency_param_;
}
const ::vehicle::LatencyParam&
VehicleParam::HasBitSetters::brake_latency_param(const VehicleParam* msg) {
  return *msg->brake_latency_param_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleParam::kFrontEdgeToCenterFieldNumber;
const int VehicleParam::kBackEdgeToCenterFieldNumber;
const int VehicleParam::kLeftEdgeToCenterFieldNumber;
const int VehicleParam::kRightEdgeToCenterFieldNumber;
const int VehicleParam::kLengthFieldNumber;
const int VehicleParam::kWidthFieldNumber;
const int VehicleParam::kHeightFieldNumber;
const int VehicleParam::kMinTurnRadiusFieldNumber;
const int VehicleParam::kMaxAccelerationFieldNumber;
const int VehicleParam::kMaxDecelerationFieldNumber;
const int VehicleParam::kMaxSteerAngleFieldNumber;
const int VehicleParam::kMaxSteerAngleRateFieldNumber;
const int VehicleParam::kMinSteerAngleRateFieldNumber;
const int VehicleParam::kSteerRatioFieldNumber;
const int VehicleParam::kWheelBaseFieldNumber;
const int VehicleParam::kWheelRollingRadiusFieldNumber;
const int VehicleParam::kMaxAbsSpeedWhenStoppedFieldNumber;
const int VehicleParam::kBrakeDeadzoneFieldNumber;
const int VehicleParam::kThrottleDeadzoneFieldNumber;
const int VehicleParam::kSteeringLatencyParamFieldNumber;
const int VehicleParam::kThrottleLatencyParamFieldNumber;
const int VehicleParam::kBrakeLatencyParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleParam::VehicleParam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_steering_latency_param()) {
    steering_latency_param_ = new ::vehicle::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = nullptr;
  }
  if (from.has_throttle_latency_param()) {
    throttle_latency_param_ = new ::vehicle::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = nullptr;
  }
  if (from.has_brake_latency_param()) {
    brake_latency_param_ = new ::vehicle::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = nullptr;
  }
  ::memcpy(&max_abs_speed_when_stopped_, &from.max_abs_speed_when_stopped_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
    reinterpret_cast<char*>(&max_abs_speed_when_stopped_)) + sizeof(throttle_deadzone_));
  // @@protoc_insertion_point(copy_constructor:vehicle.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VehicleParam_vehicle_5fconfig_2eproto.base);
  ::memset(&steering_latency_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_latency_param_) -
      reinterpret_cast<char*>(&steering_latency_param_)) + sizeof(brake_latency_param_));
  max_abs_speed_when_stopped_ = 0.1f;
  front_edge_to_center_ = 3.524;
  back_edge_to_center_ = 1.2;
  left_edge_to_center_ = 1.1;
  right_edge_to_center_ = 1.1;
  length_ = 4.724;
  width_ = 1.9;
  height_ = 1.5;
  min_turn_radius_ = 4.9;
  max_acceleration_ = 8;
  max_deceleration_ = -8;
  max_steer_angle_ = 8.72;
  max_steer_angle_rate_ = 8.55211;
  min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  steer_ratio_ = 17.14335423;
  wheel_base_ = 2.72;
  wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
  brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:vehicle.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam& VehicleParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VehicleParam_vehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(steering_latency_param_ != nullptr);
      steering_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(throttle_latency_param_ != nullptr);
      throttle_latency_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brake_latency_param_ != nullptr);
      brake_latency_param_->Clear();
    }
    max_abs_speed_when_stopped_ = 0.1f;
    front_edge_to_center_ = 3.524;
    back_edge_to_center_ = 1.2;
    left_edge_to_center_ = 1.1;
    right_edge_to_center_ = 1.1;
  }
  if (cached_has_bits & 0x0000ff00u) {
    length_ = 4.724;
    width_ = 1.9;
    height_ = 1.5;
    min_turn_radius_ = 4.9;
    max_acceleration_ = 8;
    max_deceleration_ = -8;
    max_steer_angle_ = 8.72;
    max_steer_angle_rate_ = 8.55211;
  }
  if (cached_has_bits & 0x003f0000u) {
    min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
    steer_ratio_ = 17.14335423;
    wheel_base_ = 2.72;
    wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
    brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
    throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleParam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VehicleParam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double front_edge_to_center = 3 [default = 3.524];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_front_edge_to_center(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double back_edge_to_center = 4 [default = 1.2];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_back_edge_to_center(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double left_edge_to_center = 5 [default = 1.1];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_left_edge_to_center(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double right_edge_to_center = 6 [default = 1.1];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_right_edge_to_center(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double length = 7 [default = 4.724];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_length(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double width = 8 [default = 1.9];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double height = 9 [default = 1.5];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_height(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double min_turn_radius = 10 [default = 4.9];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_min_turn_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_acceleration = 11 [default = 8];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_max_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_deceleration = 12 [default = -8];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_max_deceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_steer_angle = 13 [default = 8.72];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_max_steer_angle(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_steer_angle_rate = 14 [default = 8.55211];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_max_steer_angle_rate(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double min_steer_angle_rate = 15 [default = nan];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_min_steer_angle_rate(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double steer_ratio = 16 [default = 17.14335423];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_steer_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double wheel_base = 17 [default = 2.72];
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_wheel_base(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double wheel_rolling_radius = 18 [default = nan];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_wheel_rolling_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_max_abs_speed_when_stopped(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double brake_deadzone = 20 [default = nan];
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_brake_deadzone(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double throttle_deadzone = 21 [default = nan];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_throttle_deadzone(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .vehicle.LatencyParam steering_latency_param = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vehicle::LatencyParam::_InternalParse;
        object = msg->mutable_steering_latency_param();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .vehicle.LatencyParam throttle_latency_param = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vehicle::LatencyParam::_InternalParse;
        object = msg->mutable_throttle_latency_param();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .vehicle.LatencyParam brake_latency_param = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vehicle::LatencyParam::_InternalParse;
        object = msg->mutable_brake_latency_param();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle.VehicleParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double front_edge_to_center = 3 [default = 3.524];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_front_edge_to_center(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double back_edge_to_center = 4 [default = 1.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_back_edge_to_center(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left_edge_to_center = 5 [default = 1.1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_left_edge_to_center(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right_edge_to_center = 6 [default = 1.1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_right_edge_to_center(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_edge_to_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 7 [default = 4.724];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 8 [default = 1.9];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 9 [default = 1.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_turn_radius = 10 [default = 4.9];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_min_turn_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 11 [default = 8];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_max_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 12 [default = -8];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {
          HasBitSetters::set_has_max_deceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle = 13 [default = 8.72];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_max_steer_angle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steer_angle_rate = 14 [default = 8.55211];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {
          HasBitSetters::set_has_max_steer_angle_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_steer_angle_rate = 15 [default = nan];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_min_steer_angle_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_ratio = 16 [default = 17.14335423];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_steer_ratio(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_base = 17 [default = 2.72];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {
          HasBitSetters::set_has_wheel_base(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_rolling_radius = 18 [default = nan];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {
          HasBitSetters::set_has_wheel_rolling_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_rolling_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {
          HasBitSetters::set_has_max_abs_speed_when_stopped(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_abs_speed_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_deadzone = 20 [default = nan];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {
          HasBitSetters::set_has_brake_deadzone(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_deadzone = 21 [default = nan];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {
          HasBitSetters::set_has_throttle_deadzone(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_deadzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vehicle.LatencyParam steering_latency_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vehicle.LatencyParam throttle_latency_param = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_throttle_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vehicle.LatencyParam brake_latency_param = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_latency_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle.VehicleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle.VehicleParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double front_edge_to_center = 3 [default = 3.524];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_edge_to_center(), output);
  }

  // optional double back_edge_to_center = 4 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->back_edge_to_center(), output);
  }

  // optional double left_edge_to_center = 5 [default = 1.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->left_edge_to_center(), output);
  }

  // optional double right_edge_to_center = 6 [default = 1.1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_edge_to_center(), output);
  }

  // optional double length = 7 [default = 4.724];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double width = 8 [default = 1.9];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->width(), output);
  }

  // optional double height = 9 [default = 1.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->height(), output);
  }

  // optional double min_turn_radius = 10 [default = 4.9];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->min_turn_radius(), output);
  }

  // optional double max_acceleration = 11 [default = 8];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 12 [default = -8];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_deceleration(), output);
  }

  // optional double max_steer_angle = 13 [default = 8.72];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_steer_angle(), output);
  }

  // optional double max_steer_angle_rate = 14 [default = 8.55211];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_steer_angle_rate(), output);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->min_steer_angle_rate(), output);
  }

  // optional double steer_ratio = 16 [default = 17.14335423];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->steer_ratio(), output);
  }

  // optional double wheel_base = 17 [default = 2.72];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->wheel_base(), output);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->wheel_rolling_radius(), output);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->max_abs_speed_when_stopped(), output);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->brake_deadzone(), output);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->throttle_deadzone(), output);
  }

  // optional .vehicle.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::steering_latency_param(this), output);
  }

  // optional .vehicle.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::throttle_latency_param(this), output);
  }

  // optional .vehicle.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::brake_latency_param(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle.VehicleParam)
}

::google::protobuf::uint8* VehicleParam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.VehicleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double front_edge_to_center = 3 [default = 3.524];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_edge_to_center(), target);
  }

  // optional double back_edge_to_center = 4 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->back_edge_to_center(), target);
  }

  // optional double left_edge_to_center = 5 [default = 1.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->left_edge_to_center(), target);
  }

  // optional double right_edge_to_center = 6 [default = 1.1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_edge_to_center(), target);
  }

  // optional double length = 7 [default = 4.724];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double width = 8 [default = 1.9];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->width(), target);
  }

  // optional double height = 9 [default = 1.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->height(), target);
  }

  // optional double min_turn_radius = 10 [default = 4.9];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->min_turn_radius(), target);
  }

  // optional double max_acceleration = 11 [default = 8];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 12 [default = -8];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_deceleration(), target);
  }

  // optional double max_steer_angle = 13 [default = 8.72];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_steer_angle(), target);
  }

  // optional double max_steer_angle_rate = 14 [default = 8.55211];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_steer_angle_rate(), target);
  }

  // optional double min_steer_angle_rate = 15 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->min_steer_angle_rate(), target);
  }

  // optional double steer_ratio = 16 [default = 17.14335423];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->steer_ratio(), target);
  }

  // optional double wheel_base = 17 [default = 2.72];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->wheel_base(), target);
  }

  // optional double wheel_rolling_radius = 18 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->wheel_rolling_radius(), target);
  }

  // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->max_abs_speed_when_stopped(), target);
  }

  // optional double brake_deadzone = 20 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->brake_deadzone(), target);
  }

  // optional double throttle_deadzone = 21 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->throttle_deadzone(), target);
  }

  // optional .vehicle.LatencyParam steering_latency_param = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::steering_latency_param(this), target);
  }

  // optional .vehicle.LatencyParam throttle_latency_param = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::throttle_latency_param(this), target);
  }

  // optional .vehicle.LatencyParam brake_latency_param = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::brake_latency_param(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.VehicleParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .vehicle.LatencyParam steering_latency_param = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_latency_param_);
    }

    // optional .vehicle.LatencyParam throttle_latency_param = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *throttle_latency_param_);
    }

    // optional .vehicle.LatencyParam brake_latency_param = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_latency_param_);
    }

    // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional double front_edge_to_center = 3 [default = 3.524];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double back_edge_to_center = 4 [default = 1.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double left_edge_to_center = 5 [default = 1.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double right_edge_to_center = 6 [default = 1.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double length = 7 [default = 4.724];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double width = 8 [default = 1.9];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double height = 9 [default = 1.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double min_turn_radius = 10 [default = 4.9];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 11 [default = 8];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double max_deceleration = 12 [default = -8];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle = 13 [default = 8.72];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double max_steer_angle_rate = 14 [default = 8.55211];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double min_steer_angle_rate = 15 [default = nan];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double steer_ratio = 16 [default = 17.14335423];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double wheel_base = 17 [default = 2.72];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double wheel_rolling_radius = 18 [default = nan];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double brake_deadzone = 20 [default = nan];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_deadzone = 21 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::google::protobuf::DynamicCastToGenerated<VehicleParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle.VehicleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_steering_latency_param()->::vehicle::LatencyParam::MergeFrom(from.steering_latency_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_throttle_latency_param()->::vehicle::LatencyParam::MergeFrom(from.throttle_latency_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brake_latency_param()->::vehicle::LatencyParam::MergeFrom(from.brake_latency_param());
    }
    if (cached_has_bits & 0x00000008u) {
      max_abs_speed_when_stopped_ = from.max_abs_speed_when_stopped_;
    }
    if (cached_has_bits & 0x00000010u) {
      front_edge_to_center_ = from.front_edge_to_center_;
    }
    if (cached_has_bits & 0x00000020u) {
      back_edge_to_center_ = from.back_edge_to_center_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_edge_to_center_ = from.left_edge_to_center_;
    }
    if (cached_has_bits & 0x00000080u) {
      right_edge_to_center_ = from.right_edge_to_center_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000400u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_turn_radius_ = from.min_turn_radius_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_steer_angle_ = from.max_steer_angle_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_steer_angle_rate_ = from.max_steer_angle_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_steer_angle_rate_ = from.min_steer_angle_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      steer_ratio_ = from.steer_ratio_;
    }
    if (cached_has_bits & 0x00040000u) {
      wheel_base_ = from.wheel_base_;
    }
    if (cached_has_bits & 0x00080000u) {
      wheel_rolling_radius_ = from.wheel_rolling_radius_;
    }
    if (cached_has_bits & 0x00100000u) {
      brake_deadzone_ = from.brake_deadzone_;
    }
    if (cached_has_bits & 0x00200000u) {
      throttle_deadzone_ = from.throttle_deadzone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::Swap(VehicleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steering_latency_param_, other->steering_latency_param_);
  swap(throttle_latency_param_, other->throttle_latency_param_);
  swap(brake_latency_param_, other->brake_latency_param_);
  swap(max_abs_speed_when_stopped_, other->max_abs_speed_when_stopped_);
  swap(front_edge_to_center_, other->front_edge_to_center_);
  swap(back_edge_to_center_, other->back_edge_to_center_);
  swap(left_edge_to_center_, other->left_edge_to_center_);
  swap(right_edge_to_center_, other->right_edge_to_center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_turn_radius_, other->min_turn_radius_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_steer_angle_, other->max_steer_angle_);
  swap(max_steer_angle_rate_, other->max_steer_angle_rate_);
  swap(min_steer_angle_rate_, other->min_steer_angle_rate_);
  swap(steer_ratio_, other->steer_ratio_);
  swap(wheel_base_, other->wheel_base_);
  swap(wheel_rolling_radius_, other->wheel_rolling_radius_);
  swap(brake_deadzone_, other->brake_deadzone_);
  swap(throttle_deadzone_, other->throttle_deadzone_);
}

::google::protobuf::Metadata VehicleParam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_vehicle_5fconfig_2eproto);
  return ::file_level_metadata_vehicle_5fconfig_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vehicle::LatencyParam* Arena::CreateMaybeMessage< ::vehicle::LatencyParam >(Arena* arena) {
  return Arena::CreateInternal< ::vehicle::LatencyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::VehicleParam* Arena::CreateMaybeMessage< ::vehicle::VehicleParam >(Arena* arena) {
  return Arena::CreateInternal< ::vehicle::VehicleParam >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
