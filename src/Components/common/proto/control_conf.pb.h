// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_conf.proto

#ifndef PROTOBUF_INCLUDED_control_5fconf_2eproto
#define PROTOBUF_INCLUDED_control_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "chassis.pb.h"
#include "lat_controller_conf.pb.h"
#include "lon_controller_conf.pb.h"
#include "mpc_controller_conf.pb.h"
#include "simple_pid_lat_lon_controller_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fconf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fconf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_control_5fconf_2eproto();
namespace controller {
class ControlConf;
class ControlConfDefaultTypeInternal;
extern ControlConfDefaultTypeInternal _ControlConf_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::ControlConf* Arena::CreateMaybeMessage<::controller::ControlConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

enum ControlConf_ControllerType {
  ControlConf_ControllerType_LAT_CONTROLLER = 0,
  ControlConf_ControllerType_LON_CONTROLLER = 1,
  ControlConf_ControllerType_MPC_CONTROLLER = 2
};
bool ControlConf_ControllerType_IsValid(int value);
const ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MIN = ControlConf_ControllerType_LAT_CONTROLLER;
const ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MAX = ControlConf_ControllerType_MPC_CONTROLLER;
const int ControlConf_ControllerType_ControllerType_ARRAYSIZE = ControlConf_ControllerType_ControllerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor();
inline const ::std::string& ControlConf_ControllerType_Name(ControlConf_ControllerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlConf_ControllerType_descriptor(), value);
}
inline bool ControlConf_ControllerType_Parse(
    const ::std::string& name, ControlConf_ControllerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlConf_ControllerType>(
    ControlConf_ControllerType_descriptor(), name, value);
}
enum DrivingAction {
  STOP = 0,
  START = 1,
  RESET = 2
};
bool DrivingAction_IsValid(int value);
const DrivingAction DrivingAction_MIN = STOP;
const DrivingAction DrivingAction_MAX = RESET;
const int DrivingAction_ARRAYSIZE = DrivingAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrivingAction_descriptor();
inline const ::std::string& DrivingAction_Name(DrivingAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrivingAction_descriptor(), value);
}
inline bool DrivingAction_Parse(
    const ::std::string& name, DrivingAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrivingAction>(
    DrivingAction_descriptor(), name, value);
}
// ===================================================================

class ControlConf :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.ControlConf) */ {
 public:
  ControlConf();
  virtual ~ControlConf();

  ControlConf(const ControlConf& from);

  inline ControlConf& operator=(const ControlConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlConf(ControlConf&& from) noexcept
    : ControlConf() {
    *this = ::std::move(from);
  }

  inline ControlConf& operator=(ControlConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ControlConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlConf* internal_default_instance() {
    return reinterpret_cast<const ControlConf*>(
               &_ControlConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlConf* other);
  friend void swap(ControlConf& a, ControlConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlConf* New() const final {
    return CreateMaybeMessage<ControlConf>(nullptr);
  }

  ControlConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlConf& from);
  void MergeFrom(const ControlConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlConf_ControllerType ControllerType;
  static const ControllerType LAT_CONTROLLER =
    ControlConf_ControllerType_LAT_CONTROLLER;
  static const ControllerType LON_CONTROLLER =
    ControlConf_ControllerType_LON_CONTROLLER;
  static const ControllerType MPC_CONTROLLER =
    ControlConf_ControllerType_MPC_CONTROLLER;
  static inline bool ControllerType_IsValid(int value) {
    return ControlConf_ControllerType_IsValid(value);
  }
  static const ControllerType ControllerType_MIN =
    ControlConf_ControllerType_ControllerType_MIN;
  static const ControllerType ControllerType_MAX =
    ControlConf_ControllerType_ControllerType_MAX;
  static const int ControllerType_ARRAYSIZE =
    ControlConf_ControllerType_ControllerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControllerType_descriptor() {
    return ControlConf_ControllerType_descriptor();
  }
  static inline const ::std::string& ControllerType_Name(ControllerType value) {
    return ControlConf_ControllerType_Name(value);
  }
  static inline bool ControllerType_Parse(const ::std::string& name,
      ControllerType* value) {
    return ControlConf_ControllerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .controller.ControlConf.ControllerType active_controllers = 25;
  int active_controllers_size() const;
  void clear_active_controllers();
  static const int kActiveControllersFieldNumber = 25;
  ::controller::ControlConf_ControllerType active_controllers(int index) const;
  void set_active_controllers(int index, ::controller::ControlConf_ControllerType value);
  void add_active_controllers(::controller::ControlConf_ControllerType value);
  const ::google::protobuf::RepeatedField<int>& active_controllers() const;
  ::google::protobuf::RepeatedField<int>* mutable_active_controllers();

  // optional .controller.LatControllerConf lat_controller_conf = 28;
  bool has_lat_controller_conf() const;
  void clear_lat_controller_conf();
  static const int kLatControllerConfFieldNumber = 28;
  const ::controller::LatControllerConf& lat_controller_conf() const;
  ::controller::LatControllerConf* release_lat_controller_conf();
  ::controller::LatControllerConf* mutable_lat_controller_conf();
  void set_allocated_lat_controller_conf(::controller::LatControllerConf* lat_controller_conf);

  // optional .controller.LonControllerConf lon_controller_conf = 29;
  bool has_lon_controller_conf() const;
  void clear_lon_controller_conf();
  static const int kLonControllerConfFieldNumber = 29;
  const ::controller::LonControllerConf& lon_controller_conf() const;
  ::controller::LonControllerConf* release_lon_controller_conf();
  ::controller::LonControllerConf* mutable_lon_controller_conf();
  void set_allocated_lon_controller_conf(::controller::LonControllerConf* lon_controller_conf);

  // optional .controller.MPCControllerConf mpc_controller_conf = 34;
  bool has_mpc_controller_conf() const;
  void clear_mpc_controller_conf();
  static const int kMpcControllerConfFieldNumber = 34;
  const ::controller::MPCControllerConf& mpc_controller_conf() const;
  ::controller::MPCControllerConf* release_mpc_controller_conf();
  ::controller::MPCControllerConf* mutable_mpc_controller_conf();
  void set_allocated_mpc_controller_conf(::controller::MPCControllerConf* mpc_controller_conf);

  // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
  bool has_simple_pid_lat_lon_controller_conf() const;
  void clear_simple_pid_lat_lon_controller_conf();
  static const int kSimplePidLatLonControllerConfFieldNumber = 38;
  const ::controller::SimplePIDLatLonControllerConf& simple_pid_lat_lon_controller_conf() const;
  ::controller::SimplePIDLatLonControllerConf* release_simple_pid_lat_lon_controller_conf();
  ::controller::SimplePIDLatLonControllerConf* mutable_simple_pid_lat_lon_controller_conf();
  void set_allocated_simple_pid_lat_lon_controller_conf(::controller::SimplePIDLatLonControllerConf* simple_pid_lat_lon_controller_conf);

  // optional bool enable_csv_debug = 2 [default = false];
  bool has_enable_csv_debug() const;
  void clear_enable_csv_debug();
  static const int kEnableCsvDebugFieldNumber = 2;
  bool enable_csv_debug() const;
  void set_enable_csv_debug(bool value);

  // optional bool enable_speed_station_preview = 3 [default = false];
  bool has_enable_speed_station_preview() const;
  void clear_enable_speed_station_preview();
  static const int kEnableSpeedStationPreviewFieldNumber = 3;
  bool enable_speed_station_preview() const;
  void set_enable_speed_station_preview(bool value);

  // optional bool is_control_test_mode = 4 [default = false];
  bool has_is_control_test_mode() const;
  void clear_is_control_test_mode();
  static const int kIsControlTestModeFieldNumber = 4;
  bool is_control_test_mode() const;
  void set_is_control_test_mode(bool value);

  // optional bool use_preview_speed_for_table = 5 [default = false];
  bool has_use_preview_speed_for_table() const;
  void clear_use_preview_speed_for_table();
  static const int kUsePreviewSpeedForTableFieldNumber = 5;
  bool use_preview_speed_for_table() const;
  void set_use_preview_speed_for_table(bool value);

  // optional bool enable_input_timestamp_check = 6 [default = false];
  bool has_enable_input_timestamp_check() const;
  void clear_enable_input_timestamp_check();
  static const int kEnableInputTimestampCheckFieldNumber = 6;
  bool enable_input_timestamp_check() const;
  void set_enable_input_timestamp_check(bool value);

  // optional bool enable_slope_offset = 14 [default = false];
  bool has_enable_slope_offset() const;
  void clear_enable_slope_offset();
  static const int kEnableSlopeOffsetFieldNumber = 14;
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);

  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  bool has_enable_navigation_mode_error_filter() const;
  void clear_enable_navigation_mode_error_filter();
  static const int kEnableNavigationModeErrorFilterFieldNumber = 16;
  bool enable_navigation_mode_error_filter() const;
  void set_enable_navigation_mode_error_filter(bool value);

  // optional .canbus.Chassis.DrivingMode driving_mode = 22;
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 22;
  ::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::canbus::Chassis_DrivingMode value);

  // optional .controller.DrivingAction action = 23;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 23;
  ::controller::DrivingAction action() const;
  void set_action(::controller::DrivingAction value);

  // optional double soft_estop_brake = 24;
  bool has_soft_estop_brake() const;
  void clear_soft_estop_brake();
  static const int kSoftEstopBrakeFieldNumber = 24;
  double soft_estop_brake() const;
  void set_soft_estop_brake(double value);

  // optional double max_status_interval_sec = 27;
  bool has_max_status_interval_sec() const;
  void clear_max_status_interval_sec();
  static const int kMaxStatusIntervalSecFieldNumber = 27;
  double max_status_interval_sec() const;
  void set_max_status_interval_sec(double value);

  // optional double trajectory_period = 30;
  bool has_trajectory_period() const;
  void clear_trajectory_period();
  static const int kTrajectoryPeriodFieldNumber = 30;
  double trajectory_period() const;
  void set_trajectory_period(double value);

  // optional double chassis_period = 31;
  bool has_chassis_period() const;
  void clear_chassis_period();
  static const int kChassisPeriodFieldNumber = 31;
  double chassis_period() const;
  void set_chassis_period(double value);

  // optional double localization_period = 32;
  bool has_localization_period() const;
  void clear_localization_period();
  static const int kLocalizationPeriodFieldNumber = 32;
  double localization_period() const;
  void set_localization_period(double value);

  // optional double minimum_speed_resolution = 33;
  bool has_minimum_speed_resolution() const;
  void clear_minimum_speed_resolution();
  static const int kMinimumSpeedResolutionFieldNumber = 33;
  double minimum_speed_resolution() const;
  void set_minimum_speed_resolution(double value);

  // optional double query_relative_time = 35;
  bool has_query_relative_time() const;
  void clear_query_relative_time();
  static const int kQueryRelativeTimeFieldNumber = 35;
  double query_relative_time() const;
  void set_query_relative_time(double value);

  // optional double minimum_speed_protection = 36;
  bool has_minimum_speed_protection() const;
  void clear_minimum_speed_protection();
  static const int kMinimumSpeedProtectionFieldNumber = 36;
  double minimum_speed_protection() const;
  void set_minimum_speed_protection(double value);

  // optional int32 max_steering_percentage_allowed = 26;
  bool has_max_steering_percentage_allowed() const;
  void clear_max_steering_percentage_allowed();
  static const int kMaxSteeringPercentageAllowedFieldNumber = 26;
  ::google::protobuf::int32 max_steering_percentage_allowed() const;
  void set_max_steering_percentage_allowed(::google::protobuf::int32 value);

  // optional double control_test_duration = 1 [default = -1];
  bool has_control_test_duration() const;
  void clear_control_test_duration();
  static const int kControlTestDurationFieldNumber = 1;
  double control_test_duration() const;
  void set_control_test_duration(double value);

  // optional int32 max_localization_miss_num = 7 [default = 20];
  bool has_max_localization_miss_num() const;
  void clear_max_localization_miss_num();
  static const int kMaxLocalizationMissNumFieldNumber = 7;
  ::google::protobuf::int32 max_localization_miss_num() const;
  void set_max_localization_miss_num(::google::protobuf::int32 value);

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  bool has_max_chassis_miss_num() const;
  void clear_max_chassis_miss_num();
  static const int kMaxChassisMissNumFieldNumber = 8;
  ::google::protobuf::int32 max_chassis_miss_num() const;
  void set_max_chassis_miss_num(::google::protobuf::int32 value);

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  bool has_max_acceleration_when_stopped() const;
  void clear_max_acceleration_when_stopped();
  static const int kMaxAccelerationWhenStoppedFieldNumber = 10;
  double max_acceleration_when_stopped() const;
  void set_max_acceleration_when_stopped(double value);

  // optional double steer_angle_rate = 11 [default = 100];
  bool has_steer_angle_rate() const;
  void clear_steer_angle_rate();
  static const int kSteerAngleRateFieldNumber = 11;
  double steer_angle_rate() const;
  void set_steer_angle_rate(double value);

  // optional int32 max_planning_miss_num = 9 [default = 20];
  bool has_max_planning_miss_num() const;
  void clear_max_planning_miss_num();
  static const int kMaxPlanningMissNumFieldNumber = 9;
  ::google::protobuf::int32 max_planning_miss_num() const;
  void set_max_planning_miss_num(::google::protobuf::int32 value);

  // optional bool enable_gain_scheduler = 12 [default = true];
  bool has_enable_gain_scheduler() const;
  void clear_enable_gain_scheduler();
  static const int kEnableGainSchedulerFieldNumber = 12;
  bool enable_gain_scheduler() const;
  void set_enable_gain_scheduler(bool value);

  // optional bool set_steer_limit = 13 [default = true];
  bool has_set_steer_limit() const;
  void clear_set_steer_limit();
  static const int kSetSteerLimitFieldNumber = 13;
  bool set_steer_limit() const;
  void set_set_steer_limit(bool value);

  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  bool has_enable_navigation_mode_position_update() const;
  void clear_enable_navigation_mode_position_update();
  static const int kEnableNavigationModePositionUpdateFieldNumber = 17;
  bool enable_navigation_mode_position_update() const;
  void set_enable_navigation_mode_position_update(bool value);

  // optional bool enable_persistent_estop = 18 [default = true];
  bool has_enable_persistent_estop() const;
  void clear_enable_persistent_estop();
  static const int kEnablePersistentEstopFieldNumber = 18;
  bool enable_persistent_estop() const;
  void set_enable_persistent_estop(bool value);

  // optional double lock_steer_speed = 15 [default = 0.081];
  bool has_lock_steer_speed() const;
  void clear_lock_steer_speed();
  static const int kLockSteerSpeedFieldNumber = 15;
  double lock_steer_speed() const;
  void set_lock_steer_speed(double value);

  // optional double control_period = 19 [default = 0.01];
  bool has_control_period() const;
  void clear_control_period();
  static const int kControlPeriodFieldNumber = 19;
  double control_period() const;
  void set_control_period(double value);

  // optional double max_planning_interval_sec = 20 [default = 0.2];
  bool has_max_planning_interval_sec() const;
  void clear_max_planning_interval_sec();
  static const int kMaxPlanningIntervalSecFieldNumber = 20;
  double max_planning_interval_sec() const;
  void set_max_planning_interval_sec(double value);

  // optional double max_planning_delay_threshold = 21 [default = 4];
  bool has_max_planning_delay_threshold() const;
  void clear_max_planning_delay_threshold();
  static const int kMaxPlanningDelayThresholdFieldNumber = 21;
  double max_planning_delay_threshold() const;
  void set_max_planning_delay_threshold(double value);

  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  bool has_max_path_remain_when_stopped() const;
  void clear_max_path_remain_when_stopped();
  static const int kMaxPathRemainWhenStoppedFieldNumber = 37;
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);

  // @@protoc_insertion_point(class_scope:controller.ControlConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> active_controllers_;
  ::controller::LatControllerConf* lat_controller_conf_;
  ::controller::LonControllerConf* lon_controller_conf_;
  ::controller::MPCControllerConf* mpc_controller_conf_;
  ::controller::SimplePIDLatLonControllerConf* simple_pid_lat_lon_controller_conf_;
  bool enable_csv_debug_;
  bool enable_speed_station_preview_;
  bool is_control_test_mode_;
  bool use_preview_speed_for_table_;
  bool enable_input_timestamp_check_;
  bool enable_slope_offset_;
  bool enable_navigation_mode_error_filter_;
  int driving_mode_;
  int action_;
  double soft_estop_brake_;
  double max_status_interval_sec_;
  double trajectory_period_;
  double chassis_period_;
  double localization_period_;
  double minimum_speed_resolution_;
  double query_relative_time_;
  double minimum_speed_protection_;
  ::google::protobuf::int32 max_steering_percentage_allowed_;
  double control_test_duration_;
  ::google::protobuf::int32 max_localization_miss_num_;
  ::google::protobuf::int32 max_chassis_miss_num_;
  double max_acceleration_when_stopped_;
  double steer_angle_rate_;
  ::google::protobuf::int32 max_planning_miss_num_;
  bool enable_gain_scheduler_;
  bool set_steer_limit_;
  bool enable_navigation_mode_position_update_;
  bool enable_persistent_estop_;
  double lock_steer_speed_;
  double control_period_;
  double max_planning_interval_sec_;
  double max_planning_delay_threshold_;
  double max_path_remain_when_stopped_;
  friend struct ::TableStruct_control_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlConf

// optional double control_test_duration = 1 [default = -1];
inline bool ControlConf::has_control_test_duration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ControlConf::clear_control_test_duration() {
  control_test_duration_ = -1;
  _has_bits_[0] &= ~0x00400000u;
}
inline double ControlConf::control_test_duration() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.control_test_duration)
  return control_test_duration_;
}
inline void ControlConf::set_control_test_duration(double value) {
  _has_bits_[0] |= 0x00400000u;
  control_test_duration_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.control_test_duration)
}

// optional bool enable_csv_debug = 2 [default = false];
inline bool ControlConf::has_enable_csv_debug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControlConf::clear_enable_csv_debug() {
  enable_csv_debug_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ControlConf::enable_csv_debug() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_csv_debug)
  return enable_csv_debug_;
}
inline void ControlConf::set_enable_csv_debug(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_csv_debug_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_csv_debug)
}

// optional bool enable_speed_station_preview = 3 [default = false];
inline bool ControlConf::has_enable_speed_station_preview() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ControlConf::clear_enable_speed_station_preview() {
  enable_speed_station_preview_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ControlConf::enable_speed_station_preview() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_speed_station_preview)
  return enable_speed_station_preview_;
}
inline void ControlConf::set_enable_speed_station_preview(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_speed_station_preview_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_speed_station_preview)
}

// optional bool is_control_test_mode = 4 [default = false];
inline bool ControlConf::has_is_control_test_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ControlConf::clear_is_control_test_mode() {
  is_control_test_mode_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ControlConf::is_control_test_mode() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.is_control_test_mode)
  return is_control_test_mode_;
}
inline void ControlConf::set_is_control_test_mode(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_control_test_mode_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.is_control_test_mode)
}

// optional bool use_preview_speed_for_table = 5 [default = false];
inline bool ControlConf::has_use_preview_speed_for_table() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ControlConf::clear_use_preview_speed_for_table() {
  use_preview_speed_for_table_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ControlConf::use_preview_speed_for_table() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.use_preview_speed_for_table)
  return use_preview_speed_for_table_;
}
inline void ControlConf::set_use_preview_speed_for_table(bool value) {
  _has_bits_[0] |= 0x00000080u;
  use_preview_speed_for_table_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.use_preview_speed_for_table)
}

// optional bool enable_input_timestamp_check = 6 [default = false];
inline bool ControlConf::has_enable_input_timestamp_check() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ControlConf::clear_enable_input_timestamp_check() {
  enable_input_timestamp_check_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ControlConf::enable_input_timestamp_check() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_input_timestamp_check)
  return enable_input_timestamp_check_;
}
inline void ControlConf::set_enable_input_timestamp_check(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enable_input_timestamp_check_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_input_timestamp_check)
}

// optional int32 max_localization_miss_num = 7 [default = 20];
inline bool ControlConf::has_max_localization_miss_num() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ControlConf::clear_max_localization_miss_num() {
  max_localization_miss_num_ = 20;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::int32 ControlConf::max_localization_miss_num() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_localization_miss_num)
  return max_localization_miss_num_;
}
inline void ControlConf::set_max_localization_miss_num(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  max_localization_miss_num_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_localization_miss_num)
}

// optional int32 max_chassis_miss_num = 8 [default = 20];
inline bool ControlConf::has_max_chassis_miss_num() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ControlConf::clear_max_chassis_miss_num() {
  max_chassis_miss_num_ = 20;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::int32 ControlConf::max_chassis_miss_num() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_chassis_miss_num)
  return max_chassis_miss_num_;
}
inline void ControlConf::set_max_chassis_miss_num(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  max_chassis_miss_num_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_chassis_miss_num)
}

// optional int32 max_planning_miss_num = 9 [default = 20];
inline bool ControlConf::has_max_planning_miss_num() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ControlConf::clear_max_planning_miss_num() {
  max_planning_miss_num_ = 20;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::int32 ControlConf::max_planning_miss_num() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_planning_miss_num)
  return max_planning_miss_num_;
}
inline void ControlConf::set_max_planning_miss_num(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  max_planning_miss_num_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_planning_miss_num)
}

// optional double max_acceleration_when_stopped = 10 [default = 0.01];
inline bool ControlConf::has_max_acceleration_when_stopped() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ControlConf::clear_max_acceleration_when_stopped() {
  max_acceleration_when_stopped_ = 0.01;
  _has_bits_[0] &= ~0x02000000u;
}
inline double ControlConf::max_acceleration_when_stopped() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_acceleration_when_stopped)
  return max_acceleration_when_stopped_;
}
inline void ControlConf::set_max_acceleration_when_stopped(double value) {
  _has_bits_[0] |= 0x02000000u;
  max_acceleration_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_acceleration_when_stopped)
}

// optional double steer_angle_rate = 11 [default = 100];
inline bool ControlConf::has_steer_angle_rate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ControlConf::clear_steer_angle_rate() {
  steer_angle_rate_ = 100;
  _has_bits_[0] &= ~0x04000000u;
}
inline double ControlConf::steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.steer_angle_rate)
  return steer_angle_rate_;
}
inline void ControlConf::set_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x04000000u;
  steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.steer_angle_rate)
}

// optional bool enable_gain_scheduler = 12 [default = true];
inline bool ControlConf::has_enable_gain_scheduler() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ControlConf::clear_enable_gain_scheduler() {
  enable_gain_scheduler_ = true;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ControlConf::enable_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_gain_scheduler)
  return enable_gain_scheduler_;
}
inline void ControlConf::set_enable_gain_scheduler(bool value) {
  _has_bits_[0] |= 0x10000000u;
  enable_gain_scheduler_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_gain_scheduler)
}

// optional bool set_steer_limit = 13 [default = true];
inline bool ControlConf::has_set_steer_limit() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ControlConf::clear_set_steer_limit() {
  set_steer_limit_ = true;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ControlConf::set_steer_limit() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.set_steer_limit)
  return set_steer_limit_;
}
inline void ControlConf::set_set_steer_limit(bool value) {
  _has_bits_[0] |= 0x20000000u;
  set_steer_limit_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.set_steer_limit)
}

// optional bool enable_slope_offset = 14 [default = false];
inline bool ControlConf::has_enable_slope_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ControlConf::clear_enable_slope_offset() {
  enable_slope_offset_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ControlConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_slope_offset)
  return enable_slope_offset_;
}
inline void ControlConf::set_enable_slope_offset(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enable_slope_offset_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_slope_offset)
}

// optional double lock_steer_speed = 15 [default = 0.081];
inline bool ControlConf::has_lock_steer_speed() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ControlConf::clear_lock_steer_speed() {
  lock_steer_speed_ = 0.081;
  _has_bits_[1] &= ~0x00000001u;
}
inline double ControlConf::lock_steer_speed() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.lock_steer_speed)
  return lock_steer_speed_;
}
inline void ControlConf::set_lock_steer_speed(double value) {
  _has_bits_[1] |= 0x00000001u;
  lock_steer_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.lock_steer_speed)
}

// optional bool enable_navigation_mode_error_filter = 16 [default = false];
inline bool ControlConf::has_enable_navigation_mode_error_filter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ControlConf::clear_enable_navigation_mode_error_filter() {
  enable_navigation_mode_error_filter_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ControlConf::enable_navigation_mode_error_filter() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_navigation_mode_error_filter)
  return enable_navigation_mode_error_filter_;
}
inline void ControlConf::set_enable_navigation_mode_error_filter(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enable_navigation_mode_error_filter_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_navigation_mode_error_filter)
}

// optional bool enable_navigation_mode_position_update = 17 [default = true];
inline bool ControlConf::has_enable_navigation_mode_position_update() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ControlConf::clear_enable_navigation_mode_position_update() {
  enable_navigation_mode_position_update_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ControlConf::enable_navigation_mode_position_update() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_navigation_mode_position_update)
  return enable_navigation_mode_position_update_;
}
inline void ControlConf::set_enable_navigation_mode_position_update(bool value) {
  _has_bits_[0] |= 0x40000000u;
  enable_navigation_mode_position_update_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_navigation_mode_position_update)
}

// optional bool enable_persistent_estop = 18 [default = true];
inline bool ControlConf::has_enable_persistent_estop() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ControlConf::clear_enable_persistent_estop() {
  enable_persistent_estop_ = true;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ControlConf::enable_persistent_estop() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.enable_persistent_estop)
  return enable_persistent_estop_;
}
inline void ControlConf::set_enable_persistent_estop(bool value) {
  _has_bits_[0] |= 0x80000000u;
  enable_persistent_estop_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.enable_persistent_estop)
}

// optional double control_period = 19 [default = 0.01];
inline bool ControlConf::has_control_period() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ControlConf::clear_control_period() {
  control_period_ = 0.01;
  _has_bits_[1] &= ~0x00000002u;
}
inline double ControlConf::control_period() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.control_period)
  return control_period_;
}
inline void ControlConf::set_control_period(double value) {
  _has_bits_[1] |= 0x00000002u;
  control_period_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.control_period)
}

// optional double max_planning_interval_sec = 20 [default = 0.2];
inline bool ControlConf::has_max_planning_interval_sec() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ControlConf::clear_max_planning_interval_sec() {
  max_planning_interval_sec_ = 0.2;
  _has_bits_[1] &= ~0x00000004u;
}
inline double ControlConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_planning_interval_sec)
  return max_planning_interval_sec_;
}
inline void ControlConf::set_max_planning_interval_sec(double value) {
  _has_bits_[1] |= 0x00000004u;
  max_planning_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_planning_interval_sec)
}

// optional double max_planning_delay_threshold = 21 [default = 4];
inline bool ControlConf::has_max_planning_delay_threshold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ControlConf::clear_max_planning_delay_threshold() {
  max_planning_delay_threshold_ = 4;
  _has_bits_[1] &= ~0x00000008u;
}
inline double ControlConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_planning_delay_threshold)
  return max_planning_delay_threshold_;
}
inline void ControlConf::set_max_planning_delay_threshold(double value) {
  _has_bits_[1] |= 0x00000008u;
  max_planning_delay_threshold_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_planning_delay_threshold)
}

// optional .canbus.Chassis.DrivingMode driving_mode = 22;
inline bool ControlConf::has_driving_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ControlConf::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::canbus::Chassis_DrivingMode ControlConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.driving_mode)
  return static_cast< ::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void ControlConf::set_driving_mode(::canbus::Chassis_DrivingMode value) {
  assert(::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.driving_mode)
}

// optional .controller.DrivingAction action = 23;
inline bool ControlConf::has_action() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ControlConf::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::controller::DrivingAction ControlConf::action() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.action)
  return static_cast< ::controller::DrivingAction >(action_);
}
inline void ControlConf::set_action(::controller::DrivingAction value) {
  assert(::controller::DrivingAction_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  action_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.action)
}

// optional double soft_estop_brake = 24;
inline bool ControlConf::has_soft_estop_brake() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ControlConf::clear_soft_estop_brake() {
  soft_estop_brake_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double ControlConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.soft_estop_brake)
  return soft_estop_brake_;
}
inline void ControlConf::set_soft_estop_brake(double value) {
  _has_bits_[0] |= 0x00002000u;
  soft_estop_brake_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.soft_estop_brake)
}

// repeated .controller.ControlConf.ControllerType active_controllers = 25;
inline int ControlConf::active_controllers_size() const {
  return active_controllers_.size();
}
inline void ControlConf::clear_active_controllers() {
  active_controllers_.Clear();
}
inline ::controller::ControlConf_ControllerType ControlConf::active_controllers(int index) const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.active_controllers)
  return static_cast< ::controller::ControlConf_ControllerType >(active_controllers_.Get(index));
}
inline void ControlConf::set_active_controllers(int index, ::controller::ControlConf_ControllerType value) {
  assert(::controller::ControlConf_ControllerType_IsValid(value));
  active_controllers_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.ControlConf.active_controllers)
}
inline void ControlConf::add_active_controllers(::controller::ControlConf_ControllerType value) {
  assert(::controller::ControlConf_ControllerType_IsValid(value));
  active_controllers_.Add(value);
  // @@protoc_insertion_point(field_add:controller.ControlConf.active_controllers)
}
inline const ::google::protobuf::RepeatedField<int>&
ControlConf::active_controllers() const {
  // @@protoc_insertion_point(field_list:controller.ControlConf.active_controllers)
  return active_controllers_;
}
inline ::google::protobuf::RepeatedField<int>*
ControlConf::mutable_active_controllers() {
  // @@protoc_insertion_point(field_mutable_list:controller.ControlConf.active_controllers)
  return &active_controllers_;
}

// optional int32 max_steering_percentage_allowed = 26;
inline bool ControlConf::has_max_steering_percentage_allowed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ControlConf::clear_max_steering_percentage_allowed() {
  max_steering_percentage_allowed_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::int32 ControlConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_steering_percentage_allowed)
  return max_steering_percentage_allowed_;
}
inline void ControlConf::set_max_steering_percentage_allowed(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  max_steering_percentage_allowed_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_steering_percentage_allowed)
}

// optional double max_status_interval_sec = 27;
inline bool ControlConf::has_max_status_interval_sec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ControlConf::clear_max_status_interval_sec() {
  max_status_interval_sec_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double ControlConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_status_interval_sec)
  return max_status_interval_sec_;
}
inline void ControlConf::set_max_status_interval_sec(double value) {
  _has_bits_[0] |= 0x00004000u;
  max_status_interval_sec_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_status_interval_sec)
}

// optional .controller.LatControllerConf lat_controller_conf = 28;
inline bool ControlConf::has_lat_controller_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::LatControllerConf& ControlConf::lat_controller_conf() const {
  const ::controller::LatControllerConf* p = lat_controller_conf_;
  // @@protoc_insertion_point(field_get:controller.ControlConf.lat_controller_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::LatControllerConf*>(
      &::controller::_LatControllerConf_default_instance_);
}
inline ::controller::LatControllerConf* ControlConf::release_lat_controller_conf() {
  // @@protoc_insertion_point(field_release:controller.ControlConf.lat_controller_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::LatControllerConf* temp = lat_controller_conf_;
  lat_controller_conf_ = nullptr;
  return temp;
}
inline ::controller::LatControllerConf* ControlConf::mutable_lat_controller_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (lat_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::LatControllerConf>(GetArenaNoVirtual());
    lat_controller_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlConf.lat_controller_conf)
  return lat_controller_conf_;
}
inline void ControlConf::set_allocated_lat_controller_conf(::controller::LatControllerConf* lat_controller_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lat_controller_conf_);
  }
  if (lat_controller_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_controller_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lat_controller_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lat_controller_conf_ = lat_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlConf.lat_controller_conf)
}

// optional .controller.LonControllerConf lon_controller_conf = 29;
inline bool ControlConf::has_lon_controller_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::controller::LonControllerConf& ControlConf::lon_controller_conf() const {
  const ::controller::LonControllerConf* p = lon_controller_conf_;
  // @@protoc_insertion_point(field_get:controller.ControlConf.lon_controller_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::LonControllerConf*>(
      &::controller::_LonControllerConf_default_instance_);
}
inline ::controller::LonControllerConf* ControlConf::release_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:controller.ControlConf.lon_controller_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::LonControllerConf* temp = lon_controller_conf_;
  lon_controller_conf_ = nullptr;
  return temp;
}
inline ::controller::LonControllerConf* ControlConf::mutable_lon_controller_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (lon_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::LonControllerConf>(GetArenaNoVirtual());
    lon_controller_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlConf.lon_controller_conf)
  return lon_controller_conf_;
}
inline void ControlConf::set_allocated_lon_controller_conf(::controller::LonControllerConf* lon_controller_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lon_controller_conf_);
  }
  if (lon_controller_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lon_controller_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lon_controller_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lon_controller_conf_ = lon_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlConf.lon_controller_conf)
}

// optional double trajectory_period = 30;
inline bool ControlConf::has_trajectory_period() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ControlConf::clear_trajectory_period() {
  trajectory_period_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double ControlConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.trajectory_period)
  return trajectory_period_;
}
inline void ControlConf::set_trajectory_period(double value) {
  _has_bits_[0] |= 0x00008000u;
  trajectory_period_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.trajectory_period)
}

// optional double chassis_period = 31;
inline bool ControlConf::has_chassis_period() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ControlConf::clear_chassis_period() {
  chassis_period_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double ControlConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.chassis_period)
  return chassis_period_;
}
inline void ControlConf::set_chassis_period(double value) {
  _has_bits_[0] |= 0x00010000u;
  chassis_period_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.chassis_period)
}

// optional double localization_period = 32;
inline bool ControlConf::has_localization_period() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ControlConf::clear_localization_period() {
  localization_period_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double ControlConf::localization_period() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.localization_period)
  return localization_period_;
}
inline void ControlConf::set_localization_period(double value) {
  _has_bits_[0] |= 0x00020000u;
  localization_period_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.localization_period)
}

// optional double minimum_speed_resolution = 33;
inline bool ControlConf::has_minimum_speed_resolution() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ControlConf::clear_minimum_speed_resolution() {
  minimum_speed_resolution_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double ControlConf::minimum_speed_resolution() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.minimum_speed_resolution)
  return minimum_speed_resolution_;
}
inline void ControlConf::set_minimum_speed_resolution(double value) {
  _has_bits_[0] |= 0x00040000u;
  minimum_speed_resolution_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.minimum_speed_resolution)
}

// optional .controller.MPCControllerConf mpc_controller_conf = 34;
inline bool ControlConf::has_mpc_controller_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::controller::MPCControllerConf& ControlConf::mpc_controller_conf() const {
  const ::controller::MPCControllerConf* p = mpc_controller_conf_;
  // @@protoc_insertion_point(field_get:controller.ControlConf.mpc_controller_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::MPCControllerConf*>(
      &::controller::_MPCControllerConf_default_instance_);
}
inline ::controller::MPCControllerConf* ControlConf::release_mpc_controller_conf() {
  // @@protoc_insertion_point(field_release:controller.ControlConf.mpc_controller_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::MPCControllerConf* temp = mpc_controller_conf_;
  mpc_controller_conf_ = nullptr;
  return temp;
}
inline ::controller::MPCControllerConf* ControlConf::mutable_mpc_controller_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (mpc_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::MPCControllerConf>(GetArenaNoVirtual());
    mpc_controller_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlConf.mpc_controller_conf)
  return mpc_controller_conf_;
}
inline void ControlConf::set_allocated_mpc_controller_conf(::controller::MPCControllerConf* mpc_controller_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mpc_controller_conf_);
  }
  if (mpc_controller_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mpc_controller_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mpc_controller_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mpc_controller_conf_ = mpc_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlConf.mpc_controller_conf)
}

// optional double query_relative_time = 35;
inline bool ControlConf::has_query_relative_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ControlConf::clear_query_relative_time() {
  query_relative_time_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double ControlConf::query_relative_time() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.query_relative_time)
  return query_relative_time_;
}
inline void ControlConf::set_query_relative_time(double value) {
  _has_bits_[0] |= 0x00080000u;
  query_relative_time_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.query_relative_time)
}

// optional double minimum_speed_protection = 36;
inline bool ControlConf::has_minimum_speed_protection() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ControlConf::clear_minimum_speed_protection() {
  minimum_speed_protection_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double ControlConf::minimum_speed_protection() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.minimum_speed_protection)
  return minimum_speed_protection_;
}
inline void ControlConf::set_minimum_speed_protection(double value) {
  _has_bits_[0] |= 0x00100000u;
  minimum_speed_protection_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.minimum_speed_protection)
}

// optional double max_path_remain_when_stopped = 37 [default = 0.3];
inline bool ControlConf::has_max_path_remain_when_stopped() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ControlConf::clear_max_path_remain_when_stopped() {
  max_path_remain_when_stopped_ = 0.3;
  _has_bits_[1] &= ~0x00000010u;
}
inline double ControlConf::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:controller.ControlConf.max_path_remain_when_stopped)
  return max_path_remain_when_stopped_;
}
inline void ControlConf::set_max_path_remain_when_stopped(double value) {
  _has_bits_[1] |= 0x00000010u;
  max_path_remain_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlConf.max_path_remain_when_stopped)
}

// optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
inline bool ControlConf::has_simple_pid_lat_lon_controller_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::controller::SimplePIDLatLonControllerConf& ControlConf::simple_pid_lat_lon_controller_conf() const {
  const ::controller::SimplePIDLatLonControllerConf* p = simple_pid_lat_lon_controller_conf_;
  // @@protoc_insertion_point(field_get:controller.ControlConf.simple_pid_lat_lon_controller_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::SimplePIDLatLonControllerConf*>(
      &::controller::_SimplePIDLatLonControllerConf_default_instance_);
}
inline ::controller::SimplePIDLatLonControllerConf* ControlConf::release_simple_pid_lat_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:controller.ControlConf.simple_pid_lat_lon_controller_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::SimplePIDLatLonControllerConf* temp = simple_pid_lat_lon_controller_conf_;
  simple_pid_lat_lon_controller_conf_ = nullptr;
  return temp;
}
inline ::controller::SimplePIDLatLonControllerConf* ControlConf::mutable_simple_pid_lat_lon_controller_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (simple_pid_lat_lon_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::SimplePIDLatLonControllerConf>(GetArenaNoVirtual());
    simple_pid_lat_lon_controller_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlConf.simple_pid_lat_lon_controller_conf)
  return simple_pid_lat_lon_controller_conf_;
}
inline void ControlConf::set_allocated_simple_pid_lat_lon_controller_conf(::controller::SimplePIDLatLonControllerConf* simple_pid_lat_lon_controller_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(simple_pid_lat_lon_controller_conf_);
  }
  if (simple_pid_lat_lon_controller_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_pid_lat_lon_controller_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple_pid_lat_lon_controller_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  simple_pid_lat_lon_controller_conf_ = simple_pid_lat_lon_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlConf.simple_pid_lat_lon_controller_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::controller::ControlConf_ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::controller::ControlConf_ControllerType>() {
  return ::controller::ControlConf_ControllerType_descriptor();
}
template <> struct is_proto_enum< ::controller::DrivingAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::controller::DrivingAction>() {
  return ::controller::DrivingAction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_control_5fconf_2eproto
