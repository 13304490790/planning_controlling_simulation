// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#ifndef PROTOBUF_INCLUDED_perception_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_perception_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "pnc_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_perception_5fobstacle_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_perception_5fobstacle_2eproto();
namespace perception {
class BBox2D;
class BBox2DDefaultTypeInternal;
extern BBox2DDefaultTypeInternal _BBox2D_default_instance_;
class DebugMessage;
class DebugMessageDefaultTypeInternal;
extern DebugMessageDefaultTypeInternal _DebugMessage_default_instance_;
class LightStatus;
class LightStatusDefaultTypeInternal;
extern LightStatusDefaultTypeInternal _LightStatus_default_instance_;
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class SensorMeasurement;
class SensorMeasurementDefaultTypeInternal;
extern SensorMeasurementDefaultTypeInternal _SensorMeasurement_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class V2XInformation;
class V2XInformationDefaultTypeInternal;
extern V2XInformationDefaultTypeInternal _V2XInformation_default_instance_;
}  // namespace perception
namespace google {
namespace protobuf {
template<> ::perception::BBox2D* Arena::CreateMaybeMessage<::perception::BBox2D>(Arena*);
template<> ::perception::DebugMessage* Arena::CreateMaybeMessage<::perception::DebugMessage>(Arena*);
template<> ::perception::LightStatus* Arena::CreateMaybeMessage<::perception::LightStatus>(Arena*);
template<> ::perception::PerceptionObstacle* Arena::CreateMaybeMessage<::perception::PerceptionObstacle>(Arena*);
template<> ::perception::SensorMeasurement* Arena::CreateMaybeMessage<::perception::SensorMeasurement>(Arena*);
template<> ::perception::Trajectory* Arena::CreateMaybeMessage<::perception::Trajectory>(Arena*);
template<> ::perception::V2XInformation* Arena::CreateMaybeMessage<::perception::V2XInformation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perception {

enum V2XInformation_V2XType {
  V2XInformation_V2XType_NONE = 0,
  V2XInformation_V2XType_ZOMBIES_CAR = 1,
  V2XInformation_V2XType_BLIND_ZONE = 2
};
bool V2XInformation_V2XType_IsValid(int value);
const V2XInformation_V2XType V2XInformation_V2XType_V2XType_MIN = V2XInformation_V2XType_NONE;
const V2XInformation_V2XType V2XInformation_V2XType_V2XType_MAX = V2XInformation_V2XType_BLIND_ZONE;
const int V2XInformation_V2XType_V2XType_ARRAYSIZE = V2XInformation_V2XType_V2XType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V2XInformation_V2XType_descriptor();
inline const ::std::string& V2XInformation_V2XType_Name(V2XInformation_V2XType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V2XInformation_V2XType_descriptor(), value);
}
inline bool V2XInformation_V2XType_Parse(
    const ::std::string& name, V2XInformation_V2XType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V2XInformation_V2XType>(
    V2XInformation_V2XType_descriptor(), name, value);
}
enum PerceptionObstacle_Type {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5
};
bool PerceptionObstacle_Type_IsValid(int value);
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
const int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor();
inline const ::std::string& PerceptionObstacle_Type_Name(PerceptionObstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), value);
}
inline bool PerceptionObstacle_Type_Parse(
    const ::std::string& name, PerceptionObstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionObstacle_ConfidenceType {
  PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN = 0,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN = 1,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR = 2
};
bool PerceptionObstacle_ConfidenceType_IsValid(int value);
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MIN = PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MAX = PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
const int PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE = PerceptionObstacle_ConfidenceType_ConfidenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor();
inline const ::std::string& PerceptionObstacle_ConfidenceType_Name(PerceptionObstacle_ConfidenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_ConfidenceType_descriptor(), value);
}
inline bool PerceptionObstacle_ConfidenceType_Parse(
    const ::std::string& name, PerceptionObstacle_ConfidenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_ConfidenceType>(
    PerceptionObstacle_ConfidenceType_descriptor(), name, value);
}
enum PerceptionObstacle_SubType {
  PerceptionObstacle_SubType_ST_UNKNOWN = 0,
  PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_SubType_ST_CAR = 3,
  PerceptionObstacle_SubType_ST_VAN = 4,
  PerceptionObstacle_SubType_ST_TRUCK = 5,
  PerceptionObstacle_SubType_ST_BUS = 6,
  PerceptionObstacle_SubType_ST_CYCLIST = 7,
  PerceptionObstacle_SubType_ST_MOTORCYCLIST = 8,
  PerceptionObstacle_SubType_ST_TRICYCLIST = 9,
  PerceptionObstacle_SubType_ST_PEDESTRIAN = 10,
  PerceptionObstacle_SubType_ST_TRAFFICCONE = 11
};
bool PerceptionObstacle_SubType_IsValid(int value);
const PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MIN = PerceptionObstacle_SubType_ST_UNKNOWN;
const PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MAX = PerceptionObstacle_SubType_ST_TRAFFICCONE;
const int PerceptionObstacle_SubType_SubType_ARRAYSIZE = PerceptionObstacle_SubType_SubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_SubType_descriptor();
inline const ::std::string& PerceptionObstacle_SubType_Name(PerceptionObstacle_SubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_SubType_descriptor(), value);
}
inline bool PerceptionObstacle_SubType_Parse(
    const ::std::string& name, PerceptionObstacle_SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_SubType>(
    PerceptionObstacle_SubType_descriptor(), name, value);
}
enum PerceptionObstacle_Source {
  PerceptionObstacle_Source_HOST_VEHICLE = 0,
  PerceptionObstacle_Source_V2X = 1
};
bool PerceptionObstacle_Source_IsValid(int value);
const PerceptionObstacle_Source PerceptionObstacle_Source_Source_MIN = PerceptionObstacle_Source_HOST_VEHICLE;
const PerceptionObstacle_Source PerceptionObstacle_Source_Source_MAX = PerceptionObstacle_Source_V2X;
const int PerceptionObstacle_Source_Source_ARRAYSIZE = PerceptionObstacle_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Source_descriptor();
inline const ::std::string& PerceptionObstacle_Source_Name(PerceptionObstacle_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_Source_descriptor(), value);
}
inline bool PerceptionObstacle_Source_Parse(
    const ::std::string& name, PerceptionObstacle_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_Source>(
    PerceptionObstacle_Source_descriptor(), name, value);
}
// ===================================================================

class BBox2D :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.BBox2D) */ {
 public:
  BBox2D();
  virtual ~BBox2D();

  BBox2D(const BBox2D& from);

  inline BBox2D& operator=(const BBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BBox2D(BBox2D&& from) noexcept
    : BBox2D() {
    *this = ::std::move(from);
  }

  inline BBox2D& operator=(BBox2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BBox2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBox2D* internal_default_instance() {
    return reinterpret_cast<const BBox2D*>(
               &_BBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BBox2D* other);
  friend void swap(BBox2D& a, BBox2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BBox2D* New() const final {
    return CreateMaybeMessage<BBox2D>(nullptr);
  }

  BBox2D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BBox2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BBox2D& from);
  void MergeFrom(const BBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double xmin = 1;
  bool has_xmin() const;
  void clear_xmin();
  static const int kXminFieldNumber = 1;
  double xmin() const;
  void set_xmin(double value);

  // optional double ymin = 2;
  bool has_ymin() const;
  void clear_ymin();
  static const int kYminFieldNumber = 2;
  double ymin() const;
  void set_ymin(double value);

  // optional double xmax = 3;
  bool has_xmax() const;
  void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  double xmax() const;
  void set_xmax(double value);

  // optional double ymax = 4;
  bool has_ymax() const;
  void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  double ymax() const;
  void set_ymax(double value);

  // @@protoc_insertion_point(class_scope:perception.BBox2D)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LightStatus :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.LightStatus) */ {
 public:
  LightStatus();
  virtual ~LightStatus();

  LightStatus(const LightStatus& from);

  inline LightStatus& operator=(const LightStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightStatus(LightStatus&& from) noexcept
    : LightStatus() {
    *this = ::std::move(from);
  }

  inline LightStatus& operator=(LightStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LightStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightStatus* internal_default_instance() {
    return reinterpret_cast<const LightStatus*>(
               &_LightStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LightStatus* other);
  friend void swap(LightStatus& a, LightStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightStatus* New() const final {
    return CreateMaybeMessage<LightStatus>(nullptr);
  }

  LightStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightStatus& from);
  void MergeFrom(const LightStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double brake_visible = 1;
  bool has_brake_visible() const;
  void clear_brake_visible();
  static const int kBrakeVisibleFieldNumber = 1;
  double brake_visible() const;
  void set_brake_visible(double value);

  // optional double brake_switch_on = 2;
  bool has_brake_switch_on() const;
  void clear_brake_switch_on();
  static const int kBrakeSwitchOnFieldNumber = 2;
  double brake_switch_on() const;
  void set_brake_switch_on(double value);

  // optional double left_turn_visible = 3;
  bool has_left_turn_visible() const;
  void clear_left_turn_visible();
  static const int kLeftTurnVisibleFieldNumber = 3;
  double left_turn_visible() const;
  void set_left_turn_visible(double value);

  // optional double left_turn_switch_on = 4;
  bool has_left_turn_switch_on() const;
  void clear_left_turn_switch_on();
  static const int kLeftTurnSwitchOnFieldNumber = 4;
  double left_turn_switch_on() const;
  void set_left_turn_switch_on(double value);

  // optional double right_turn_visible = 5;
  bool has_right_turn_visible() const;
  void clear_right_turn_visible();
  static const int kRightTurnVisibleFieldNumber = 5;
  double right_turn_visible() const;
  void set_right_turn_visible(double value);

  // optional double right_turn_switch_on = 6;
  bool has_right_turn_switch_on() const;
  void clear_right_turn_switch_on();
  static const int kRightTurnSwitchOnFieldNumber = 6;
  double right_turn_switch_on() const;
  void set_right_turn_switch_on(double value);

  // @@protoc_insertion_point(class_scope:perception.LightStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double brake_visible_;
  double brake_switch_on_;
  double left_turn_visible_;
  double left_turn_switch_on_;
  double right_turn_visible_;
  double right_turn_switch_on_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class V2XInformation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.V2XInformation) */ {
 public:
  V2XInformation();
  virtual ~V2XInformation();

  V2XInformation(const V2XInformation& from);

  inline V2XInformation& operator=(const V2XInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2XInformation(V2XInformation&& from) noexcept
    : V2XInformation() {
    *this = ::std::move(from);
  }

  inline V2XInformation& operator=(V2XInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const V2XInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2XInformation* internal_default_instance() {
    return reinterpret_cast<const V2XInformation*>(
               &_V2XInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(V2XInformation* other);
  friend void swap(V2XInformation& a, V2XInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2XInformation* New() const final {
    return CreateMaybeMessage<V2XInformation>(nullptr);
  }

  V2XInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2XInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2XInformation& from);
  void MergeFrom(const V2XInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2XInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V2XInformation_V2XType V2XType;
  static const V2XType NONE =
    V2XInformation_V2XType_NONE;
  static const V2XType ZOMBIES_CAR =
    V2XInformation_V2XType_ZOMBIES_CAR;
  static const V2XType BLIND_ZONE =
    V2XInformation_V2XType_BLIND_ZONE;
  static inline bool V2XType_IsValid(int value) {
    return V2XInformation_V2XType_IsValid(value);
  }
  static const V2XType V2XType_MIN =
    V2XInformation_V2XType_V2XType_MIN;
  static const V2XType V2XType_MAX =
    V2XInformation_V2XType_V2XType_MAX;
  static const int V2XType_ARRAYSIZE =
    V2XInformation_V2XType_V2XType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  V2XType_descriptor() {
    return V2XInformation_V2XType_descriptor();
  }
  static inline const ::std::string& V2XType_Name(V2XType value) {
    return V2XInformation_V2XType_Name(value);
  }
  static inline bool V2XType_Parse(const ::std::string& name,
      V2XType* value) {
    return V2XInformation_V2XType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .perception.V2XInformation.V2XType v2x_type = 1;
  int v2x_type_size() const;
  void clear_v2x_type();
  static const int kV2XTypeFieldNumber = 1;
  ::perception::V2XInformation_V2XType v2x_type(int index) const;
  void set_v2x_type(int index, ::perception::V2XInformation_V2XType value);
  void add_v2x_type(::perception::V2XInformation_V2XType value);
  const ::google::protobuf::RepeatedField<int>& v2x_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_v2x_type();

  // @@protoc_insertion_point(class_scope:perception.V2XInformation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> v2x_type_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class SensorMeasurement :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.SensorMeasurement) */ {
 public:
  SensorMeasurement();
  virtual ~SensorMeasurement();

  SensorMeasurement(const SensorMeasurement& from);

  inline SensorMeasurement& operator=(const SensorMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorMeasurement(SensorMeasurement&& from) noexcept
    : SensorMeasurement() {
    *this = ::std::move(from);
  }

  inline SensorMeasurement& operator=(SensorMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMeasurement* internal_default_instance() {
    return reinterpret_cast<const SensorMeasurement*>(
               &_SensorMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SensorMeasurement* other);
  friend void swap(SensorMeasurement& a, SensorMeasurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorMeasurement* New() const final {
    return CreateMaybeMessage<SensorMeasurement>(nullptr);
  }

  SensorMeasurement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorMeasurement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorMeasurement& from);
  void MergeFrom(const SensorMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMeasurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::std::string& sensor_id() const;
  void set_sensor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_id(::std::string&& value);
  #endif
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  ::std::string* mutable_sensor_id();
  ::std::string* release_sensor_id();
  void set_allocated_sensor_id(::std::string* sensor_id);

  // optional .geometry.Point3D position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::geometry::Point3D& position() const;
  ::geometry::Point3D* release_position();
  ::geometry::Point3D* mutable_position();
  void set_allocated_position(::geometry::Point3D* position);

  // optional .geometry.Point3D velocity = 8;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 8;
  const ::geometry::Point3D& velocity() const;
  ::geometry::Point3D* release_velocity();
  ::geometry::Point3D* mutable_velocity();
  void set_allocated_velocity(::geometry::Point3D* velocity);

  // optional .perception.BBox2D box = 12;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 12;
  const ::perception::BBox2D& box() const;
  ::perception::BBox2D* release_box();
  ::perception::BBox2D* mutable_box();
  void set_allocated_box(::perception::BBox2D* box);

  // optional double theta = 4;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .perception.PerceptionObstacle.Type type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::perception::PerceptionObstacle_Type type() const;
  void set_type(::perception::PerceptionObstacle_Type value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .perception.PerceptionObstacle.SubType sub_type = 10;
  bool has_sub_type() const;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 10;
  ::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::perception::PerceptionObstacle_SubType value);

  // @@protoc_insertion_point(class_scope:perception.SensorMeasurement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sensor_id_;
  ::geometry::Point3D* position_;
  ::geometry::Point3D* velocity_;
  ::perception::BBox2D* box_;
  double theta_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  double timestamp_;
  int sub_type_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class Trajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 2;
  ::points::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::points::TrajectoryPoint& trajectory_point(int index) const;
  ::points::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
      trajectory_point() const;

  // optional double probability = 1;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 1;
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:perception.Trajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint > trajectory_point_;
  double probability_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class DebugMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.DebugMessage) */ {
 public:
  DebugMessage();
  virtual ~DebugMessage();

  DebugMessage(const DebugMessage& from);

  inline DebugMessage& operator=(const DebugMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugMessage(DebugMessage&& from) noexcept
    : DebugMessage() {
    *this = ::std::move(from);
  }

  inline DebugMessage& operator=(DebugMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DebugMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugMessage* internal_default_instance() {
    return reinterpret_cast<const DebugMessage*>(
               &_DebugMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DebugMessage* other);
  friend void swap(DebugMessage& a, DebugMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugMessage* New() const final {
    return CreateMaybeMessage<DebugMessage>(nullptr);
  }

  DebugMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DebugMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DebugMessage& from);
  void MergeFrom(const DebugMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .perception.Trajectory trajectory = 1;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 1;
  ::perception::Trajectory* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField< ::perception::Trajectory >*
      mutable_trajectory();
  const ::perception::Trajectory& trajectory(int index) const;
  ::perception::Trajectory* add_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::perception::Trajectory >&
      trajectory() const;

  // @@protoc_insertion_point(class_scope:perception.DebugMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perception::Trajectory > trajectory_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PerceptionObstacle :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObstacle(PerceptionObstacle&& from) noexcept
    : PerceptionObstacle() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacle& operator=(PerceptionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PerceptionObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PerceptionObstacle* other);
  friend void swap(PerceptionObstacle& a, PerceptionObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const final {
    return CreateMaybeMessage<PerceptionObstacle>(nullptr);
  }

  PerceptionObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static const Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static const Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static const Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static const Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static const Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static const Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerceptionObstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  typedef PerceptionObstacle_ConfidenceType ConfidenceType;
  static const ConfidenceType CONFIDENCE_UNKNOWN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
  static const ConfidenceType CONFIDENCE_CNN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN;
  static const ConfidenceType CONFIDENCE_RADAR =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
  static inline bool ConfidenceType_IsValid(int value) {
    return PerceptionObstacle_ConfidenceType_IsValid(value);
  }
  static const ConfidenceType ConfidenceType_MIN =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MIN;
  static const ConfidenceType ConfidenceType_MAX =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MAX;
  static const int ConfidenceType_ARRAYSIZE =
    PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfidenceType_descriptor() {
    return PerceptionObstacle_ConfidenceType_descriptor();
  }
  static inline const ::std::string& ConfidenceType_Name(ConfidenceType value) {
    return PerceptionObstacle_ConfidenceType_Name(value);
  }
  static inline bool ConfidenceType_Parse(const ::std::string& name,
      ConfidenceType* value) {
    return PerceptionObstacle_ConfidenceType_Parse(name, value);
  }

  typedef PerceptionObstacle_SubType SubType;
  static const SubType ST_UNKNOWN =
    PerceptionObstacle_SubType_ST_UNKNOWN;
  static const SubType ST_UNKNOWN_MOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE;
  static const SubType ST_UNKNOWN_UNMOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE;
  static const SubType ST_CAR =
    PerceptionObstacle_SubType_ST_CAR;
  static const SubType ST_VAN =
    PerceptionObstacle_SubType_ST_VAN;
  static const SubType ST_TRUCK =
    PerceptionObstacle_SubType_ST_TRUCK;
  static const SubType ST_BUS =
    PerceptionObstacle_SubType_ST_BUS;
  static const SubType ST_CYCLIST =
    PerceptionObstacle_SubType_ST_CYCLIST;
  static const SubType ST_MOTORCYCLIST =
    PerceptionObstacle_SubType_ST_MOTORCYCLIST;
  static const SubType ST_TRICYCLIST =
    PerceptionObstacle_SubType_ST_TRICYCLIST;
  static const SubType ST_PEDESTRIAN =
    PerceptionObstacle_SubType_ST_PEDESTRIAN;
  static const SubType ST_TRAFFICCONE =
    PerceptionObstacle_SubType_ST_TRAFFICCONE;
  static inline bool SubType_IsValid(int value) {
    return PerceptionObstacle_SubType_IsValid(value);
  }
  static const SubType SubType_MIN =
    PerceptionObstacle_SubType_SubType_MIN;
  static const SubType SubType_MAX =
    PerceptionObstacle_SubType_SubType_MAX;
  static const int SubType_ARRAYSIZE =
    PerceptionObstacle_SubType_SubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SubType_descriptor() {
    return PerceptionObstacle_SubType_descriptor();
  }
  static inline const ::std::string& SubType_Name(SubType value) {
    return PerceptionObstacle_SubType_Name(value);
  }
  static inline bool SubType_Parse(const ::std::string& name,
      SubType* value) {
    return PerceptionObstacle_SubType_Parse(name, value);
  }

  typedef PerceptionObstacle_Source Source;
  static const Source HOST_VEHICLE =
    PerceptionObstacle_Source_HOST_VEHICLE;
  static const Source V2X =
    PerceptionObstacle_Source_V2X;
  static inline bool Source_IsValid(int value) {
    return PerceptionObstacle_Source_IsValid(value);
  }
  static const Source Source_MIN =
    PerceptionObstacle_Source_Source_MIN;
  static const Source Source_MAX =
    PerceptionObstacle_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    PerceptionObstacle_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return PerceptionObstacle_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return PerceptionObstacle_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return PerceptionObstacle_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .geometry.Point3D polygon_point = 8;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 8;
  ::geometry::Point3D* mutable_polygon_point(int index);
  ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >*
      mutable_polygon_point();
  const ::geometry::Point3D& polygon_point(int index) const;
  ::geometry::Point3D* add_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >&
      polygon_point() const;

  // repeated double point_cloud = 12 [packed = true];
  int point_cloud_size() const;
  void clear_point_cloud();
  static const int kPointCloudFieldNumber = 12;
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::google::protobuf::RepeatedField< double >&
      point_cloud() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_point_cloud();

  // repeated .geometry.Point3D drops = 15 [deprecated = true];
  PROTOBUF_DEPRECATED int drops_size() const;
  PROTOBUF_DEPRECATED void clear_drops();
  PROTOBUF_DEPRECATED static const int kDropsFieldNumber = 15;
  PROTOBUF_DEPRECATED ::geometry::Point3D* mutable_drops(int index);
  PROTOBUF_DEPRECATED ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >*
      mutable_drops();
  PROTOBUF_DEPRECATED const ::geometry::Point3D& drops(int index) const;
  PROTOBUF_DEPRECATED ::geometry::Point3D* add_drops();
  PROTOBUF_DEPRECATED const ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >&
      drops() const;

  // repeated .perception.SensorMeasurement measurements = 20;
  int measurements_size() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 20;
  ::perception::SensorMeasurement* mutable_measurements(int index);
  ::google::protobuf::RepeatedPtrField< ::perception::SensorMeasurement >*
      mutable_measurements();
  const ::perception::SensorMeasurement& measurements(int index) const;
  ::perception::SensorMeasurement* add_measurements();
  const ::google::protobuf::RepeatedPtrField< ::perception::SensorMeasurement >&
      measurements() const;

  // repeated double position_covariance = 22 [packed = true];
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 22;
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position_covariance();

  // repeated double velocity_covariance = 23 [packed = true];
  int velocity_covariance_size() const;
  void clear_velocity_covariance();
  static const int kVelocityCovarianceFieldNumber = 23;
  double velocity_covariance(int index) const;
  void set_velocity_covariance(int index, double value);
  void add_velocity_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      velocity_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_velocity_covariance();

  // repeated double acceleration_covariance = 24 [packed = true];
  int acceleration_covariance_size() const;
  void clear_acceleration_covariance();
  static const int kAccelerationCovarianceFieldNumber = 24;
  double acceleration_covariance(int index) const;
  void set_acceleration_covariance(int index, double value);
  void add_acceleration_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      acceleration_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_acceleration_covariance();

  // optional .geometry.Point3D position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::geometry::Point3D& position() const;
  ::geometry::Point3D* release_position();
  ::geometry::Point3D* mutable_position();
  void set_allocated_position(::geometry::Point3D* position);

  // optional .geometry.Point3D velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::geometry::Point3D& velocity() const;
  ::geometry::Point3D* release_velocity();
  ::geometry::Point3D* mutable_velocity();
  void set_allocated_velocity(::geometry::Point3D* velocity);

  // optional .geometry.Point3D acceleration = 16;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 16;
  const ::geometry::Point3D& acceleration() const;
  ::geometry::Point3D* release_acceleration();
  ::geometry::Point3D* mutable_acceleration();
  void set_allocated_acceleration(::geometry::Point3D* acceleration);

  // optional .geometry.Point3D anchor_point = 17;
  bool has_anchor_point() const;
  void clear_anchor_point();
  static const int kAnchorPointFieldNumber = 17;
  const ::geometry::Point3D& anchor_point() const;
  ::geometry::Point3D* release_anchor_point();
  ::geometry::Point3D* mutable_anchor_point();
  void set_allocated_anchor_point(::geometry::Point3D* anchor_point);

  // optional .perception.BBox2D bbox2d = 18;
  bool has_bbox2d() const;
  void clear_bbox2d();
  static const int kBbox2DFieldNumber = 18;
  const ::perception::BBox2D& bbox2d() const;
  ::perception::BBox2D* release_bbox2d();
  ::perception::BBox2D* mutable_bbox2d();
  void set_allocated_bbox2d(::perception::BBox2D* bbox2d);

  // optional .perception.LightStatus light_status = 25;
  bool has_light_status() const;
  void clear_light_status();
  static const int kLightStatusFieldNumber = 25;
  const ::perception::LightStatus& light_status() const;
  ::perception::LightStatus* release_light_status();
  ::perception::LightStatus* mutable_light_status();
  void set_allocated_light_status(::perception::LightStatus* light_status);

  // optional .perception.DebugMessage msg = 26;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 26;
  const ::perception::DebugMessage& msg() const;
  ::perception::DebugMessage* release_msg();
  ::perception::DebugMessage* mutable_msg();
  void set_allocated_msg(::perception::DebugMessage* msg);

  // optional .perception.V2XInformation v2x_info = 28;
  bool has_v2x_info() const;
  void clear_v2x_info();
  static const int kV2XInfoFieldNumber = 28;
  const ::perception::V2XInformation& v2x_info() const;
  ::perception::V2XInformation* release_v2x_info();
  ::perception::V2XInformation* mutable_v2x_info();
  void set_allocated_v2x_info(::perception::V2XInformation* v2x_info);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .perception.PerceptionObstacle.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::perception::PerceptionObstacle_Type type() const;
  void set_type(::perception::PerceptionObstacle_Type value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // optional double tracking_time = 9;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 9;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double confidence = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confidence() const;
  PROTOBUF_DEPRECATED void clear_confidence();
  PROTOBUF_DEPRECATED static const int kConfidenceFieldNumber = 13;
  PROTOBUF_DEPRECATED double confidence() const;
  PROTOBUF_DEPRECATED void set_confidence(double value);

  // optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confidence_type() const;
  PROTOBUF_DEPRECATED void clear_confidence_type();
  PROTOBUF_DEPRECATED static const int kConfidenceTypeFieldNumber = 14;
  PROTOBUF_DEPRECATED ::perception::PerceptionObstacle_ConfidenceType confidence_type() const;
  PROTOBUF_DEPRECATED void set_confidence_type(::perception::PerceptionObstacle_ConfidenceType value);

  // optional .perception.PerceptionObstacle.SubType sub_type = 19;
  bool has_sub_type() const;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 19;
  ::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::perception::PerceptionObstacle_SubType value);

  // optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 27;
  ::perception::PerceptionObstacle_Source source() const;
  void set_source(::perception::PerceptionObstacle_Source value);

  // optional double height_above_ground = 21 [default = nan];
  bool has_height_above_ground() const;
  void clear_height_above_ground();
  static const int kHeightAboveGroundFieldNumber = 21;
  double height_above_ground() const;
  void set_height_above_ground(double value);

  // @@protoc_insertion_point(class_scope:perception.PerceptionObstacle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::geometry::Point3D > polygon_point_;
  ::google::protobuf::RepeatedField< double > point_cloud_;
  mutable std::atomic<int> _point_cloud_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::geometry::Point3D > drops_;
  ::google::protobuf::RepeatedPtrField< ::perception::SensorMeasurement > measurements_;
  ::google::protobuf::RepeatedField< double > position_covariance_;
  mutable std::atomic<int> _position_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > velocity_covariance_;
  mutable std::atomic<int> _velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > acceleration_covariance_;
  mutable std::atomic<int> _acceleration_covariance_cached_byte_size_;
  ::geometry::Point3D* position_;
  ::geometry::Point3D* velocity_;
  ::geometry::Point3D* acceleration_;
  ::geometry::Point3D* anchor_point_;
  ::perception::BBox2D* bbox2d_;
  ::perception::LightStatus* light_status_;
  ::perception::DebugMessage* msg_;
  ::perception::V2XInformation* v2x_info_;
  double theta_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  double tracking_time_;
  double timestamp_;
  double confidence_;
  int confidence_type_;
  int sub_type_;
  int source_;
  double height_above_ground_;
  friend struct ::TableStruct_perception_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BBox2D

// optional double xmin = 1;
inline bool BBox2D::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBox2D::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BBox2D::xmin() const {
  // @@protoc_insertion_point(field_get:perception.BBox2D.xmin)
  return xmin_;
}
inline void BBox2D::set_xmin(double value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
  // @@protoc_insertion_point(field_set:perception.BBox2D.xmin)
}

// optional double ymin = 2;
inline bool BBox2D::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBox2D::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BBox2D::ymin() const {
  // @@protoc_insertion_point(field_get:perception.BBox2D.ymin)
  return ymin_;
}
inline void BBox2D::set_ymin(double value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
  // @@protoc_insertion_point(field_set:perception.BBox2D.ymin)
}

// optional double xmax = 3;
inline bool BBox2D::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBox2D::clear_xmax() {
  xmax_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double BBox2D::xmax() const {
  // @@protoc_insertion_point(field_get:perception.BBox2D.xmax)
  return xmax_;
}
inline void BBox2D::set_xmax(double value) {
  _has_bits_[0] |= 0x00000004u;
  xmax_ = value;
  // @@protoc_insertion_point(field_set:perception.BBox2D.xmax)
}

// optional double ymax = 4;
inline bool BBox2D::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBox2D::clear_ymax() {
  ymax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BBox2D::ymax() const {
  // @@protoc_insertion_point(field_get:perception.BBox2D.ymax)
  return ymax_;
}
inline void BBox2D::set_ymax(double value) {
  _has_bits_[0] |= 0x00000008u;
  ymax_ = value;
  // @@protoc_insertion_point(field_set:perception.BBox2D.ymax)
}

// -------------------------------------------------------------------

// LightStatus

// optional double brake_visible = 1;
inline bool LightStatus::has_brake_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightStatus::clear_brake_visible() {
  brake_visible_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LightStatus::brake_visible() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.brake_visible)
  return brake_visible_;
}
inline void LightStatus::set_brake_visible(double value) {
  _has_bits_[0] |= 0x00000001u;
  brake_visible_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.brake_visible)
}

// optional double brake_switch_on = 2;
inline bool LightStatus::has_brake_switch_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightStatus::clear_brake_switch_on() {
  brake_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LightStatus::brake_switch_on() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.brake_switch_on)
  return brake_switch_on_;
}
inline void LightStatus::set_brake_switch_on(double value) {
  _has_bits_[0] |= 0x00000002u;
  brake_switch_on_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.brake_switch_on)
}

// optional double left_turn_visible = 3;
inline bool LightStatus::has_left_turn_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightStatus::clear_left_turn_visible() {
  left_turn_visible_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LightStatus::left_turn_visible() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.left_turn_visible)
  return left_turn_visible_;
}
inline void LightStatus::set_left_turn_visible(double value) {
  _has_bits_[0] |= 0x00000004u;
  left_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.left_turn_visible)
}

// optional double left_turn_switch_on = 4;
inline bool LightStatus::has_left_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightStatus::clear_left_turn_switch_on() {
  left_turn_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LightStatus::left_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.left_turn_switch_on)
  return left_turn_switch_on_;
}
inline void LightStatus::set_left_turn_switch_on(double value) {
  _has_bits_[0] |= 0x00000008u;
  left_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.left_turn_switch_on)
}

// optional double right_turn_visible = 5;
inline bool LightStatus::has_right_turn_visible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LightStatus::clear_right_turn_visible() {
  right_turn_visible_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LightStatus::right_turn_visible() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.right_turn_visible)
  return right_turn_visible_;
}
inline void LightStatus::set_right_turn_visible(double value) {
  _has_bits_[0] |= 0x00000010u;
  right_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.right_turn_visible)
}

// optional double right_turn_switch_on = 6;
inline bool LightStatus::has_right_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LightStatus::clear_right_turn_switch_on() {
  right_turn_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LightStatus::right_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:perception.LightStatus.right_turn_switch_on)
  return right_turn_switch_on_;
}
inline void LightStatus::set_right_turn_switch_on(double value) {
  _has_bits_[0] |= 0x00000020u;
  right_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:perception.LightStatus.right_turn_switch_on)
}

// -------------------------------------------------------------------

// V2XInformation

// repeated .perception.V2XInformation.V2XType v2x_type = 1;
inline int V2XInformation::v2x_type_size() const {
  return v2x_type_.size();
}
inline void V2XInformation::clear_v2x_type() {
  v2x_type_.Clear();
}
inline ::perception::V2XInformation_V2XType V2XInformation::v2x_type(int index) const {
  // @@protoc_insertion_point(field_get:perception.V2XInformation.v2x_type)
  return static_cast< ::perception::V2XInformation_V2XType >(v2x_type_.Get(index));
}
inline void V2XInformation::set_v2x_type(int index, ::perception::V2XInformation_V2XType value) {
  assert(::perception::V2XInformation_V2XType_IsValid(value));
  v2x_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.V2XInformation.v2x_type)
}
inline void V2XInformation::add_v2x_type(::perception::V2XInformation_V2XType value) {
  assert(::perception::V2XInformation_V2XType_IsValid(value));
  v2x_type_.Add(value);
  // @@protoc_insertion_point(field_add:perception.V2XInformation.v2x_type)
}
inline const ::google::protobuf::RepeatedField<int>&
V2XInformation::v2x_type() const {
  // @@protoc_insertion_point(field_list:perception.V2XInformation.v2x_type)
  return v2x_type_;
}
inline ::google::protobuf::RepeatedField<int>*
V2XInformation::mutable_v2x_type() {
  // @@protoc_insertion_point(field_mutable_list:perception.V2XInformation.v2x_type)
  return &v2x_type_;
}

// -------------------------------------------------------------------

// SensorMeasurement

// optional string sensor_id = 1;
inline bool SensorMeasurement::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorMeasurement::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SensorMeasurement::sensor_id() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.sensor_id)
  return sensor_id_.GetNoArena();
}
inline void SensorMeasurement::set_sensor_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.sensor_id)
}
#if LANG_CXX11
inline void SensorMeasurement::set_sensor_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perception.SensorMeasurement.sensor_id)
}
#endif
inline void SensorMeasurement::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.SensorMeasurement.sensor_id)
}
inline void SensorMeasurement::set_sensor_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.SensorMeasurement.sensor_id)
}
inline ::std::string* SensorMeasurement::mutable_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perception.SensorMeasurement.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMeasurement::release_sensor_id() {
  // @@protoc_insertion_point(field_release:perception.SensorMeasurement.sensor_id)
  if (!has_sensor_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sensor_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMeasurement::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:perception.SensorMeasurement.sensor_id)
}

// optional int32 id = 2;
inline bool SensorMeasurement::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorMeasurement::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 SensorMeasurement::id() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.id)
  return id_;
}
inline void SensorMeasurement::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.id)
}

// optional .geometry.Point3D position = 3;
inline bool SensorMeasurement::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::geometry::Point3D& SensorMeasurement::position() const {
  const ::geometry::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* SensorMeasurement::release_position() {
  // @@protoc_insertion_point(field_release:perception.SensorMeasurement.position)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* SensorMeasurement::mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.SensorMeasurement.position)
  return position_;
}
inline void SensorMeasurement::set_allocated_position(::geometry::Point3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:perception.SensorMeasurement.position)
}

// optional double theta = 4;
inline bool SensorMeasurement::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorMeasurement::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SensorMeasurement::theta() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.theta)
  return theta_;
}
inline void SensorMeasurement::set_theta(double value) {
  _has_bits_[0] |= 0x00000010u;
  theta_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.theta)
}

// optional double length = 5;
inline bool SensorMeasurement::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorMeasurement::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SensorMeasurement::length() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.length)
  return length_;
}
inline void SensorMeasurement::set_length(double value) {
  _has_bits_[0] |= 0x00000020u;
  length_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.length)
}

// optional double width = 6;
inline bool SensorMeasurement::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorMeasurement::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SensorMeasurement::width() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.width)
  return width_;
}
inline void SensorMeasurement::set_width(double value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.width)
}

// optional double height = 7;
inline bool SensorMeasurement::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorMeasurement::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SensorMeasurement::height() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.height)
  return height_;
}
inline void SensorMeasurement::set_height(double value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.height)
}

// optional .geometry.Point3D velocity = 8;
inline bool SensorMeasurement::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::geometry::Point3D& SensorMeasurement::velocity() const {
  const ::geometry::Point3D* p = velocity_;
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* SensorMeasurement::release_velocity() {
  // @@protoc_insertion_point(field_release:perception.SensorMeasurement.velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::geometry::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* SensorMeasurement::mutable_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.SensorMeasurement.velocity)
  return velocity_;
}
inline void SensorMeasurement::set_allocated_velocity(::geometry::Point3D* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:perception.SensorMeasurement.velocity)
}

// optional .perception.PerceptionObstacle.Type type = 9;
inline bool SensorMeasurement::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorMeasurement::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::perception::PerceptionObstacle_Type SensorMeasurement::type() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.type)
  return static_cast< ::perception::PerceptionObstacle_Type >(type_);
}
inline void SensorMeasurement::set_type(::perception::PerceptionObstacle_Type value) {
  assert(::perception::PerceptionObstacle_Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.type)
}

// optional .perception.PerceptionObstacle.SubType sub_type = 10;
inline bool SensorMeasurement::has_sub_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorMeasurement::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::perception::PerceptionObstacle_SubType SensorMeasurement::sub_type() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.sub_type)
  return static_cast< ::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline void SensorMeasurement::set_sub_type(::perception::PerceptionObstacle_SubType value) {
  assert(::perception::PerceptionObstacle_SubType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.sub_type)
}

// optional double timestamp = 11;
inline bool SensorMeasurement::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorMeasurement::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SensorMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.timestamp)
  return timestamp_;
}
inline void SensorMeasurement::set_timestamp(double value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perception.SensorMeasurement.timestamp)
}

// optional .perception.BBox2D box = 12;
inline bool SensorMeasurement::has_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorMeasurement::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::perception::BBox2D& SensorMeasurement::box() const {
  const ::perception::BBox2D* p = box_;
  // @@protoc_insertion_point(field_get:perception.SensorMeasurement.box)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::BBox2D*>(
      &::perception::_BBox2D_default_instance_);
}
inline ::perception::BBox2D* SensorMeasurement::release_box() {
  // @@protoc_insertion_point(field_release:perception.SensorMeasurement.box)
  _has_bits_[0] &= ~0x00000008u;
  ::perception::BBox2D* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::perception::BBox2D* SensorMeasurement::mutable_box() {
  _has_bits_[0] |= 0x00000008u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::BBox2D>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.SensorMeasurement.box)
  return box_;
}
inline void SensorMeasurement::set_allocated_box(::perception::BBox2D* box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:perception.SensorMeasurement.box)
}

// -------------------------------------------------------------------

// Trajectory

// optional double probability = 1;
inline bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::clear_probability() {
  probability_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:perception.Trajectory.probability)
  return probability_;
}
inline void Trajectory::set_probability(double value) {
  _has_bits_[0] |= 0x00000001u;
  probability_ = value;
  // @@protoc_insertion_point(field_set:perception.Trajectory.probability)
}

// repeated .points.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline ::points::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:perception.Trajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::points::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:perception.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::points::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:perception.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:perception.Trajectory.trajectory_point)
  return trajectory_point_;
}

// -------------------------------------------------------------------

// DebugMessage

// repeated .perception.Trajectory trajectory = 1;
inline int DebugMessage::trajectory_size() const {
  return trajectory_.size();
}
inline void DebugMessage::clear_trajectory() {
  trajectory_.Clear();
}
inline ::perception::Trajectory* DebugMessage::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:perception.DebugMessage.trajectory)
  return trajectory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perception::Trajectory >*
DebugMessage::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:perception.DebugMessage.trajectory)
  return &trajectory_;
}
inline const ::perception::Trajectory& DebugMessage::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:perception.DebugMessage.trajectory)
  return trajectory_.Get(index);
}
inline ::perception::Trajectory* DebugMessage::add_trajectory() {
  // @@protoc_insertion_point(field_add:perception.DebugMessage.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perception::Trajectory >&
DebugMessage::trajectory() const {
  // @@protoc_insertion_point(field_list:perception.DebugMessage.trajectory)
  return trajectory_;
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.id)
  return id_;
}
inline void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  id_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.id)
}

// optional .geometry.Point3D position = 2;
inline bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::geometry::Point3D& PerceptionObstacle::position() const {
  const ::geometry::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.position)
  _has_bits_[0] &= ~0x00000001u;
  ::geometry::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.position)
  return position_;
}
inline void PerceptionObstacle::set_allocated_position(::geometry::Point3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.position)
}

// optional double theta = 3;
inline bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.theta)
  return theta_;
}
inline void PerceptionObstacle::set_theta(double value) {
  _has_bits_[0] |= 0x00000100u;
  theta_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.theta)
}

// optional .geometry.Point3D velocity = 4;
inline bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::geometry::Point3D& PerceptionObstacle::velocity() const {
  const ::geometry::Point3D* p = velocity_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.velocity)
  return velocity_;
}
inline void PerceptionObstacle::set_allocated_velocity(::geometry::Point3D* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
inline bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerceptionObstacle::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.length)
  return length_;
}
inline void PerceptionObstacle::set_length(double value) {
  _has_bits_[0] |= 0x00000200u;
  length_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.length)
}

// optional double width = 6;
inline bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PerceptionObstacle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.width)
  return width_;
}
inline void PerceptionObstacle::set_width(double value) {
  _has_bits_[0] |= 0x00001000u;
  width_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.width)
}

// optional double height = 7;
inline bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PerceptionObstacle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.height)
  return height_;
}
inline void PerceptionObstacle::set_height(double value) {
  _has_bits_[0] |= 0x00002000u;
  height_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.height)
}

// repeated .geometry.Point3D polygon_point = 8;
inline int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::geometry::Point3D& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::geometry::Point3D* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
inline bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  _has_bits_[0] |= 0x00004000u;
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.tracking_time)
}

// optional .perception.PerceptionObstacle.Type type = 10;
inline bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerceptionObstacle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.type)
  return static_cast< ::perception::PerceptionObstacle_Type >(type_);
}
inline void PerceptionObstacle::set_type(::perception::PerceptionObstacle_Type value) {
  assert(::perception::PerceptionObstacle_Type_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
inline bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  _has_bits_[0] |= 0x00008000u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
inline int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.point_cloud)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [deprecated = true];
inline bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PerceptionObstacle::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.confidence)
  return confidence_;
}
inline void PerceptionObstacle::set_confidence(double value) {
  _has_bits_[0] |= 0x00010000u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.confidence)
}

// optional .perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
inline bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.confidence_type)
  return static_cast< ::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
inline void PerceptionObstacle::set_confidence_type(::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.confidence_type)
}

// repeated .geometry.Point3D drops = 15 [deprecated = true];
inline int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.drops)
  return &drops_;
}
inline const ::geometry::Point3D& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.drops)
  return drops_.Get(index);
}
inline ::geometry::Point3D* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.drops)
  return drops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::geometry::Point3D >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.drops)
  return drops_;
}

// optional .geometry.Point3D acceleration = 16;
inline bool PerceptionObstacle::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::geometry::Point3D& PerceptionObstacle::acceleration() const {
  const ::geometry::Point3D* p = acceleration_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* PerceptionObstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.acceleration)
  _has_bits_[0] &= ~0x00000004u;
  ::geometry::Point3D* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_acceleration() {
  _has_bits_[0] |= 0x00000004u;
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.acceleration)
  return acceleration_;
}
inline void PerceptionObstacle::set_allocated_acceleration(::geometry::Point3D* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.acceleration)
}

// optional .geometry.Point3D anchor_point = 17;
inline bool PerceptionObstacle::has_anchor_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::geometry::Point3D& PerceptionObstacle::anchor_point() const {
  const ::geometry::Point3D* p = anchor_point_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.anchor_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* PerceptionObstacle::release_anchor_point() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.anchor_point)
  _has_bits_[0] &= ~0x00000008u;
  ::geometry::Point3D* temp = anchor_point_;
  anchor_point_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* PerceptionObstacle::mutable_anchor_point() {
  _has_bits_[0] |= 0x00000008u;
  if (anchor_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    anchor_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.anchor_point)
  return anchor_point_;
}
inline void PerceptionObstacle::set_allocated_anchor_point(::geometry::Point3D* anchor_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(anchor_point_);
  }
  if (anchor_point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, anchor_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  anchor_point_ = anchor_point;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.anchor_point)
}

// optional .perception.BBox2D bbox2d = 18;
inline bool PerceptionObstacle::has_bbox2d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerceptionObstacle::clear_bbox2d() {
  if (bbox2d_ != nullptr) bbox2d_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::perception::BBox2D& PerceptionObstacle::bbox2d() const {
  const ::perception::BBox2D* p = bbox2d_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.bbox2d)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::BBox2D*>(
      &::perception::_BBox2D_default_instance_);
}
inline ::perception::BBox2D* PerceptionObstacle::release_bbox2d() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.bbox2d)
  _has_bits_[0] &= ~0x00000010u;
  ::perception::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
  return temp;
}
inline ::perception::BBox2D* PerceptionObstacle::mutable_bbox2d() {
  _has_bits_[0] |= 0x00000010u;
  if (bbox2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::BBox2D>(GetArenaNoVirtual());
    bbox2d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.bbox2d)
  return bbox2d_;
}
inline void PerceptionObstacle::set_allocated_bbox2d(::perception::BBox2D* bbox2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bbox2d_;
  }
  if (bbox2d) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bbox2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bbox2d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bbox2d_ = bbox2d;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.bbox2d)
}

// optional .perception.PerceptionObstacle.SubType sub_type = 19;
inline bool PerceptionObstacle::has_sub_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PerceptionObstacle::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::perception::PerceptionObstacle_SubType PerceptionObstacle::sub_type() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.sub_type)
  return static_cast< ::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline void PerceptionObstacle::set_sub_type(::perception::PerceptionObstacle_SubType value) {
  assert(::perception::PerceptionObstacle_SubType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.sub_type)
}

// repeated .perception.SensorMeasurement measurements = 20;
inline int PerceptionObstacle::measurements_size() const {
  return measurements_.size();
}
inline void PerceptionObstacle::clear_measurements() {
  measurements_.Clear();
}
inline ::perception::SensorMeasurement* PerceptionObstacle::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.measurements)
  return measurements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perception::SensorMeasurement >*
PerceptionObstacle::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.measurements)
  return &measurements_;
}
inline const ::perception::SensorMeasurement& PerceptionObstacle::measurements(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.measurements)
  return measurements_.Get(index);
}
inline ::perception::SensorMeasurement* PerceptionObstacle::add_measurements() {
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.measurements)
  return measurements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perception::SensorMeasurement >&
PerceptionObstacle::measurements() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.measurements)
  return measurements_;
}

// optional double height_above_ground = 21 [default = nan];
inline bool PerceptionObstacle::has_height_above_ground() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PerceptionObstacle::clear_height_above_ground() {
  height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00100000u;
}
inline double PerceptionObstacle::height_above_ground() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.height_above_ground)
  return height_above_ground_;
}
inline void PerceptionObstacle::set_height_above_ground(double value) {
  _has_bits_[0] |= 0x00100000u;
  height_above_ground_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.height_above_ground)
}

// repeated double position_covariance = 22 [packed = true];
inline int PerceptionObstacle::position_covariance_size() const {
  return position_covariance_.size();
}
inline void PerceptionObstacle::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double PerceptionObstacle::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.position_covariance)
  return position_covariance_.Get(index);
}
inline void PerceptionObstacle::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.position_covariance)
}
inline void PerceptionObstacle::add_position_covariance(double value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.position_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::position_covariance() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.position_covariance)
  return &position_covariance_;
}

// repeated double velocity_covariance = 23 [packed = true];
inline int PerceptionObstacle::velocity_covariance_size() const {
  return velocity_covariance_.size();
}
inline void PerceptionObstacle::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
inline double PerceptionObstacle::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_.Get(index);
}
inline void PerceptionObstacle::set_velocity_covariance(int index, double value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.velocity_covariance)
}
inline void PerceptionObstacle::add_velocity_covariance(double value) {
  velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.velocity_covariance)
  return &velocity_covariance_;
}

// repeated double acceleration_covariance = 24 [packed = true];
inline int PerceptionObstacle::acceleration_covariance_size() const {
  return acceleration_covariance_.size();
}
inline void PerceptionObstacle::clear_acceleration_covariance() {
  acceleration_covariance_.Clear();
}
inline double PerceptionObstacle::acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_.Get(index);
}
inline void PerceptionObstacle::set_acceleration_covariance(int index, double value) {
  acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.acceleration_covariance)
}
inline void PerceptionObstacle::add_acceleration_covariance(double value) {
  acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:perception.PerceptionObstacle.acceleration_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:perception.PerceptionObstacle.acceleration_covariance)
  return &acceleration_covariance_;
}

// optional .perception.LightStatus light_status = 25;
inline bool PerceptionObstacle::has_light_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerceptionObstacle::clear_light_status() {
  if (light_status_ != nullptr) light_status_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::perception::LightStatus& PerceptionObstacle::light_status() const {
  const ::perception::LightStatus* p = light_status_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.light_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::LightStatus*>(
      &::perception::_LightStatus_default_instance_);
}
inline ::perception::LightStatus* PerceptionObstacle::release_light_status() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.light_status)
  _has_bits_[0] &= ~0x00000020u;
  ::perception::LightStatus* temp = light_status_;
  light_status_ = nullptr;
  return temp;
}
inline ::perception::LightStatus* PerceptionObstacle::mutable_light_status() {
  _has_bits_[0] |= 0x00000020u;
  if (light_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::LightStatus>(GetArenaNoVirtual());
    light_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.light_status)
  return light_status_;
}
inline void PerceptionObstacle::set_allocated_light_status(::perception::LightStatus* light_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_status_;
  }
  if (light_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  light_status_ = light_status;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.light_status)
}

// optional .perception.DebugMessage msg = 26;
inline bool PerceptionObstacle::has_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerceptionObstacle::clear_msg() {
  if (msg_ != nullptr) msg_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::perception::DebugMessage& PerceptionObstacle::msg() const {
  const ::perception::DebugMessage* p = msg_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.msg)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::DebugMessage*>(
      &::perception::_DebugMessage_default_instance_);
}
inline ::perception::DebugMessage* PerceptionObstacle::release_msg() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.msg)
  _has_bits_[0] &= ~0x00000040u;
  ::perception::DebugMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::perception::DebugMessage* PerceptionObstacle::mutable_msg() {
  _has_bits_[0] |= 0x00000040u;
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::DebugMessage>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.msg)
  return msg_;
}
inline void PerceptionObstacle::set_allocated_msg(::perception::DebugMessage* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.msg)
}

// optional .perception.PerceptionObstacle.Source source = 27 [default = HOST_VEHICLE];
inline bool PerceptionObstacle::has_source() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PerceptionObstacle::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::perception::PerceptionObstacle_Source PerceptionObstacle::source() const {
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.source)
  return static_cast< ::perception::PerceptionObstacle_Source >(source_);
}
inline void PerceptionObstacle::set_source(::perception::PerceptionObstacle_Source value) {
  assert(::perception::PerceptionObstacle_Source_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  source_ = value;
  // @@protoc_insertion_point(field_set:perception.PerceptionObstacle.source)
}

// optional .perception.V2XInformation v2x_info = 28;
inline bool PerceptionObstacle::has_v2x_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerceptionObstacle::clear_v2x_info() {
  if (v2x_info_ != nullptr) v2x_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::perception::V2XInformation& PerceptionObstacle::v2x_info() const {
  const ::perception::V2XInformation* p = v2x_info_;
  // @@protoc_insertion_point(field_get:perception.PerceptionObstacle.v2x_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::V2XInformation*>(
      &::perception::_V2XInformation_default_instance_);
}
inline ::perception::V2XInformation* PerceptionObstacle::release_v2x_info() {
  // @@protoc_insertion_point(field_release:perception.PerceptionObstacle.v2x_info)
  _has_bits_[0] &= ~0x00000080u;
  ::perception::V2XInformation* temp = v2x_info_;
  v2x_info_ = nullptr;
  return temp;
}
inline ::perception::V2XInformation* PerceptionObstacle::mutable_v2x_info() {
  _has_bits_[0] |= 0x00000080u;
  if (v2x_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::V2XInformation>(GetArenaNoVirtual());
    v2x_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perception.PerceptionObstacle.v2x_info)
  return v2x_info_;
}
inline void PerceptionObstacle::set_allocated_v2x_info(::perception::V2XInformation* v2x_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete v2x_info_;
  }
  if (v2x_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      v2x_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, v2x_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  v2x_info_ = v2x_info;
  // @@protoc_insertion_point(field_set_allocated:perception.PerceptionObstacle.v2x_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perception::V2XInformation_V2XType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::V2XInformation_V2XType>() {
  return ::perception::V2XInformation_V2XType_descriptor();
}
template <> struct is_proto_enum< ::perception::PerceptionObstacle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PerceptionObstacle_Type>() {
  return ::perception::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::perception::PerceptionObstacle_ConfidenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PerceptionObstacle_ConfidenceType>() {
  return ::perception::PerceptionObstacle_ConfidenceType_descriptor();
}
template <> struct is_proto_enum< ::perception::PerceptionObstacle_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PerceptionObstacle_SubType>() {
  return ::perception::PerceptionObstacle_SubType_descriptor();
}
template <> struct is_proto_enum< ::perception::PerceptionObstacle_Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PerceptionObstacle_Source>() {
  return ::perception::PerceptionObstacle_Source_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_perception_5fobstacle_2eproto
