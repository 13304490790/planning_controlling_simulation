// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#include "planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EStop_planning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RSSInfo_planning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskStats_planning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planning_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LatencyStats_planning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPoint_pnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint_pnc_5fpoint_2eproto;
namespace planning {
class EStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EStop> _instance;
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskStats> _instance;
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats> _instance;
} _LatencyStats_default_instance_;
class RSSInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RSSInfo> _instance;
} _RSSInfo_default_instance_;
class ADCTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory> _instance;
} _ADCTrajectory_default_instance_;
}  // namespace planning
static void InitDefaultsEStop_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_EStop_default_instance_;
    new (ptr) ::planning::EStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::EStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EStop_planning_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEStop_planning_2eproto}, {}};

static void InitDefaultsTaskStats_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_TaskStats_default_instance_;
    new (ptr) ::planning::TaskStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::TaskStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskStats_planning_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskStats_planning_2eproto}, {}};

static void InitDefaultsLatencyStats_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_LatencyStats_default_instance_;
    new (ptr) ::planning::LatencyStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::LatencyStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LatencyStats_planning_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLatencyStats_planning_2eproto}, {
      &scc_info_TaskStats_planning_2eproto.base,}};

static void InitDefaultsRSSInfo_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_RSSInfo_default_instance_;
    new (ptr) ::planning::RSSInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::RSSInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RSSInfo_planning_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRSSInfo_planning_2eproto}, {}};

static void InitDefaultsADCTrajectory_planning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_ADCTrajectory_default_instance_;
    new (ptr) ::planning::ADCTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::ADCTrajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ADCTrajectory_planning_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsADCTrajectory_planning_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_EStop_planning_2eproto.base,
      &scc_info_TrajectoryPoint_pnc_5fpoint_2eproto.base,
      &scc_info_PathPoint_pnc_5fpoint_2eproto.base,
      &scc_info_LatencyStats_planning_2eproto.base,
      &scc_info_RSSInfo_planning_2eproto.base,}};

void InitDefaults_planning_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EStop_planning_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskStats_planning_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyStats_planning_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RSSInfo_planning_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ADCTrajectory_planning_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_planning_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_planning_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_planning_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_planning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::planning::EStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::EStop, is_estop_),
  PROTOBUF_FIELD_OFFSET(::planning::EStop, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::planning::TaskStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::TaskStats, name_),
  PROTOBUF_FIELD_OFFSET(::planning::TaskStats, time_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::planning::LatencyStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::LatencyStats, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::planning::LatencyStats, task_stats_),
  PROTOBUF_FIELD_OFFSET(::planning::LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, is_rss_safe_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, cur_dist_lon_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, rss_safe_dist_lon_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lon_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lon_range_maximum_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lat_left_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lat_left_range_maximum_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lat_right_range_minimum_),
  PROTOBUF_FIELD_OFFSET(::planning::RSSInfo, acc_lat_right_range_maximum_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, header_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, total_path_length_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, total_path_time_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, estop_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, is_replan_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, gear_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, path_point_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, latency_stats_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, routing_header_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, right_of_way_status_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, trajectory_type_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, replan_reason_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, car_in_dead_end_),
  PROTOBUF_FIELD_OFFSET(::planning::ADCTrajectory, rss_info_),
  1,
  6,
  7,
  2,
  9,
  8,
  ~0u,
  ~0u,
  3,
  4,
  11,
  12,
  0,
  10,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::planning::EStop)},
  { 9, 16, sizeof(::planning::TaskStats)},
  { 18, 26, sizeof(::planning::LatencyStats)},
  { 29, 43, sizeof(::planning::RSSInfo)},
  { 52, 72, sizeof(::planning::ADCTrajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_EStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_TaskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_RSSInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_ADCTrajectory_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_planning_2eproto = {
  {}, AddDescriptors_planning_2eproto, "planning.proto", schemas,
  file_default_instances, TableStruct_planning_2eproto::offsets,
  file_level_metadata_planning_2eproto, 5, file_level_enum_descriptors_planning_2eproto, file_level_service_descriptors_planning_2eproto,
};

const char descriptor_table_protodef_planning_2eproto[] =
  "\n\016planning.proto\022\010planning\032\014header.proto"
  "\032\rchassis.proto\032\017pnc_point.proto\")\n\005ESto"
  "p\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001(\t\"*\n\tT"
  "askStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030\002 \001(\001\""
  "j\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 \001(\001\022\'"
  "\n\ntask_stats\030\002 \003(\0132\023.planning.TaskStats\022"
  "\032\n\022init_frame_time_ms\030\003 \001(\001\"\237\002\n\007RSSInfo\022"
  "\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014cur_dist_lon\030\002 \001"
  "(\001\022\031\n\021rss_safe_dist_lon\030\003 \001(\001\022\035\n\025acc_lon"
  "_range_minimum\030\004 \001(\001\022\035\n\025acc_lon_range_ma"
  "ximum\030\005 \001(\001\022\"\n\032acc_lat_left_range_minimu"
  "m\030\006 \001(\001\022\"\n\032acc_lat_left_range_maximum\030\007 "
  "\001(\001\022#\n\033acc_lat_right_range_minimum\030\010 \001(\001"
  "\022#\n\033acc_lat_right_range_maximum\030\t \001(\001\"\377\005"
  "\n\rADCTrajectory\022\"\n\006header\030\001 \001(\0132\022.contro"
  "ller.Header\022\031\n\021total_path_length\030\002 \001(\001\022\027"
  "\n\017total_path_time\030\003 \001(\001\022\036\n\005estop\030\006 \001(\0132\017"
  ".planning.EStop\022\030\n\tis_replan\030\t \001(\010:\005fals"
  "e\022*\n\004gear\030\n \001(\0162\034.canbus.Chassis.GearPos"
  "ition\0221\n\020trajectory_point\030\014 \003(\0132\027.points"
  ".TrajectoryPoint\022%\n\npath_point\030\r \003(\0132\021.p"
  "oints.PathPoint\022-\n\rlatency_stats\030\017 \001(\0132\026"
  ".planning.LatencyStats\022*\n\016routing_header"
  "\030\020 \001(\0132\022.controller.Header\022E\n\023right_of_w"
  "ay_status\030\021 \001(\0162(.planning.ADCTrajectory"
  ".RightOfWayStatus\022H\n\017trajectory_type\030\025 \001"
  "(\0162&.planning.ADCTrajectory.TrajectoryTy"
  "pe:\007UNKNOWN\022\025\n\rreplan_reason\030\026 \001(\t\022\027\n\017ca"
  "r_in_dead_end\030\030 \001(\010\022#\n\010rss_info\030d \001(\0132\021."
  "planning.RSSInfo\"2\n\020RightOfWayStatus\022\017\n\013"
  "UNPROTECTED\020\000\022\r\n\tPROTECTED\020\001\"a\n\016Trajecto"
  "ryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\rPATH_"
  "FALLBACK\020\002\022\022\n\016SPEED_FALLBACK\020\003\022\017\n\013PATH_R"
  "EUSED\020\004*_\n\007JucType\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_RO"
  "AD\020\001\022\016\n\nCROSS_ROAD\020\002\022\r\n\tFORK_ROAD\020\003\022\r\n\tM"
  "AIN_SIDE\020\004\022\014\n\010DEAD_END\020\005"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_planning_2eproto = {
  false, InitDefaults_planning_2eproto, 
  descriptor_table_protodef_planning_2eproto,
  "planning.proto", &assign_descriptors_table_planning_2eproto, 1424,
};

void AddDescriptors_planning_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_header_2eproto,
    ::AddDescriptors_chassis_2eproto,
    ::AddDescriptors_pnc_5fpoint_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_planning_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planning_2eproto = []() { AddDescriptors_planning_2eproto(); return true; }();
namespace planning {
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_planning_2eproto);
  return file_level_enum_descriptors_planning_2eproto[0];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_planning_2eproto);
  return file_level_enum_descriptors_planning_2eproto[1];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
const int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JucType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_planning_2eproto);
  return file_level_enum_descriptors_planning_2eproto[2];
}
bool JucType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EStop::InitAsDefaultInstance() {
}
class EStop::HasBitSetters {
 public:
  static void set_has_is_estop(EStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_reason(EStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:planning.EStop)
}

void EStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EStop_planning_2eproto.base);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EStop& EStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EStop_planning_2eproto.base);
  return *internal_default_instance();
}


void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EStop*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_estop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("planning.EStop.reason");
        object = msg->mutable_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.EStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_estop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.EStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.EStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_estop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::google::protobuf::DynamicCastToGenerated<EStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_estop_, other->is_estop_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planning_2eproto);
  return ::file_level_metadata_planning_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskStats::InitAsDefaultInstance() {
}
class TaskStats::HasBitSetters {
 public:
  static void set_has_name(TaskStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_ms(TaskStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:planning.TaskStats)
}

void TaskStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskStats_planning_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskStats& TaskStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskStats_planning_2eproto.base);
  return *internal_default_instance();
}


void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("planning.TaskStats.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional double time_ms = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_time_ms(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.TaskStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_time_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.TaskStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.TaskStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::google::protobuf::DynamicCastToGenerated<TaskStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_ms_, other->time_ms_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planning_2eproto);
  return ::file_level_metadata_planning_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
class LatencyStats::HasBitSetters {
 public:
  static void set_has_total_time_ms(LatencyStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_init_frame_time_ms(LatencyStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LatencyStats_planning_2eproto.base);
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyStats& LatencyStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LatencyStats_planning_2eproto.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_frame_time_ms_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatencyStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LatencyStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_total_time_ms(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::planning::TaskStats::_InternalParse;
          object = msg->add_task_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_init_frame_time_ms(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.LatencyStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_total_time_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_init_frame_time_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.LatencyStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->task_stats(static_cast<int>(i)),
      output);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->task_stats(static_cast<int>(i)), target);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .planning.TaskStats task_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->task_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::DynamicCastToGenerated<LatencyStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&task_stats_)->InternalSwap(CastToBase(&other->task_stats_));
  swap(total_time_ms_, other->total_time_ms_);
  swap(init_frame_time_ms_, other->init_frame_time_ms_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planning_2eproto);
  return ::file_level_metadata_planning_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RSSInfo::InitAsDefaultInstance() {
}
class RSSInfo::HasBitSetters {
 public:
  static void set_has_is_rss_safe(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_cur_dist_lon(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rss_safe_dist_lon(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_acc_lon_range_minimum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_acc_lon_range_maximum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_acc_lat_left_range_minimum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_acc_lat_left_range_maximum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_acc_lat_right_range_minimum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_acc_lat_right_range_maximum(RSSInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSSInfo::kIsRssSafeFieldNumber;
const int RSSInfo::kCurDistLonFieldNumber;
const int RSSInfo::kRssSafeDistLonFieldNumber;
const int RSSInfo::kAccLonRangeMinimumFieldNumber;
const int RSSInfo::kAccLonRangeMaximumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMinimumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMaximumFieldNumber;
const int RSSInfo::kAccLatRightRangeMinimumFieldNumber;
const int RSSInfo::kAccLatRightRangeMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSSInfo::RSSInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.RSSInfo)
}
RSSInfo::RSSInfo(const RSSInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_dist_lon_, &from.cur_dist_lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:planning.RSSInfo)
}

void RSSInfo::SharedCtor() {
  ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rss_safe_) -
      reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
}

RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:planning.RSSInfo)
  SharedDtor();
}

void RSSInfo::SharedDtor() {
}

void RSSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RSSInfo& RSSInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RSSInfo_planning_2eproto.base);
  return *internal_default_instance();
}


void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_lat_right_range_maximum_) -
        reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(acc_lat_right_range_maximum_));
  }
  is_rss_safe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RSSInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RSSInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool is_rss_safe = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_rss_safe(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double cur_dist_lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_cur_dist_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double rss_safe_dist_lon = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_rss_safe_dist_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lon_range_minimum = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_acc_lon_range_minimum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lon_range_maximum = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_acc_lon_range_maximum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lat_left_range_minimum = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_acc_lat_left_range_minimum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lat_left_range_maximum = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_acc_lat_left_range_maximum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lat_right_range_minimum = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_acc_lat_right_range_minimum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acc_lat_right_range_maximum = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_acc_lat_right_range_maximum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.RSSInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_rss_safe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_is_rss_safe(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rss_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cur_dist_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_cur_dist_lon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rss_safe_dist_lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_rss_safe_dist_lon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rss_safe_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_minimum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_acc_lon_range_minimum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_maximum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_acc_lon_range_maximum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_minimum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_acc_lat_left_range_minimum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_maximum = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_acc_lat_left_range_maximum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_minimum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_acc_lat_right_range_minimum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_maximum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_acc_lat_right_range_maximum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.RSSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.RSSInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_rss_safe(), output);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_dist_lon(), output);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rss_safe_dist_lon(), output);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_lon_range_minimum(), output);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc_lon_range_maximum(), output);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acc_lat_left_range_minimum(), output);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_lat_left_range_maximum(), output);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acc_lat_right_range_minimum(), output);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->acc_lat_right_range_maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.RSSInfo)
}

::google::protobuf::uint8* RSSInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->acc_lat_right_range_maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.RSSInfo)
  return target;
}

size_t RSSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.RSSInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double cur_dist_lon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rss_safe_dist_lon = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_minimum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_maximum = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_minimum = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_maximum = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_minimum = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_maximum = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RSSInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSSInfo* source =
      ::google::protobuf::DynamicCastToGenerated<RSSInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.RSSInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.RSSInfo)
    MergeFrom(*source);
  }
}

void RSSInfo::MergeFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cur_dist_lon_ = from.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_safe_dist_lon_ = from.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_lon_range_minimum_ = from.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_lon_range_maximum_ = from.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lat_left_range_minimum_ = from.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lat_left_range_maximum_ = from.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lat_right_range_minimum_ = from.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_lat_right_range_maximum_ = from.acc_lat_right_range_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_rss_safe(from.is_rss_safe());
  }
}

void RSSInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSSInfo::IsInitialized() const {
  return true;
}

void RSSInfo::Swap(RSSInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSSInfo::InternalSwap(RSSInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cur_dist_lon_, other->cur_dist_lon_);
  swap(rss_safe_dist_lon_, other->rss_safe_dist_lon_);
  swap(acc_lon_range_minimum_, other->acc_lon_range_minimum_);
  swap(acc_lon_range_maximum_, other->acc_lon_range_maximum_);
  swap(acc_lat_left_range_minimum_, other->acc_lat_left_range_minimum_);
  swap(acc_lat_left_range_maximum_, other->acc_lat_left_range_maximum_);
  swap(acc_lat_right_range_minimum_, other->acc_lat_right_range_minimum_);
  swap(acc_lat_right_range_maximum_, other->acc_lat_right_range_maximum_);
  swap(is_rss_safe_, other->is_rss_safe_);
}

::google::protobuf::Metadata RSSInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planning_2eproto);
  return ::file_level_metadata_planning_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ADCTrajectory::InitAsDefaultInstance() {
  ::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::controller::Header*>(
      ::controller::Header::internal_default_instance());
  ::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->estop_ = const_cast< ::planning::EStop*>(
      ::planning::EStop::internal_default_instance());
  ::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::planning::LatencyStats*>(
      ::planning::LatencyStats::internal_default_instance());
  ::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->routing_header_ = const_cast< ::controller::Header*>(
      ::controller::Header::internal_default_instance());
  ::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->rss_info_ = const_cast< ::planning::RSSInfo*>(
      ::planning::RSSInfo::internal_default_instance());
}
class ADCTrajectory::HasBitSetters {
 public:
  static const ::controller::Header& header(const ADCTrajectory* msg);
  static void set_has_header(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_total_path_length(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_total_path_time(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::planning::EStop& estop(const ADCTrajectory* msg);
  static void set_has_estop(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_replan(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_gear(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::planning::LatencyStats& latency_stats(const ADCTrajectory* msg);
  static void set_has_latency_stats(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::controller::Header& routing_header(const ADCTrajectory* msg);
  static void set_has_routing_header(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_right_of_way_status(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_trajectory_type(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_replan_reason(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_car_in_dead_end(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::planning::RSSInfo& rss_info(const ADCTrajectory* msg);
  static void set_has_rss_info(ADCTrajectory* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::controller::Header&
ADCTrajectory::HasBitSetters::header(const ADCTrajectory* msg) {
  return *msg->header_;
}
const ::planning::EStop&
ADCTrajectory::HasBitSetters::estop(const ADCTrajectory* msg) {
  return *msg->estop_;
}
const ::planning::LatencyStats&
ADCTrajectory::HasBitSetters::latency_stats(const ADCTrajectory* msg) {
  return *msg->latency_stats_;
}
const ::controller::Header&
ADCTrajectory::HasBitSetters::routing_header(const ADCTrajectory* msg) {
  return *msg->routing_header_;
}
const ::planning::RSSInfo&
ADCTrajectory::HasBitSetters::rss_info(const ADCTrajectory* msg) {
  return *msg->rss_info_;
}
void ADCTrajectory::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != nullptr) routing_header_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRoutingHeaderFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kTrajectoryTypeFieldNumber;
const int ADCTrajectory::kReplanReasonFieldNumber;
const int ADCTrajectory::kCarInDeadEndFieldNumber;
const int ADCTrajectory::kRssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replan_reason()) {
    replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
  }
  if (from.has_header()) {
    header_ = new ::controller::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_estop()) {
    estop_ = new ::planning::EStop(*from.estop_);
  } else {
    estop_ = nullptr;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = nullptr;
  }
  if (from.has_routing_header()) {
    routing_header_ = new ::controller::Header(*from.routing_header_);
  } else {
    routing_header_ = nullptr;
  }
  if (from.has_rss_info()) {
    rss_info_ = new ::planning::RSSInfo(*from.rss_info_);
  } else {
    rss_info_ = nullptr;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(trajectory_type_));
  // @@protoc_insertion_point(copy_constructor:planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ADCTrajectory_planning_2eproto.base);
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trajectory_type_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  replan_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete estop_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete routing_header_;
  if (this != internal_default_instance()) delete rss_info_;
}

void ADCTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ADCTrajectory& ADCTrajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ADCTrajectory_planning_2eproto.base);
  return *internal_default_instance();
}


void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  path_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      replan_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(estop_ != nullptr);
      estop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latency_stats_ != nullptr);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(routing_header_ != nullptr);
      routing_header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rss_info_ != nullptr);
      rss_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_path_time_) -
        reinterpret_cast<char*>(&total_path_length_)) + sizeof(total_path_time_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&gear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trajectory_type_) -
        reinterpret_cast<char*>(&gear_)) + sizeof(trajectory_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ADCTrajectory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ADCTrajectory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .controller.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double total_path_length = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_total_path_length(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double total_path_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_total_path_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .planning.EStop estop = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::EStop::_InternalParse;
        object = msg->mutable_estop();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_is_replan(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_GearPosition_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gear(static_cast<::canbus::Chassis_GearPosition>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .points.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::points::TrajectoryPoint::_InternalParse;
          object = msg->add_trajectory_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .points.PathPoint path_point = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::points::PathPoint::_InternalParse;
          object = msg->add_path_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional .planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::LatencyStats::_InternalParse;
        object = msg->mutable_latency_stats();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.Header routing_header = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Header::_InternalParse;
        object = msg->mutable_routing_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::planning::ADCTrajectory_RightOfWayStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(17, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_right_of_way_status(static_cast<::planning::ADCTrajectory_RightOfWayStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::planning::ADCTrajectory_TrajectoryType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(21, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_trajectory_type(static_cast<::planning::ADCTrajectory_TrajectoryType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string replan_reason = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("planning.ADCTrajectory.replan_reason");
        object = msg->mutable_replan_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool car_in_dead_end = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_car_in_dead_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .planning.RSSInfo rss_info = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planning::RSSInfo::_InternalParse;
        object = msg->mutable_rss_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.ADCTrajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .controller.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_total_path_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_total_path_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.EStop estop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_is_replan(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .points.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .points.PathPoint path_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Header routing_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::planning::ADCTrajectory_TrajectoryType_IsValid(value)) {
            set_trajectory_type(static_cast< ::planning::ADCTrajectory_TrajectoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replan_reason = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replan_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planning.ADCTrajectory.replan_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool car_in_dead_end = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_car_in_dead_end(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &car_in_dead_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planning.RSSInfo rss_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (802 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rss_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.ADCTrajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // optional .planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::estop(this), output);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  // repeated .points.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->path_point(static_cast<int>(i)),
      output);
  }

  // optional .planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::latency_stats(this), output);
  }

  // optional .controller.Header routing_header = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::routing_header(this), output);
  }

  // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trajectory_type(), output);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.ADCTrajectory.replan_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->replan_reason(), output);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->car_in_dead_end(), output);
  }

  // optional .planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::rss_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // optional .planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::estop(this), target);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->trajectory_point(static_cast<int>(i)), target);
  }

  // repeated .points.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->path_point(static_cast<int>(i)), target);
  }

  // optional .planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::latency_stats(this), target);
  }

  // optional .controller.Header routing_header = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::routing_header(this), target);
  }

  // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planning.ADCTrajectory.replan_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->replan_reason(), target);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->car_in_dead_end(), target);
  }

  // optional .planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::rss_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ADCTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .points.TrajectoryPoint trajectory_point = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // repeated .points.PathPoint path_point = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->path_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_point(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string replan_reason = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replan_reason());
    }

    // optional .controller.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .planning.EStop estop = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *estop_);
    }

    // optional .planning.LatencyStats latency_stats = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *latency_stats_);
    }

    // optional .controller.Header routing_header = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_header_);
    }

    // optional .planning.RSSInfo rss_info = 100;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rss_info_);
    }

    // optional double total_path_length = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .canbus.Chassis.GearPosition gear = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional bool is_replan = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool car_in_dead_end = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional .planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

    // optional .planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::google::protobuf::DynamicCastToGenerated<ADCTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::controller::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_estop()->::planning::EStop::MergeFrom(from.estop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_latency_stats()->::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_routing_header()->::controller::Header::MergeFrom(from.routing_header());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rss_info()->::planning::RSSInfo::MergeFrom(from.rss_info());
    }
    if (cached_has_bits & 0x00000040u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_path_time_ = from.total_path_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00000400u) {
      car_in_dead_end_ = from.car_in_dead_end_;
    }
    if (cached_has_bits & 0x00000800u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    if (cached_has_bits & 0x00001000u) {
      trajectory_type_ = from.trajectory_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  CastToBase(&path_point_)->InternalSwap(CastToBase(&other->path_point_));
  replan_reason_.Swap(&other->replan_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(estop_, other->estop_);
  swap(latency_stats_, other->latency_stats_);
  swap(routing_header_, other->routing_header_);
  swap(rss_info_, other->rss_info_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_path_time_, other->total_path_time_);
  swap(gear_, other->gear_);
  swap(is_replan_, other->is_replan_);
  swap(car_in_dead_end_, other->car_in_dead_end_);
  swap(right_of_way_status_, other->right_of_way_status_);
  swap(trajectory_type_, other->trajectory_type_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planning_2eproto);
  return ::file_level_metadata_planning_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::planning::EStop* Arena::CreateMaybeMessage< ::planning::EStop >(Arena* arena) {
  return Arena::CreateInternal< ::planning::EStop >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::TaskStats* Arena::CreateMaybeMessage< ::planning::TaskStats >(Arena* arena) {
  return Arena::CreateInternal< ::planning::TaskStats >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::LatencyStats* Arena::CreateMaybeMessage< ::planning::LatencyStats >(Arena* arena) {
  return Arena::CreateInternal< ::planning::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::RSSInfo* Arena::CreateMaybeMessage< ::planning::RSSInfo >(Arena* arena) {
  return Arena::CreateInternal< ::planning::RSSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::planning::ADCTrajectory* Arena::CreateMaybeMessage< ::planning::ADCTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::planning::ADCTrajectory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
