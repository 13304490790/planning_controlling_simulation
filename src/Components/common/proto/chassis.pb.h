// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#ifndef PROTOBUF_INCLUDED_chassis_2eproto
#define PROTOBUF_INCLUDED_chassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chassis_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_chassis_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_chassis_2eproto();
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
}  // namespace canbus
namespace google {
namespace protobuf {
template<> ::canbus::Chassis* Arena::CreateMaybeMessage<::canbus::Chassis>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace canbus {

enum Chassis_DrivingMode {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4
};
bool Chassis_DrivingMode_IsValid(int value);
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_EMERGENCY_MODE;
const int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor();
inline const ::std::string& Chassis_DrivingMode_Name(Chassis_DrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), value);
}
inline bool Chassis_DrivingMode_Parse(
    const ::std::string& name, Chassis_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER = 6,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE = 7,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE = 8,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR = 9,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5
};
bool Chassis_ErrorCode_IsValid(int value);
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
const int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor();
inline const ::std::string& Chassis_ErrorCode_Name(Chassis_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), value);
}
inline bool Chassis_ErrorCode_Parse(
    const ::std::string& name, Chassis_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6
};
bool Chassis_GearPosition_IsValid(int value);
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
const int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor();
inline const ::std::string& Chassis_GearPosition_Name(Chassis_GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), value);
}
inline bool Chassis_GearPosition_Parse(
    const ::std::string& name, Chassis_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
// ===================================================================

class Chassis :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:canbus.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chassis(Chassis&& from) noexcept
    : Chassis() {
    *this = ::std::move(from);
  }

  inline Chassis& operator=(Chassis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Chassis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Chassis* other);
  friend void swap(Chassis& a, Chassis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chassis* New() const final {
    return CreateMaybeMessage<Chassis>(nullptr);
  }

  Chassis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chassis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static const DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static const DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static const DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static const DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static const DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static const DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static const DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static const int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  static inline const ::std::string& DrivingMode_Name(DrivingMode value) {
    return Chassis_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(const ::std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static const ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static const ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static const ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static const ErrorCode CHASSIS_ERROR_ON_STEER =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER;
  static const ErrorCode CHASSIS_ERROR_ON_BRAKE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE;
  static const ErrorCode CHASSIS_ERROR_ON_THROTTLE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE;
  static const ErrorCode CHASSIS_ERROR_ON_GEAR =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
  static const ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static const ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static const ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Chassis_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static const GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static const GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static const GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static const GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static const GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static const GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static const GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static const GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static const GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static const int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  static inline const ::std::string& GearPosition_Name(GearPosition value) {
    return Chassis_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(const ::std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .controller.Header header = 25;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 25;
  const ::controller::Header& header() const;
  ::controller::Header* release_header();
  ::controller::Header* mutable_header();
  void set_allocated_header(::controller::Header* header);

  // optional int32 fuel_range_m = 7;
  bool has_fuel_range_m() const;
  void clear_fuel_range_m();
  static const int kFuelRangeMFieldNumber = 7;
  ::google::protobuf::int32 fuel_range_m() const;
  void set_fuel_range_m(::google::protobuf::int32 value);

  // optional float throttle_percentage = 8 [default = 0];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 8;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 9 [default = 0];
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 9;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 11 [default = 0];
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 11;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // optional bool engine_started = 3;
  bool has_engine_started() const;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 3;
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional bool parking_brake = 13;
  bool has_parking_brake() const;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 13;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool high_beam_signal = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_high_beam_signal() const;
  PROTOBUF_DEPRECATED void clear_high_beam_signal();
  PROTOBUF_DEPRECATED static const int kHighBeamSignalFieldNumber = 14;
  PROTOBUF_DEPRECATED bool high_beam_signal() const;
  PROTOBUF_DEPRECATED void set_high_beam_signal(bool value);

  // optional bool low_beam_signal = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_low_beam_signal() const;
  PROTOBUF_DEPRECATED void clear_low_beam_signal();
  PROTOBUF_DEPRECATED static const int kLowBeamSignalFieldNumber = 15;
  PROTOBUF_DEPRECATED bool low_beam_signal() const;
  PROTOBUF_DEPRECATED void set_low_beam_signal(bool value);

  // optional bool left_turn_signal = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_left_turn_signal() const;
  PROTOBUF_DEPRECATED void clear_left_turn_signal();
  PROTOBUF_DEPRECATED static const int kLeftTurnSignalFieldNumber = 16;
  PROTOBUF_DEPRECATED bool left_turn_signal() const;
  PROTOBUF_DEPRECATED void set_left_turn_signal(bool value);

  // optional bool right_turn_signal = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_right_turn_signal() const;
  PROTOBUF_DEPRECATED void clear_right_turn_signal();
  PROTOBUF_DEPRECATED static const int kRightTurnSignalFieldNumber = 17;
  PROTOBUF_DEPRECATED bool right_turn_signal() const;
  PROTOBUF_DEPRECATED void set_right_turn_signal(bool value);

  // optional bool horn = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_horn() const;
  PROTOBUF_DEPRECATED void clear_horn();
  PROTOBUF_DEPRECATED static const int kHornFieldNumber = 18;
  PROTOBUF_DEPRECATED bool horn() const;
  PROTOBUF_DEPRECATED void set_horn(bool value);

  // optional bool wiper = 19;
  bool has_wiper() const;
  void clear_wiper();
  static const int kWiperFieldNumber = 19;
  bool wiper() const;
  void set_wiper(bool value);

  // optional bool disengage_status = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_disengage_status() const;
  PROTOBUF_DEPRECATED void clear_disengage_status();
  PROTOBUF_DEPRECATED static const int kDisengageStatusFieldNumber = 20;
  PROTOBUF_DEPRECATED bool disengage_status() const;
  PROTOBUF_DEPRECATED void set_disengage_status(bool value);

  // optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 21;
  ::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::canbus::Chassis_DrivingMode value);

  // optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 22;
  ::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::canbus::Chassis_ErrorCode value);

  // optional .canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 23;
  ::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::canbus::Chassis_GearPosition value);

  // optional double steering_timestamp = 24;
  bool has_steering_timestamp() const;
  void clear_steering_timestamp();
  static const int kSteeringTimestampFieldNumber = 24;
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  // optional int32 chassis_error_mask = 26 [default = 0];
  bool has_chassis_error_mask() const;
  void clear_chassis_error_mask();
  static const int kChassisErrorMaskFieldNumber = 26;
  ::google::protobuf::int32 chassis_error_mask() const;
  void set_chassis_error_mask(::google::protobuf::int32 value);

  // optional float engine_rpm = 4 [default = nan];
  bool has_engine_rpm() const;
  void clear_engine_rpm();
  static const int kEngineRpmFieldNumber = 4;
  float engine_rpm() const;
  void set_engine_rpm(float value);

  // optional float speed_mps = 5 [default = nan];
  bool has_speed_mps() const;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 5;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float odometer_m = 6 [default = nan];
  bool has_odometer_m() const;
  void clear_odometer_m();
  static const int kOdometerMFieldNumber = 6;
  float odometer_m() const;
  void set_odometer_m(float value);

  // optional float steering_torque_nm = 12 [default = nan];
  bool has_steering_torque_nm() const;
  void clear_steering_torque_nm();
  static const int kSteeringTorqueNmFieldNumber = 12;
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  // @@protoc_insertion_point(class_scope:canbus.Chassis)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::Header* header_;
  ::google::protobuf::int32 fuel_range_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  bool engine_started_;
  bool parking_brake_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  bool wiper_;
  bool disengage_status_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  double steering_timestamp_;
  ::google::protobuf::int32 chassis_error_mask_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  float steering_torque_nm_;
  friend struct ::TableStruct_chassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chassis

// optional bool engine_started = 3;
inline bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.engine_started)
  return engine_started_;
}
inline void Chassis::set_engine_started(bool value) {
  _has_bits_[0] |= 0x00000020u;
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
inline bool Chassis::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00080000u;
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
inline void Chassis::set_engine_rpm(float value) {
  _has_bits_[0] |= 0x00080000u;
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
inline bool Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00100000u;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.speed_mps)
  return speed_mps_;
}
inline void Chassis::set_speed_mps(float value) {
  _has_bits_[0] |= 0x00100000u;
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
inline bool Chassis::has_odometer_m() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Chassis::clear_odometer_m() {
  odometer_m_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00200000u;
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.odometer_m)
  return odometer_m_;
}
inline void Chassis::set_odometer_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
inline bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
inline void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = 0];
inline bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Chassis::set_throttle_percentage(float value) {
  _has_bits_[0] |= 0x00000004u;
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = 0];
inline bool Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Chassis::set_brake_percentage(float value) {
  _has_bits_[0] |= 0x00000008u;
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = 0];
inline bool Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Chassis::set_steering_percentage(float value) {
  _has_bits_[0] |= 0x00000010u;
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
inline bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00400000u;
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
inline void Chassis::set_steering_torque_nm(float value) {
  _has_bits_[0] |= 0x00400000u;
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
inline bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.parking_brake)
  return parking_brake_;
}
inline void Chassis::set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00000040u;
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
inline bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
inline void Chassis::set_high_beam_signal(bool value) {
  _has_bits_[0] |= 0x00000080u;
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
inline bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
inline void Chassis::set_low_beam_signal(bool value) {
  _has_bits_[0] |= 0x00000100u;
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
inline bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
inline void Chassis::set_left_turn_signal(bool value) {
  _has_bits_[0] |= 0x00000200u;
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
inline bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
inline void Chassis::set_right_turn_signal(bool value) {
  _has_bits_[0] |= 0x00000400u;
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
inline bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chassis::clear_horn() {
  horn_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.horn)
  return horn_;
}
inline void Chassis::set_horn(bool value) {
  _has_bits_[0] |= 0x00000800u;
  horn_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.horn)
}

// optional bool wiper = 19;
inline bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chassis::clear_wiper() {
  wiper_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.wiper)
  return wiper_;
}
inline void Chassis::set_wiper(bool value) {
  _has_bits_[0] |= 0x00001000u;
  wiper_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
inline bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.disengage_status)
  return disengage_status_;
}
inline void Chassis::set_disengage_status(bool value) {
  _has_bits_[0] |= 0x00002000u;
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.disengage_status)
}

// optional .canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
inline bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.driving_mode)
  return static_cast< ::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::canbus::Chassis_DrivingMode value) {
  assert(::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.driving_mode)
}

// optional .canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
inline bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chassis::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.error_code)
  return static_cast< ::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Chassis::set_error_code(::canbus::Chassis_ErrorCode value) {
  assert(::canbus::Chassis_ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.error_code)
}

// optional .canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.gear_location)
  return static_cast< ::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Chassis::set_gear_location(::canbus::Chassis_GearPosition value) {
  assert(::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
inline bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
inline void Chassis::set_steering_timestamp(double value) {
  _has_bits_[0] |= 0x00020000u;
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.steering_timestamp)
}

// optional .controller.Header header = 25;
inline bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::Header& Chassis::header() const {
  const ::controller::Header* p = header_;
  // @@protoc_insertion_point(field_get:canbus.Chassis.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:canbus.Chassis.header)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::controller::Header* Chassis::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:canbus.Chassis.header)
  return header_;
}
inline void Chassis::set_allocated_header(::controller::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
inline bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
inline void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:canbus.Chassis.chassis_error_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::canbus::Chassis_DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::canbus::Chassis_DrivingMode>() {
  return ::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::canbus::Chassis_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::canbus::Chassis_ErrorCode>() {
  return ::canbus::Chassis_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::canbus::Chassis_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::canbus::Chassis_GearPosition>() {
  return ::canbus::Chassis_GearPosition_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_chassis_2eproto
