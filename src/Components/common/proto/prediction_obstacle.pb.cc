// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_obstacle.proto

#include "prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_perception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PerceptionObstacle_perception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint_pnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Intent_prediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleIntent_prediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleInteractiveTag_prediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority_prediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory_prediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_PredictionObstacle_prediction_5fobstacle_2eproto;
namespace prediction {
class ObstacleIntentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleIntent> _instance;
} _ObstacleIntent_default_instance_;
class IntentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intent> _instance;
} _Intent_default_instance_;
class ObstacleInteractiveTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleInteractiveTag> _instance;
} _ObstacleInteractiveTag_default_instance_;
class ObstaclePriorityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstaclePriority> _instance;
} _ObstaclePriority_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class PredictionObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacle> _instance;
} _PredictionObstacle_default_instance_;
class PredictionObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacles> _instance;
} _PredictionObstacles_default_instance_;
}  // namespace prediction
static void InitDefaultsObstacleIntent_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_ObstacleIntent_default_instance_;
    new (ptr) ::prediction::ObstacleIntent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::ObstacleIntent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleIntent_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacleIntent_prediction_5fobstacle_2eproto}, {}};

static void InitDefaultsIntent_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_Intent_default_instance_;
    new (ptr) ::prediction::Intent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::Intent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Intent_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntent_prediction_5fobstacle_2eproto}, {}};

static void InitDefaultsObstacleInteractiveTag_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_ObstacleInteractiveTag_default_instance_;
    new (ptr) ::prediction::ObstacleInteractiveTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::ObstacleInteractiveTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleInteractiveTag_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacleInteractiveTag_prediction_5fobstacle_2eproto}, {}};

static void InitDefaultsObstaclePriority_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_ObstaclePriority_default_instance_;
    new (ptr) ::prediction::ObstaclePriority();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::ObstaclePriority::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstaclePriority_prediction_5fobstacle_2eproto}, {}};

static void InitDefaultsTrajectory_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_Trajectory_default_instance_;
    new (ptr) ::prediction::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::Trajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectory_prediction_5fobstacle_2eproto}, {
      &scc_info_TrajectoryPoint_pnc_5fpoint_2eproto.base,}};

static void InitDefaultsPredictionObstacle_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_PredictionObstacle_default_instance_;
    new (ptr) ::prediction::PredictionObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::PredictionObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PredictionObstacle_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPredictionObstacle_prediction_5fobstacle_2eproto}, {
      &scc_info_PerceptionObstacle_perception_5fobstacle_2eproto.base,
      &scc_info_Trajectory_prediction_5fobstacle_2eproto.base,
      &scc_info_ObstacleIntent_prediction_5fobstacle_2eproto.base,
      &scc_info_ObstaclePriority_prediction_5fobstacle_2eproto.base,
      &scc_info_ObstacleInteractiveTag_prediction_5fobstacle_2eproto.base,}};

static void InitDefaultsPredictionObstacles_prediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prediction::_PredictionObstacles_default_instance_;
    new (ptr) ::prediction::PredictionObstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction::PredictionObstacles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PredictionObstacles_prediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPredictionObstacles_prediction_5fobstacle_2eproto}, {
      &scc_info_PredictionObstacle_prediction_5fobstacle_2eproto.base,
      &scc_info_Intent_prediction_5fobstacle_2eproto.base,}};

void InitDefaults_prediction_5fobstacle_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleIntent_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intent_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleInteractiveTag_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstaclePriority_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trajectory_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictionObstacle_prediction_5fobstacle_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictionObstacles_prediction_5fobstacle_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_prediction_5fobstacle_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_prediction_5fobstacle_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_prediction_5fobstacle_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_prediction_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleIntent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleIntent, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::prediction::Intent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::Intent, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleInteractiveTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleInteractiveTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::ObstacleInteractiveTag, interactive_tag_),
  0,
  PROTOBUF_FIELD_OFFSET(::prediction::ObstaclePriority, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::ObstaclePriority, priority_),
  0,
  PROTOBUF_FIELD_OFFSET(::prediction::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::Trajectory, probability_),
  PROTOBUF_FIELD_OFFSET(::prediction::Trajectory, trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, predicted_period_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, trajectory_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, intent_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, priority_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacle, is_static_),
  0,
  4,
  5,
  ~0u,
  1,
  2,
  3,
  6,
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, prediction_obstacle_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::prediction::PredictionObstacles, intent_),
  ~0u,
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::prediction::ObstacleIntent)},
  { 7, 13, sizeof(::prediction::Intent)},
  { 14, 20, sizeof(::prediction::ObstacleInteractiveTag)},
  { 21, 27, sizeof(::prediction::ObstaclePriority)},
  { 28, 35, sizeof(::prediction::Trajectory)},
  { 37, 50, sizeof(::prediction::PredictionObstacle)},
  { 58, 67, sizeof(::prediction::PredictionObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_ObstacleIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_Intent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_ObstacleInteractiveTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_ObstaclePriority_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_PredictionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction::_PredictionObstacles_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_prediction_5fobstacle_2eproto = {
  {}, AddDescriptors_prediction_5fobstacle_2eproto, "prediction_obstacle.proto", schemas,
  file_default_instances, TableStruct_prediction_5fobstacle_2eproto::offsets,
  file_level_metadata_prediction_5fobstacle_2eproto, 7, file_level_enum_descriptors_prediction_5fobstacle_2eproto, file_level_service_descriptors_prediction_5fobstacle_2eproto,
};

const char descriptor_table_protodef_prediction_5fobstacle_2eproto[] =
  "\n\031prediction_obstacle.proto\022\nprediction\032"
  "\017pnc_point.proto\032\031perception_obstacle.pr"
  "oto\"\357\001\n\016ObstacleIntent\0226\n\004type\030\001 \001(\0162\037.p"
  "rediction.ObstacleIntent.Type:\007UNKNOWN\"\244"
  "\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\016\n\nSTATIO"
  "NARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHANGE_LANE\020\004\022\024\n\020L"
  "OW_ACCELERATION\020\005\022\025\n\021HIGH_ACCELERATION\020\006"
  "\022\024\n\020LOW_DECELERATION\020\007\022\025\n\021HIGH_DECELERAT"
  "ION\020\010\"t\n\006Intent\022.\n\004type\030\001 \001(\0162\027.predicti"
  "on.Intent.Type:\007UNKNOWN\":\n\004Type\022\013\n\007UNKNO"
  "WN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE\020\002\022\017\n\013CHANGE_LAN"
  "E\020\003\"\253\001\n\026ObstacleInteractiveTag\022Z\n\017intera"
  "ctive_tag\030% \001(\01621.prediction.ObstacleInt"
  "eractiveTag.InteractiveTag:\016NONINTERACTI"
  "ON\"5\n\016InteractiveTag\022\017\n\013INTERACTION\020\001\022\022\n"
  "\016NONINTERACTION\020\002\"\204\001\n\020ObstaclePriority\022\?"
  "\n\010priority\030\031 \001(\0162%.prediction.ObstaclePr"
  "iority.Priority:\006NORMAL\"/\n\010Priority\022\013\n\007C"
  "AUTION\020\001\022\n\n\006NORMAL\020\002\022\n\n\006IGNORE\020\003\"T\n\nTraj"
  "ectory\022\023\n\013probability\030\001 \001(\001\0221\n\020trajector"
  "y_point\030\002 \003(\0132\027.points.TrajectoryPoint\"\335"
  "\002\n\022PredictionObstacle\022;\n\023perception_obst"
  "acle\030\001 \001(\0132\036.perception.PerceptionObstac"
  "le\022\021\n\ttimestamp\030\002 \001(\001\022\030\n\020predicted_perio"
  "d\030\003 \001(\001\022*\n\ntrajectory\030\004 \003(\0132\026.prediction"
  ".Trajectory\022*\n\006intent\030\005 \001(\0132\032.prediction"
  ".ObstacleIntent\022.\n\010priority\030\006 \001(\0132\034.pred"
  "iction.ObstaclePriority\022;\n\017interactive_t"
  "ag\030\t \001(\0132\".prediction.ObstacleInteractiv"
  "eTag\022\030\n\tis_static\030\007 \001(\010:\005false\"\246\001\n\023Predi"
  "ctionObstacles\022;\n\023prediction_obstacle\030\001 "
  "\003(\0132\036.prediction.PredictionObstacle\022\027\n\017s"
  "tart_timestamp\030\002 \001(\001\022\025\n\rend_timestamp\030\003 "
  "\001(\001\022\"\n\006intent\030\004 \001(\0132\022.prediction.Intent"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_prediction_5fobstacle_2eproto = {
  false, InitDefaults_prediction_5fobstacle_2eproto, 
  descriptor_table_protodef_prediction_5fobstacle_2eproto,
  "prediction_obstacle.proto", &assign_descriptors_table_prediction_5fobstacle_2eproto, 1359,
};

void AddDescriptors_prediction_5fobstacle_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_pnc_5fpoint_2eproto,
    ::AddDescriptors_perception_5fobstacle_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_prediction_5fobstacle_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_prediction_5fobstacle_2eproto = []() { AddDescriptors_prediction_5fobstacle_2eproto(); return true; }();
namespace prediction {
const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_prediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_prediction_5fobstacle_2eproto[0];
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleIntent_Type ObstacleIntent::UNKNOWN;
const ObstacleIntent_Type ObstacleIntent::STOP;
const ObstacleIntent_Type ObstacleIntent::STATIONARY;
const ObstacleIntent_Type ObstacleIntent::MOVING;
const ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
const ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::Type_MIN;
const ObstacleIntent_Type ObstacleIntent::Type_MAX;
const int ObstacleIntent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_prediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_prediction_5fobstacle_2eproto[1];
}
bool Intent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Intent_Type Intent::UNKNOWN;
const Intent_Type Intent::STOP;
const Intent_Type Intent::CRUISE;
const Intent_Type Intent::CHANGE_LANE;
const Intent_Type Intent::Type_MIN;
const Intent_Type Intent::Type_MAX;
const int Intent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_prediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_prediction_5fobstacle_2eproto[2];
}
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::INTERACTION;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::NONINTERACTION;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MIN;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MAX;
const int ObstacleInteractiveTag::InteractiveTag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_prediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_prediction_5fobstacle_2eproto[3];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstaclePriority_Priority ObstaclePriority::CAUTION;
const ObstaclePriority_Priority ObstaclePriority::NORMAL;
const ObstaclePriority_Priority ObstaclePriority::IGNORE;
const ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
const ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
const int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ObstacleIntent::InitAsDefaultInstance() {
}
class ObstacleIntent::HasBitSetters {
 public:
  static void set_has_type(ObstacleIntent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleIntent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleIntent::ObstacleIntent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.ObstacleIntent)
}
ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:prediction.ObstacleIntent)
}

void ObstacleIntent::SharedCtor() {
  type_ = 0;
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:prediction.ObstacleIntent)
  SharedDtor();
}

void ObstacleIntent::SharedDtor() {
}

void ObstacleIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleIntent& ObstacleIntent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObstacleIntent_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.ObstacleIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleIntent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObstacleIntent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::prediction::ObstacleIntent_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::prediction::ObstacleIntent_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.ObstacleIntent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::prediction::ObstacleIntent_Type_IsValid(value)) {
            set_type(static_cast< ::prediction::ObstacleIntent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.ObstacleIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.ObstacleIntent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.ObstacleIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.ObstacleIntent)
}

::google::protobuf::uint8* ObstacleIntent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.ObstacleIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.ObstacleIntent)
  return target;
}

size_t ObstacleIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.ObstacleIntent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleIntent* source =
      ::google::protobuf::DynamicCastToGenerated<ObstacleIntent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.ObstacleIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.ObstacleIntent)
    MergeFrom(*source);
  }
}

void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObstacleIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {
  return true;
}

void ObstacleIntent::Swap(ObstacleIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ObstacleIntent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Intent::InitAsDefaultInstance() {
}
class Intent::HasBitSetters {
 public:
  static void set_has_type(Intent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.Intent)
}
Intent::Intent(const Intent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:prediction.Intent)
}

void Intent::SharedCtor() {
  type_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:prediction.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
}

void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intent& Intent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Intent_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Intent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Intent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::prediction::Intent_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::prediction::Intent_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.Intent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::prediction::Intent_Type_IsValid(value)) {
            set_type(static_cast< ::prediction::Intent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.Intent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.Intent)
}

::google::protobuf::uint8* Intent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.Intent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  const Intent* source =
      ::google::protobuf::DynamicCastToGenerated<Intent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.Intent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.Intent)
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void Intent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Intent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObstacleInteractiveTag::InitAsDefaultInstance() {
}
class ObstacleInteractiveTag::HasBitSetters {
 public:
  static void set_has_interactive_tag(ObstacleInteractiveTag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleInteractiveTag::kInteractiveTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleInteractiveTag::ObstacleInteractiveTag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.ObstacleInteractiveTag)
}
ObstacleInteractiveTag::ObstacleInteractiveTag(const ObstacleInteractiveTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interactive_tag_ = from.interactive_tag_;
  // @@protoc_insertion_point(copy_constructor:prediction.ObstacleInteractiveTag)
}

void ObstacleInteractiveTag::SharedCtor() {
  interactive_tag_ = 2;
}

ObstacleInteractiveTag::~ObstacleInteractiveTag() {
  // @@protoc_insertion_point(destructor:prediction.ObstacleInteractiveTag)
  SharedDtor();
}

void ObstacleInteractiveTag::SharedDtor() {
}

void ObstacleInteractiveTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleInteractiveTag& ObstacleInteractiveTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObstacleInteractiveTag_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void ObstacleInteractiveTag::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interactive_tag_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstacleInteractiveTag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObstacleInteractiveTag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(37, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_interactive_tag(static_cast<::prediction::ObstacleInteractiveTag_InteractiveTag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstacleInteractiveTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.ObstacleInteractiveTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value)) {
            set_interactive_tag(static_cast< ::prediction::ObstacleInteractiveTag_InteractiveTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.ObstacleInteractiveTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.ObstacleInteractiveTag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstacleInteractiveTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->interactive_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.ObstacleInteractiveTag)
}

::google::protobuf::uint8* ObstacleInteractiveTag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->interactive_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.ObstacleInteractiveTag)
  return target;
}

size_t ObstacleInteractiveTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.ObstacleInteractiveTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interactive_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleInteractiveTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleInteractiveTag* source =
      ::google::protobuf::DynamicCastToGenerated<ObstacleInteractiveTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.ObstacleInteractiveTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.ObstacleInteractiveTag)
    MergeFrom(*source);
  }
}

void ObstacleInteractiveTag::MergeFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interactive_tag()) {
    set_interactive_tag(from.interactive_tag());
  }
}

void ObstacleInteractiveTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleInteractiveTag::CopyFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInteractiveTag::IsInitialized() const {
  return true;
}

void ObstacleInteractiveTag::Swap(ObstacleInteractiveTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleInteractiveTag::InternalSwap(ObstacleInteractiveTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interactive_tag_, other->interactive_tag_);
}

::google::protobuf::Metadata ObstacleInteractiveTag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObstaclePriority::InitAsDefaultInstance() {
}
class ObstaclePriority::HasBitSetters {
 public:
  static void set_has_priority(ObstaclePriority* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstaclePriority::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstaclePriority::ObstaclePriority()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:prediction.ObstaclePriority)
}

void ObstaclePriority::SharedCtor() {
  priority_ = 2;
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:prediction.ObstaclePriority)
  SharedDtor();
}

void ObstaclePriority::SharedDtor() {
}

void ObstaclePriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstaclePriority& ObstaclePriority::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObstaclePriority_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstaclePriority::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObstaclePriority*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::prediction::ObstaclePriority_Priority_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(25, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_priority(static_cast<::prediction::ObstaclePriority_Priority>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstaclePriority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.ObstaclePriority)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::prediction::ObstaclePriority_Priority_IsValid(value)) {
            set_priority(static_cast< ::prediction::ObstaclePriority_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.ObstaclePriority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.ObstaclePriority)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstaclePriority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.ObstaclePriority)
}

::google::protobuf::uint8* ObstaclePriority::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.ObstaclePriority)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstaclePriority::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclePriority* source =
      ::google::protobuf::DynamicCastToGenerated<ObstaclePriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.ObstaclePriority)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.ObstaclePriority)
    MergeFrom(*source);
  }
}

void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_priority()) {
    set_priority(from.priority());
  }
}

void ObstaclePriority::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::Swap(ObstaclePriority* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(priority_, other->priority_);
}

::google::protobuf::Metadata ObstaclePriority::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
class Trajectory::HasBitSetters {
 public:
  static void set_has_probability(Trajectory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:prediction.Trajectory)
}

void Trajectory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trajectory_prediction_5fobstacle_2eproto.base);
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:prediction.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trajectory_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trajectory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trajectory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_probability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .points.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::points::TrajectoryPoint::_InternalParse;
          object = msg->add_trajectory_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.Trajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_probability(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .points.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.Trajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectory_point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  swap(probability_, other->probability_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PredictionObstacle::InitAsDefaultInstance() {
  ::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->perception_obstacle_ = const_cast< ::perception::PerceptionObstacle*>(
      ::perception::PerceptionObstacle::internal_default_instance());
  ::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->intent_ = const_cast< ::prediction::ObstacleIntent*>(
      ::prediction::ObstacleIntent::internal_default_instance());
  ::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->priority_ = const_cast< ::prediction::ObstaclePriority*>(
      ::prediction::ObstaclePriority::internal_default_instance());
  ::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->interactive_tag_ = const_cast< ::prediction::ObstacleInteractiveTag*>(
      ::prediction::ObstacleInteractiveTag::internal_default_instance());
}
class PredictionObstacle::HasBitSetters {
 public:
  static const ::perception::PerceptionObstacle& perception_obstacle(const PredictionObstacle* msg);
  static void set_has_perception_obstacle(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_predicted_period(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::prediction::ObstacleIntent& intent(const PredictionObstacle* msg);
  static void set_has_intent(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::prediction::ObstaclePriority& priority(const PredictionObstacle* msg);
  static void set_has_priority(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::prediction::ObstacleInteractiveTag& interactive_tag(const PredictionObstacle* msg);
  static void set_has_interactive_tag(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_static(PredictionObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::perception::PerceptionObstacle&
PredictionObstacle::HasBitSetters::perception_obstacle(const PredictionObstacle* msg) {
  return *msg->perception_obstacle_;
}
const ::prediction::ObstacleIntent&
PredictionObstacle::HasBitSetters::intent(const PredictionObstacle* msg) {
  return *msg->intent_;
}
const ::prediction::ObstaclePriority&
PredictionObstacle::HasBitSetters::priority(const PredictionObstacle* msg) {
  return *msg->priority_;
}
const ::prediction::ObstacleInteractiveTag&
PredictionObstacle::HasBitSetters::interactive_tag(const PredictionObstacle* msg) {
  return *msg->interactive_tag_;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (perception_obstacle_ != nullptr) perception_obstacle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacle::kPerceptionObstacleFieldNumber;
const int PredictionObstacle::kTimestampFieldNumber;
const int PredictionObstacle::kPredictedPeriodFieldNumber;
const int PredictionObstacle::kTrajectoryFieldNumber;
const int PredictionObstacle::kIntentFieldNumber;
const int PredictionObstacle::kPriorityFieldNumber;
const int PredictionObstacle::kInteractiveTagFieldNumber;
const int PredictionObstacle::kIsStaticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacle::PredictionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.PredictionObstacle)
}
PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perception_obstacle()) {
    perception_obstacle_ = new ::perception::PerceptionObstacle(*from.perception_obstacle_);
  } else {
    perception_obstacle_ = nullptr;
  }
  if (from.has_intent()) {
    intent_ = new ::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from.has_priority()) {
    priority_ = new ::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from.has_interactive_tag()) {
    interactive_tag_ = new ::prediction::ObstacleInteractiveTag(*from.interactive_tag_);
  } else {
    interactive_tag_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:prediction.PredictionObstacle)
}

void PredictionObstacle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PredictionObstacle_prediction_5fobstacle_2eproto.base);
  ::memset(&perception_obstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&perception_obstacle_)) + sizeof(is_static_));
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:prediction.PredictionObstacle)
  SharedDtor();
}

void PredictionObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete perception_obstacle_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete interactive_tag_;
}

void PredictionObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionObstacle& PredictionObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PredictionObstacle_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.PredictionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perception_obstacle_ != nullptr);
      perception_obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(priority_ != nullptr);
      priority_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(interactive_tag_ != nullptr);
      interactive_tag_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_static_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictionObstacle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PredictionObstacle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::perception::PerceptionObstacle::_InternalParse;
        object = msg->mutable_perception_obstacle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double predicted_period = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_predicted_period(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .prediction.Trajectory trajectory = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::prediction::Trajectory::_InternalParse;
          object = msg->add_trajectory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional .prediction.ObstacleIntent intent = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::prediction::ObstacleIntent::_InternalParse;
        object = msg->mutable_intent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .prediction.ObstaclePriority priority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::prediction::ObstaclePriority::_InternalParse;
        object = msg->mutable_priority();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool is_static = 7 [default = false];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_is_static(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::prediction::ObstacleInteractiveTag::_InternalParse;
        object = msg->mutable_interactive_tag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.PredictionObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double predicted_period = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_predicted_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predicted_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction.Trajectory trajectory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .prediction.ObstacleIntent intent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .prediction.ObstaclePriority priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_is_static(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.PredictionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.PredictionObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.PredictionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::perception_obstacle(this), output);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->predicted_period(), output);
  }

  // repeated .prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->trajectory(static_cast<int>(i)),
      output);
  }

  // optional .prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::intent(this), output);
  }

  // optional .prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::priority(this), output);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_static(), output);
  }

  // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::interactive_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.PredictionObstacle)
}

::google::protobuf::uint8* PredictionObstacle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.PredictionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::perception_obstacle(this), target);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->predicted_period(), target);
  }

  // repeated .prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->trajectory(static_cast<int>(i)), target);
  }

  // optional .prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::intent(this), target);
  }

  // optional .prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::priority(this), target);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_static(), target);
  }

  // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::interactive_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.PredictionObstacle)
  return target;
}

size_t PredictionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.PredictionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prediction.Trajectory trajectory = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .perception.PerceptionObstacle perception_obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *perception_obstacle_);
    }

    // optional .prediction.ObstacleIntent intent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .prediction.ObstaclePriority priority = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *priority_);
    }

    // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *interactive_tag_);
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacle* source =
      ::google::protobuf::DynamicCastToGenerated<PredictionObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.PredictionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.PredictionObstacle)
    MergeFrom(*source);
  }
}

void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perception_obstacle()->::perception::PerceptionObstacle::MergeFrom(from.perception_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intent()->::prediction::ObstacleIntent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_priority()->::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_interactive_tag()->::prediction::ObstacleInteractiveTag::MergeFrom(from.interactive_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {
  return true;
}

void PredictionObstacle::Swap(PredictionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_)->InternalSwap(CastToBase(&other->trajectory_));
  swap(perception_obstacle_, other->perception_obstacle_);
  swap(intent_, other->intent_);
  swap(priority_, other->priority_);
  swap(interactive_tag_, other->interactive_tag_);
  swap(timestamp_, other->timestamp_);
  swap(predicted_period_, other->predicted_period_);
  swap(is_static_, other->is_static_);
}

::google::protobuf::Metadata PredictionObstacle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PredictionObstacles::InitAsDefaultInstance() {
  ::prediction::_PredictionObstacles_default_instance_._instance.get_mutable()->intent_ = const_cast< ::prediction::Intent*>(
      ::prediction::Intent::internal_default_instance());
}
class PredictionObstacles::HasBitSetters {
 public:
  static void set_has_start_timestamp(PredictionObstacles* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_end_timestamp(PredictionObstacles* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::prediction::Intent& intent(const PredictionObstacles* msg);
  static void set_has_intent(PredictionObstacles* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::prediction::Intent&
PredictionObstacles::HasBitSetters::intent(const PredictionObstacles* msg) {
  return *msg->intent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacles::kPredictionObstacleFieldNumber;
const int PredictionObstacles::kStartTimestampFieldNumber;
const int PredictionObstacles::kEndTimestampFieldNumber;
const int PredictionObstacles::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacles::PredictionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction.PredictionObstacles)
}
PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prediction_obstacle_(from.prediction_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intent()) {
    intent_ = new ::prediction::Intent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:prediction.PredictionObstacles)
}

void PredictionObstacles::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PredictionObstacles_prediction_5fobstacle_2eproto.base);
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(end_timestamp_));
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:prediction.PredictionObstacles)
  SharedDtor();
}

void PredictionObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete intent_;
}

void PredictionObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionObstacles& PredictionObstacles::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PredictionObstacles_prediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction.PredictionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(intent_ != nullptr);
    intent_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictionObstacles::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PredictionObstacles*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::prediction::PredictionObstacle::_InternalParse;
          object = msg->add_prediction_obstacle();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional double start_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double end_timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_end_timestamp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .prediction.Intent intent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::prediction::Intent::_InternalParse;
        object = msg->mutable_intent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction.PredictionObstacles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prediction_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_end_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .prediction.Intent intent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction.PredictionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction.PredictionObstacles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction.PredictionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prediction_obstacle(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double start_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_timestamp(), output);
  }

  // optional double end_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_timestamp(), output);
  }

  // optional .prediction.Intent intent = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::intent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction.PredictionObstacles)
}

::google::protobuf::uint8* PredictionObstacles::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:prediction.PredictionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prediction_obstacle(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double start_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_timestamp(), target);
  }

  // optional double end_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_timestamp(), target);
  }

  // optional .prediction.Intent intent = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::intent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction.PredictionObstacles)
  return target;
}

size_t PredictionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction.PredictionObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prediction_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prediction_obstacle(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .prediction.Intent intent = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional double start_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacles* source =
      ::google::protobuf::DynamicCastToGenerated<PredictionObstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction.PredictionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction.PredictionObstacles)
    MergeFrom(*source);
  }
}

void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prediction_obstacle_.MergeFrom(from.prediction_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intent()->::prediction::Intent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000002u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_timestamp_ = from.end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {
  return true;
}

void PredictionObstacles::Swap(PredictionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&prediction_obstacle_)->InternalSwap(CastToBase(&other->prediction_obstacle_));
  swap(intent_, other->intent_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
}

::google::protobuf::Metadata PredictionObstacles::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prediction_5fobstacle_2eproto);
  return ::file_level_metadata_prediction_5fobstacle_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::prediction::ObstacleIntent* Arena::CreateMaybeMessage< ::prediction::ObstacleIntent >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::ObstacleIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::Intent* Arena::CreateMaybeMessage< ::prediction::Intent >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::Intent >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::ObstacleInteractiveTag* Arena::CreateMaybeMessage< ::prediction::ObstacleInteractiveTag >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::ObstacleInteractiveTag >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::ObstaclePriority* Arena::CreateMaybeMessage< ::prediction::ObstaclePriority >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::ObstaclePriority >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::Trajectory* Arena::CreateMaybeMessage< ::prediction::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::PredictionObstacle* Arena::CreateMaybeMessage< ::prediction::PredictionObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::PredictionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::prediction::PredictionObstacles* Arena::CreateMaybeMessage< ::prediction::PredictionObstacles >(Arena* arena) {
  return Arena::CreateInternal< ::prediction::PredictionObstacles >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
