// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_INCLUDED_header_2eproto
#define PROTOBUF_INCLUDED_header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_header_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_header_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_header_2eproto();
namespace controller {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::Header* Arena::CreateMaybeMessage<::controller::Header>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

// ===================================================================

class Header :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module_name = 2;
  bool has_module_name() const;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 2;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // optional string frame_id = 9;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 9;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional .controller.StatusPb status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  const ::controller::StatusPb& status() const;
  ::controller::StatusPb* release_status();
  ::controller::StatusPb* mutable_status();
  void set_allocated_status(::controller::StatusPb* status);

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 1;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  // optional uint64 lidar_timestamp = 4;
  bool has_lidar_timestamp() const;
  void clear_lidar_timestamp();
  static const int kLidarTimestampFieldNumber = 4;
  ::google::protobuf::uint64 lidar_timestamp() const;
  void set_lidar_timestamp(::google::protobuf::uint64 value);

  // optional uint64 camera_timestamp = 5;
  bool has_camera_timestamp() const;
  void clear_camera_timestamp();
  static const int kCameraTimestampFieldNumber = 5;
  ::google::protobuf::uint64 camera_timestamp() const;
  void set_camera_timestamp(::google::protobuf::uint64 value);

  // optional uint64 radar_timestamp = 6;
  bool has_radar_timestamp() const;
  void clear_radar_timestamp();
  static const int kRadarTimestampFieldNumber = 6;
  ::google::protobuf::uint64 radar_timestamp() const;
  void set_radar_timestamp(::google::protobuf::uint64 value);

  // optional uint32 sequence_num = 3;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 3;
  ::google::protobuf::uint32 sequence_num() const;
  void set_sequence_num(::google::protobuf::uint32 value);

  // optional uint32 version = 7 [default = 1];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:controller.Header)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::controller::StatusPb* status_;
  double timestamp_sec_;
  ::google::protobuf::uint64 lidar_timestamp_;
  ::google::protobuf::uint64 camera_timestamp_;
  ::google::protobuf::uint64 radar_timestamp_;
  ::google::protobuf::uint32 sequence_num_;
  ::google::protobuf::uint32 version_;
  friend struct ::TableStruct_header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional double timestamp_sec = 1;
inline bool Header::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:controller.Header.timestamp_sec)
  return timestamp_sec_;
}
inline void Header::set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.timestamp_sec)
}

// optional string module_name = 2;
inline bool Header::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Header::module_name() const {
  // @@protoc_insertion_point(field_get:controller.Header.module_name)
  return module_name_.GetNoArena();
}
inline void Header::set_module_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:controller.Header.module_name)
}
#if LANG_CXX11
inline void Header::set_module_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:controller.Header.module_name)
}
#endif
inline void Header::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:controller.Header.module_name)
}
inline void Header::set_module_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:controller.Header.module_name)
}
inline ::std::string* Header::mutable_module_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:controller.Header.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_module_name() {
  // @@protoc_insertion_point(field_release:controller.Header.module_name)
  if (!has_module_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return module_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_module_name(::std::string* module_name) {
  if (module_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:controller.Header.module_name)
}

// optional uint32 sequence_num = 3;
inline bool Header::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::clear_sequence_num() {
  sequence_num_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 Header::sequence_num() const {
  // @@protoc_insertion_point(field_get:controller.Header.sequence_num)
  return sequence_num_;
}
inline void Header::set_sequence_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.sequence_num)
}

// optional uint64 lidar_timestamp = 4;
inline bool Header::has_lidar_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::clear_lidar_timestamp() {
  lidar_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 Header::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:controller.Header.lidar_timestamp)
  return lidar_timestamp_;
}
inline void Header::set_lidar_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  lidar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.lidar_timestamp)
}

// optional uint64 camera_timestamp = 5;
inline bool Header::has_camera_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::clear_camera_timestamp() {
  camera_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 Header::camera_timestamp() const {
  // @@protoc_insertion_point(field_get:controller.Header.camera_timestamp)
  return camera_timestamp_;
}
inline void Header::set_camera_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  camera_timestamp_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.camera_timestamp)
}

// optional uint64 radar_timestamp = 6;
inline bool Header::has_radar_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::clear_radar_timestamp() {
  radar_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 Header::radar_timestamp() const {
  // @@protoc_insertion_point(field_get:controller.Header.radar_timestamp)
  return radar_timestamp_;
}
inline void Header::set_radar_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  radar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.radar_timestamp)
}

// optional uint32 version = 7 [default = 1];
inline bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Header::clear_version() {
  version_ = 1u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:controller.Header.version)
  return version_;
}
inline void Header::set_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  version_ = value;
  // @@protoc_insertion_point(field_set:controller.Header.version)
}

// optional .controller.StatusPb status = 8;
inline bool Header::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::controller::StatusPb& Header::status() const {
  const ::controller::StatusPb* p = status_;
  // @@protoc_insertion_point(field_get:controller.Header.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::StatusPb*>(
      &::controller::_StatusPb_default_instance_);
}
inline ::controller::StatusPb* Header::release_status() {
  // @@protoc_insertion_point(field_release:controller.Header.status)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::StatusPb* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::controller::StatusPb* Header::mutable_status() {
  _has_bits_[0] |= 0x00000004u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::StatusPb>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Header.status)
  return status_;
}
inline void Header::set_allocated_status(::controller::StatusPb* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:controller.Header.status)
}

// optional string frame_id = 9;
inline bool Header::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:controller.Header.frame_id)
  return frame_id_.GetNoArena();
}
inline void Header::set_frame_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:controller.Header.frame_id)
}
#if LANG_CXX11
inline void Header::set_frame_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:controller.Header.frame_id)
}
#endif
inline void Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:controller.Header.frame_id)
}
inline void Header::set_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:controller.Header.frame_id)
}
inline ::std::string* Header::mutable_frame_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:controller.Header.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:controller.Header.frame_id)
  if (!has_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:controller.Header.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_header_2eproto
