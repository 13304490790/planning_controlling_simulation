// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration_table.proto

#include "calibration_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_calibration_5ftable_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlCalibrationInfo_calibration_5ftable_2eproto;
namespace controller {
class ControlCalibrationTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlCalibrationTable> _instance;
} _ControlCalibrationTable_default_instance_;
class ControlCalibrationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlCalibrationInfo> _instance;
} _ControlCalibrationInfo_default_instance_;
}  // namespace controller
static void InitDefaultsControlCalibrationTable_calibration_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_ControlCalibrationTable_default_instance_;
    new (ptr) ::controller::ControlCalibrationTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::ControlCalibrationTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControlCalibrationTable_calibration_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControlCalibrationTable_calibration_5ftable_2eproto}, {
      &scc_info_ControlCalibrationInfo_calibration_5ftable_2eproto.base,}};

static void InitDefaultsControlCalibrationInfo_calibration_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_ControlCalibrationInfo_default_instance_;
    new (ptr) ::controller::ControlCalibrationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::ControlCalibrationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlCalibrationInfo_calibration_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlCalibrationInfo_calibration_5ftable_2eproto}, {}};

void InitDefaults_calibration_5ftable_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControlCalibrationTable_calibration_5ftable_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlCalibrationInfo_calibration_5ftable_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_calibration_5ftable_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_calibration_5ftable_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_calibration_5ftable_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_calibration_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationTable, calibration_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationInfo, acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlCalibrationInfo, command_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::controller::ControlCalibrationTable)},
  { 7, 15, sizeof(::controller::ControlCalibrationInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_ControlCalibrationTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_ControlCalibrationInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_calibration_5ftable_2eproto = {
  {}, AddDescriptors_calibration_5ftable_2eproto, "calibration_table.proto", schemas,
  file_default_instances, TableStruct_calibration_5ftable_2eproto::offsets,
  file_level_metadata_calibration_5ftable_2eproto, 2, file_level_enum_descriptors_calibration_5ftable_2eproto, file_level_service_descriptors_calibration_5ftable_2eproto,
};

const char descriptor_table_protodef_calibration_5ftable_2eproto[] =
  "\n\027calibration_table.proto\022\ncontroller\"R\n"
  "\027ControlCalibrationTable\0227\n\013calibration\030"
  "\001 \003(\0132\".controller.ControlCalibrationInf"
  "o\"N\n\026ControlCalibrationInfo\022\r\n\005speed\030\001 \001"
  "(\001\022\024\n\014acceleration\030\002 \001(\001\022\017\n\007command\030\003 \001("
  "\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_calibration_5ftable_2eproto = {
  false, InitDefaults_calibration_5ftable_2eproto, 
  descriptor_table_protodef_calibration_5ftable_2eproto,
  "calibration_table.proto", &assign_descriptors_table_calibration_5ftable_2eproto, 201,
};

void AddDescriptors_calibration_5ftable_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_calibration_5ftable_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_calibration_5ftable_2eproto = []() { AddDescriptors_calibration_5ftable_2eproto(); return true; }();
namespace controller {

// ===================================================================

void ControlCalibrationTable::InitAsDefaultInstance() {
}
class ControlCalibrationTable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCalibrationTable::kCalibrationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCalibrationTable::ControlCalibrationTable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.ControlCalibrationTable)
}
ControlCalibrationTable::ControlCalibrationTable(const ControlCalibrationTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      calibration_(from.calibration_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:controller.ControlCalibrationTable)
}

void ControlCalibrationTable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ControlCalibrationTable_calibration_5ftable_2eproto.base);
}

ControlCalibrationTable::~ControlCalibrationTable() {
  // @@protoc_insertion_point(destructor:controller.ControlCalibrationTable)
  SharedDtor();
}

void ControlCalibrationTable::SharedDtor() {
}

void ControlCalibrationTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlCalibrationTable& ControlCalibrationTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ControlCalibrationTable_calibration_5ftable_2eproto.base);
  return *internal_default_instance();
}


void ControlCalibrationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.ControlCalibrationTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calibration_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlCalibrationTable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ControlCalibrationTable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .controller.ControlCalibrationInfo calibration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::controller::ControlCalibrationInfo::_InternalParse;
          object = msg->add_calibration();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlCalibrationTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.ControlCalibrationTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .controller.ControlCalibrationInfo calibration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_calibration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.ControlCalibrationTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.ControlCalibrationTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlCalibrationTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.ControlCalibrationTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .controller.ControlCalibrationInfo calibration = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibration_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->calibration(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.ControlCalibrationTable)
}

::google::protobuf::uint8* ControlCalibrationTable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.ControlCalibrationTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .controller.ControlCalibrationInfo calibration = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibration_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->calibration(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.ControlCalibrationTable)
  return target;
}

size_t ControlCalibrationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.ControlCalibrationTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .controller.ControlCalibrationInfo calibration = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->calibration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calibration(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCalibrationTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.ControlCalibrationTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCalibrationTable* source =
      ::google::protobuf::DynamicCastToGenerated<ControlCalibrationTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.ControlCalibrationTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.ControlCalibrationTable)
    MergeFrom(*source);
  }
}

void ControlCalibrationTable::MergeFrom(const ControlCalibrationTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.ControlCalibrationTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calibration_.MergeFrom(from.calibration_);
}

void ControlCalibrationTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.ControlCalibrationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCalibrationTable::CopyFrom(const ControlCalibrationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.ControlCalibrationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCalibrationTable::IsInitialized() const {
  return true;
}

void ControlCalibrationTable::Swap(ControlCalibrationTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCalibrationTable::InternalSwap(ControlCalibrationTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&calibration_)->InternalSwap(CastToBase(&other->calibration_));
}

::google::protobuf::Metadata ControlCalibrationTable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_5ftable_2eproto);
  return ::file_level_metadata_calibration_5ftable_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ControlCalibrationInfo::InitAsDefaultInstance() {
}
class ControlCalibrationInfo::HasBitSetters {
 public:
  static void set_has_speed(ControlCalibrationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_acceleration(ControlCalibrationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_command(ControlCalibrationInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCalibrationInfo::kSpeedFieldNumber;
const int ControlCalibrationInfo::kAccelerationFieldNumber;
const int ControlCalibrationInfo::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCalibrationInfo::ControlCalibrationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.ControlCalibrationInfo)
}
ControlCalibrationInfo::ControlCalibrationInfo(const ControlCalibrationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:controller.ControlCalibrationInfo)
}

void ControlCalibrationInfo::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(command_));
}

ControlCalibrationInfo::~ControlCalibrationInfo() {
  // @@protoc_insertion_point(destructor:controller.ControlCalibrationInfo)
  SharedDtor();
}

void ControlCalibrationInfo::SharedDtor() {
}

void ControlCalibrationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlCalibrationInfo& ControlCalibrationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ControlCalibrationInfo_calibration_5ftable_2eproto.base);
  return *internal_default_instance();
}


void ControlCalibrationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.ControlCalibrationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(command_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlCalibrationInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ControlCalibrationInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double speed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double acceleration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double command = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_command(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlCalibrationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.ControlCalibrationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_command(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.ControlCalibrationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.ControlCalibrationInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlCalibrationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.ControlCalibrationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // optional double acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acceleration(), output);
  }

  // optional double command = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.ControlCalibrationInfo)
}

::google::protobuf::uint8* ControlCalibrationInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.ControlCalibrationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // optional double acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acceleration(), target);
  }

  // optional double command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.ControlCalibrationInfo)
  return target;
}

size_t ControlCalibrationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.ControlCalibrationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCalibrationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.ControlCalibrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCalibrationInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ControlCalibrationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.ControlCalibrationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.ControlCalibrationInfo)
    MergeFrom(*source);
  }
}

void ControlCalibrationInfo::MergeFrom(const ControlCalibrationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.ControlCalibrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlCalibrationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.ControlCalibrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCalibrationInfo::CopyFrom(const ControlCalibrationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.ControlCalibrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCalibrationInfo::IsInitialized() const {
  return true;
}

void ControlCalibrationInfo::Swap(ControlCalibrationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCalibrationInfo::InternalSwap(ControlCalibrationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(command_, other->command_);
}

::google::protobuf::Metadata ControlCalibrationInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_5ftable_2eproto);
  return ::file_level_metadata_calibration_5ftable_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::ControlCalibrationTable* Arena::CreateMaybeMessage< ::controller::ControlCalibrationTable >(Arena* arena) {
  return Arena::CreateInternal< ::controller::ControlCalibrationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::controller::ControlCalibrationInfo* Arena::CreateMaybeMessage< ::controller::ControlCalibrationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::controller::ControlCalibrationInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
