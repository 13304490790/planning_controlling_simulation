// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#ifndef PROTOBUF_INCLUDED_localization_2eproto
#define PROTOBUF_INCLUDED_localization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
#include "pnc_point.pb.h"
#include "localization_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localization_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_localization_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_localization_2eproto();
namespace controller {
class LocalizationEstimate;
class LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::LocalizationEstimate* Arena::CreateMaybeMessage<::controller::LocalizationEstimate>(Arena*);
template<> ::controller::Pose* Arena::CreateMaybeMessage<::controller::Pose>(Arena*);
template<> ::controller::Uncertainty* Arena::CreateMaybeMessage<::controller::Uncertainty>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

// ===================================================================

class Pose :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .geometry.PointENU position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::geometry::PointENU& position() const;
  ::geometry::PointENU* release_position();
  ::geometry::PointENU* mutable_position();
  void set_allocated_position(::geometry::PointENU* position);

  // optional .geometry.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::geometry::Quaternion& orientation() const;
  ::geometry::Quaternion* release_orientation();
  ::geometry::Quaternion* mutable_orientation();
  void set_allocated_orientation(::geometry::Quaternion* orientation);

  // optional .geometry.Point3D linear_velocity = 3;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 3;
  const ::geometry::Point3D& linear_velocity() const;
  ::geometry::Point3D* release_linear_velocity();
  ::geometry::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::geometry::Point3D* linear_velocity);

  // optional .geometry.Point3D linear_acceleration = 4;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 4;
  const ::geometry::Point3D& linear_acceleration() const;
  ::geometry::Point3D* release_linear_acceleration();
  ::geometry::Point3D* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::geometry::Point3D* linear_acceleration);

  // optional .geometry.Point3D angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 5;
  const ::geometry::Point3D& angular_velocity() const;
  ::geometry::Point3D* release_angular_velocity();
  ::geometry::Point3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::geometry::Point3D* angular_velocity);

  // optional .geometry.Point3D linear_acceleration_vrf = 7;
  bool has_linear_acceleration_vrf() const;
  void clear_linear_acceleration_vrf();
  static const int kLinearAccelerationVrfFieldNumber = 7;
  const ::geometry::Point3D& linear_acceleration_vrf() const;
  ::geometry::Point3D* release_linear_acceleration_vrf();
  ::geometry::Point3D* mutable_linear_acceleration_vrf();
  void set_allocated_linear_acceleration_vrf(::geometry::Point3D* linear_acceleration_vrf);

  // optional .geometry.Point3D angular_velocity_vrf = 8;
  bool has_angular_velocity_vrf() const;
  void clear_angular_velocity_vrf();
  static const int kAngularVelocityVrfFieldNumber = 8;
  const ::geometry::Point3D& angular_velocity_vrf() const;
  ::geometry::Point3D* release_angular_velocity_vrf();
  ::geometry::Point3D* mutable_angular_velocity_vrf();
  void set_allocated_angular_velocity_vrf(::geometry::Point3D* angular_velocity_vrf);

  // optional .geometry.Point3D euler_angles = 9;
  bool has_euler_angles() const;
  void clear_euler_angles();
  static const int kEulerAnglesFieldNumber = 9;
  const ::geometry::Point3D& euler_angles() const;
  ::geometry::Point3D* release_euler_angles();
  ::geometry::Point3D* mutable_euler_angles();
  void set_allocated_euler_angles(::geometry::Point3D* euler_angles);

  // optional double heading = 6;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 6;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:controller.Pose)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::geometry::PointENU* position_;
  ::geometry::Quaternion* orientation_;
  ::geometry::Point3D* linear_velocity_;
  ::geometry::Point3D* linear_acceleration_;
  ::geometry::Point3D* angular_velocity_;
  ::geometry::Point3D* linear_acceleration_vrf_;
  ::geometry::Point3D* angular_velocity_vrf_;
  ::geometry::Point3D* euler_angles_;
  double heading_;
  friend struct ::TableStruct_localization_2eproto;
};
// -------------------------------------------------------------------

class Uncertainty :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.Uncertainty) */ {
 public:
  Uncertainty();
  virtual ~Uncertainty();

  Uncertainty(const Uncertainty& from);

  inline Uncertainty& operator=(const Uncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uncertainty(Uncertainty&& from) noexcept
    : Uncertainty() {
    *this = ::std::move(from);
  }

  inline Uncertainty& operator=(Uncertainty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Uncertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uncertainty* internal_default_instance() {
    return reinterpret_cast<const Uncertainty*>(
               &_Uncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Uncertainty* other);
  friend void swap(Uncertainty& a, Uncertainty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uncertainty* New() const final {
    return CreateMaybeMessage<Uncertainty>(nullptr);
  }

  Uncertainty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uncertainty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uncertainty& from);
  void MergeFrom(const Uncertainty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .geometry.Point3D position_std_dev = 1;
  bool has_position_std_dev() const;
  void clear_position_std_dev();
  static const int kPositionStdDevFieldNumber = 1;
  const ::geometry::Point3D& position_std_dev() const;
  ::geometry::Point3D* release_position_std_dev();
  ::geometry::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::geometry::Point3D* position_std_dev);

  // optional .geometry.Point3D orientation_std_dev = 2;
  bool has_orientation_std_dev() const;
  void clear_orientation_std_dev();
  static const int kOrientationStdDevFieldNumber = 2;
  const ::geometry::Point3D& orientation_std_dev() const;
  ::geometry::Point3D* release_orientation_std_dev();
  ::geometry::Point3D* mutable_orientation_std_dev();
  void set_allocated_orientation_std_dev(::geometry::Point3D* orientation_std_dev);

  // optional .geometry.Point3D linear_velocity_std_dev = 3;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev();
  static const int kLinearVelocityStdDevFieldNumber = 3;
  const ::geometry::Point3D& linear_velocity_std_dev() const;
  ::geometry::Point3D* release_linear_velocity_std_dev();
  ::geometry::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::geometry::Point3D* linear_velocity_std_dev);

  // optional .geometry.Point3D linear_acceleration_std_dev = 4;
  bool has_linear_acceleration_std_dev() const;
  void clear_linear_acceleration_std_dev();
  static const int kLinearAccelerationStdDevFieldNumber = 4;
  const ::geometry::Point3D& linear_acceleration_std_dev() const;
  ::geometry::Point3D* release_linear_acceleration_std_dev();
  ::geometry::Point3D* mutable_linear_acceleration_std_dev();
  void set_allocated_linear_acceleration_std_dev(::geometry::Point3D* linear_acceleration_std_dev);

  // optional .geometry.Point3D angular_velocity_std_dev = 5;
  bool has_angular_velocity_std_dev() const;
  void clear_angular_velocity_std_dev();
  static const int kAngularVelocityStdDevFieldNumber = 5;
  const ::geometry::Point3D& angular_velocity_std_dev() const;
  ::geometry::Point3D* release_angular_velocity_std_dev();
  ::geometry::Point3D* mutable_angular_velocity_std_dev();
  void set_allocated_angular_velocity_std_dev(::geometry::Point3D* angular_velocity_std_dev);

  // @@protoc_insertion_point(class_scope:controller.Uncertainty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::geometry::Point3D* position_std_dev_;
  ::geometry::Point3D* orientation_std_dev_;
  ::geometry::Point3D* linear_velocity_std_dev_;
  ::geometry::Point3D* linear_acceleration_std_dev_;
  ::geometry::Point3D* angular_velocity_std_dev_;
  friend struct ::TableStruct_localization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationEstimate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.LocalizationEstimate) */ {
 public:
  LocalizationEstimate();
  virtual ~LocalizationEstimate();

  LocalizationEstimate(const LocalizationEstimate& from);

  inline LocalizationEstimate& operator=(const LocalizationEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalizationEstimate(LocalizationEstimate&& from) noexcept
    : LocalizationEstimate() {
    *this = ::std::move(from);
  }

  inline LocalizationEstimate& operator=(LocalizationEstimate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LocalizationEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationEstimate* internal_default_instance() {
    return reinterpret_cast<const LocalizationEstimate*>(
               &_LocalizationEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LocalizationEstimate* other);
  friend void swap(LocalizationEstimate& a, LocalizationEstimate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalizationEstimate* New() const final {
    return CreateMaybeMessage<LocalizationEstimate>(nullptr);
  }

  LocalizationEstimate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationEstimate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalizationEstimate& from);
  void MergeFrom(const LocalizationEstimate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationEstimate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .points.TrajectoryPoint trajectory_point = 5;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 5;
  ::points::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::points::TrajectoryPoint& trajectory_point(int index) const;
  ::points::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
      trajectory_point() const;

  // optional .controller.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::controller::Header& header() const;
  ::controller::Header* release_header();
  ::controller::Header* mutable_header();
  void set_allocated_header(::controller::Header* header);

  // optional .controller.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::controller::Pose& pose() const;
  ::controller::Pose* release_pose();
  ::controller::Pose* mutable_pose();
  void set_allocated_pose(::controller::Pose* pose);

  // optional .controller.Uncertainty uncertainty = 3;
  bool has_uncertainty() const;
  void clear_uncertainty();
  static const int kUncertaintyFieldNumber = 3;
  const ::controller::Uncertainty& uncertainty() const;
  ::controller::Uncertainty* release_uncertainty();
  ::controller::Uncertainty* mutable_uncertainty();
  void set_allocated_uncertainty(::controller::Uncertainty* uncertainty);

  // optional .controller.MsfStatus msf_status = 6;
  bool has_msf_status() const;
  void clear_msf_status();
  static const int kMsfStatusFieldNumber = 6;
  const ::controller::MsfStatus& msf_status() const;
  ::controller::MsfStatus* release_msf_status();
  ::controller::MsfStatus* mutable_msf_status();
  void set_allocated_msf_status(::controller::MsfStatus* msf_status);

  // optional .controller.MsfSensorMsgStatus sensor_status = 7;
  bool has_sensor_status() const;
  void clear_sensor_status();
  static const int kSensorStatusFieldNumber = 7;
  const ::controller::MsfSensorMsgStatus& sensor_status() const;
  ::controller::MsfSensorMsgStatus* release_sensor_status();
  ::controller::MsfSensorMsgStatus* mutable_sensor_status();
  void set_allocated_sensor_status(::controller::MsfSensorMsgStatus* sensor_status);

  // optional double measurement_time = 4;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 4;
  double measurement_time() const;
  void set_measurement_time(double value);

  // @@protoc_insertion_point(class_scope:controller.LocalizationEstimate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint > trajectory_point_;
  ::controller::Header* header_;
  ::controller::Pose* pose_;
  ::controller::Uncertainty* uncertainty_;
  ::controller::MsfStatus* msf_status_;
  ::controller::MsfSensorMsgStatus* sensor_status_;
  double measurement_time_;
  friend struct ::TableStruct_localization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// optional .geometry.PointENU position = 1;
inline bool Pose::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::geometry::PointENU& Pose::position() const {
  const ::geometry::PointENU* p = position_;
  // @@protoc_insertion_point(field_get:controller.Pose.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::PointENU*>(
      &::geometry::_PointENU_default_instance_);
}
inline ::geometry::PointENU* Pose::release_position() {
  // @@protoc_insertion_point(field_release:controller.Pose.position)
  _has_bits_[0] &= ~0x00000001u;
  ::geometry::PointENU* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::geometry::PointENU* Pose::mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::PointENU>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.position)
  return position_;
}
inline void Pose::set_allocated_position(::geometry::PointENU* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.position)
}

// optional .geometry.Quaternion orientation = 2;
inline bool Pose::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::geometry::Quaternion& Pose::orientation() const {
  const ::geometry::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:controller.Pose.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Quaternion*>(
      &::geometry::_Quaternion_default_instance_);
}
inline ::geometry::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:controller.Pose.orientation)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::geometry::Quaternion* Pose::mutable_orientation() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.orientation)
  return orientation_;
}
inline void Pose::set_allocated_orientation(::geometry::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.orientation)
}

// optional .geometry.Point3D linear_velocity = 3;
inline bool Pose::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::geometry::Point3D& Pose::linear_velocity() const {
  const ::geometry::Point3D* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:controller.Pose.linear_velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:controller.Pose.linear_velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::geometry::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.linear_velocity)
  return linear_velocity_;
}
inline void Pose::set_allocated_linear_velocity(::geometry::Point3D* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.linear_velocity)
}

// optional .geometry.Point3D linear_acceleration = 4;
inline bool Pose::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::geometry::Point3D& Pose::linear_acceleration() const {
  const ::geometry::Point3D* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:controller.Pose.linear_acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:controller.Pose.linear_acceleration)
  _has_bits_[0] &= ~0x00000008u;
  ::geometry::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000008u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.linear_acceleration)
  return linear_acceleration_;
}
inline void Pose::set_allocated_linear_acceleration(::geometry::Point3D* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.linear_acceleration)
}

// optional .geometry.Point3D angular_velocity = 5;
inline bool Pose::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::geometry::Point3D& Pose::angular_velocity() const {
  const ::geometry::Point3D* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:controller.Pose.angular_velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:controller.Pose.angular_velocity)
  _has_bits_[0] &= ~0x00000010u;
  ::geometry::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.angular_velocity)
  return angular_velocity_;
}
inline void Pose::set_allocated_angular_velocity(::geometry::Point3D* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.angular_velocity)
}

// optional double heading = 6;
inline bool Pose::has_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pose::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:controller.Pose.heading)
  return heading_;
}
inline void Pose::set_heading(double value) {
  _has_bits_[0] |= 0x00000100u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:controller.Pose.heading)
}

// optional .geometry.Point3D linear_acceleration_vrf = 7;
inline bool Pose::has_linear_acceleration_vrf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::geometry::Point3D& Pose::linear_acceleration_vrf() const {
  const ::geometry::Point3D* p = linear_acceleration_vrf_;
  // @@protoc_insertion_point(field_get:controller.Pose.linear_acceleration_vrf)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_linear_acceleration_vrf() {
  // @@protoc_insertion_point(field_release:controller.Pose.linear_acceleration_vrf)
  _has_bits_[0] &= ~0x00000020u;
  ::geometry::Point3D* temp = linear_acceleration_vrf_;
  linear_acceleration_vrf_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_linear_acceleration_vrf() {
  _has_bits_[0] |= 0x00000020u;
  if (linear_acceleration_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    linear_acceleration_vrf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.linear_acceleration_vrf)
  return linear_acceleration_vrf_;
}
inline void Pose::set_allocated_linear_acceleration_vrf(::geometry::Point3D* linear_acceleration_vrf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_vrf_);
  }
  if (linear_acceleration_vrf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration_vrf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration_vrf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  linear_acceleration_vrf_ = linear_acceleration_vrf;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.linear_acceleration_vrf)
}

// optional .geometry.Point3D angular_velocity_vrf = 8;
inline bool Pose::has_angular_velocity_vrf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::geometry::Point3D& Pose::angular_velocity_vrf() const {
  const ::geometry::Point3D* p = angular_velocity_vrf_;
  // @@protoc_insertion_point(field_get:controller.Pose.angular_velocity_vrf)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_angular_velocity_vrf() {
  // @@protoc_insertion_point(field_release:controller.Pose.angular_velocity_vrf)
  _has_bits_[0] &= ~0x00000040u;
  ::geometry::Point3D* temp = angular_velocity_vrf_;
  angular_velocity_vrf_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_angular_velocity_vrf() {
  _has_bits_[0] |= 0x00000040u;
  if (angular_velocity_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    angular_velocity_vrf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.angular_velocity_vrf)
  return angular_velocity_vrf_;
}
inline void Pose::set_allocated_angular_velocity_vrf(::geometry::Point3D* angular_velocity_vrf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_vrf_);
  }
  if (angular_velocity_vrf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity_vrf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity_vrf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  angular_velocity_vrf_ = angular_velocity_vrf;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.angular_velocity_vrf)
}

// optional .geometry.Point3D euler_angles = 9;
inline bool Pose::has_euler_angles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::geometry::Point3D& Pose::euler_angles() const {
  const ::geometry::Point3D* p = euler_angles_;
  // @@protoc_insertion_point(field_get:controller.Pose.euler_angles)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Pose::release_euler_angles() {
  // @@protoc_insertion_point(field_release:controller.Pose.euler_angles)
  _has_bits_[0] &= ~0x00000080u;
  ::geometry::Point3D* temp = euler_angles_;
  euler_angles_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Pose::mutable_euler_angles() {
  _has_bits_[0] |= 0x00000080u;
  if (euler_angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    euler_angles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Pose.euler_angles)
  return euler_angles_;
}
inline void Pose::set_allocated_euler_angles(::geometry::Point3D* euler_angles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(euler_angles_);
  }
  if (euler_angles) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euler_angles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, euler_angles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  euler_angles_ = euler_angles;
  // @@protoc_insertion_point(field_set_allocated:controller.Pose.euler_angles)
}

// -------------------------------------------------------------------

// Uncertainty

// optional .geometry.Point3D position_std_dev = 1;
inline bool Uncertainty::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::geometry::Point3D& Uncertainty::position_std_dev() const {
  const ::geometry::Point3D* p = position_std_dev_;
  // @@protoc_insertion_point(field_get:controller.Uncertainty.position_std_dev)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:controller.Uncertainty.position_std_dev)
  _has_bits_[0] &= ~0x00000001u;
  ::geometry::Point3D* temp = position_std_dev_;
  position_std_dev_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Uncertainty::mutable_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
  if (position_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    position_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Uncertainty.position_std_dev)
  return position_std_dev_;
}
inline void Uncertainty::set_allocated_position_std_dev(::geometry::Point3D* position_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:controller.Uncertainty.position_std_dev)
}

// optional .geometry.Point3D orientation_std_dev = 2;
inline bool Uncertainty::has_orientation_std_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::geometry::Point3D& Uncertainty::orientation_std_dev() const {
  const ::geometry::Point3D* p = orientation_std_dev_;
  // @@protoc_insertion_point(field_get:controller.Uncertainty.orientation_std_dev)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:controller.Uncertainty.orientation_std_dev)
  _has_bits_[0] &= ~0x00000002u;
  ::geometry::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Uncertainty::mutable_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    orientation_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
inline void Uncertainty::set_allocated_orientation_std_dev(::geometry::Point3D* orientation_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_std_dev_);
  }
  if (orientation_std_dev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_std_dev_ = orientation_std_dev;
  // @@protoc_insertion_point(field_set_allocated:controller.Uncertainty.orientation_std_dev)
}

// optional .geometry.Point3D linear_velocity_std_dev = 3;
inline bool Uncertainty::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::geometry::Point3D& Uncertainty::linear_velocity_std_dev() const {
  const ::geometry::Point3D* p = linear_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:controller.Uncertainty.linear_velocity_std_dev)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:controller.Uncertainty.linear_velocity_std_dev)
  _has_bits_[0] &= ~0x00000004u;
  ::geometry::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    linear_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_linear_velocity_std_dev(::geometry::Point3D* linear_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:controller.Uncertainty.linear_velocity_std_dev)
}

// optional .geometry.Point3D linear_acceleration_std_dev = 4;
inline bool Uncertainty::has_linear_acceleration_std_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::geometry::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  const ::geometry::Point3D* p = linear_acceleration_std_dev_;
  // @@protoc_insertion_point(field_get:controller.Uncertainty.linear_acceleration_std_dev)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:controller.Uncertainty.linear_acceleration_std_dev)
  _has_bits_[0] &= ~0x00000008u;
  ::geometry::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
  if (linear_acceleration_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    linear_acceleration_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
inline void Uncertainty::set_allocated_linear_acceleration_std_dev(::geometry::Point3D* linear_acceleration_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_std_dev_);
  }
  if (linear_acceleration_std_dev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  // @@protoc_insertion_point(field_set_allocated:controller.Uncertainty.linear_acceleration_std_dev)
}

// optional .geometry.Point3D angular_velocity_std_dev = 5;
inline bool Uncertainty::has_angular_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::geometry::Point3D& Uncertainty::angular_velocity_std_dev() const {
  const ::geometry::Point3D* p = angular_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:controller.Uncertainty.angular_velocity_std_dev)
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry::Point3D*>(
      &::geometry::_Point3D_default_instance_);
}
inline ::geometry::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:controller.Uncertainty.angular_velocity_std_dev)
  _has_bits_[0] &= ~0x00000010u;
  ::geometry::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::geometry::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
  if (angular_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry::Point3D>(GetArenaNoVirtual());
    angular_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_angular_velocity_std_dev(::geometry::Point3D* angular_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_std_dev_);
  }
  if (angular_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity_std_dev, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:controller.Uncertainty.angular_velocity_std_dev)
}

// -------------------------------------------------------------------

// LocalizationEstimate

// optional .controller.Header header = 1;
inline bool LocalizationEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::Header& LocalizationEstimate::header() const {
  const ::controller::Header* p = header_;
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Header*>(
      &::controller::_Header_default_instance_);
}
inline ::controller::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:controller.LocalizationEstimate.header)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::controller::Header* LocalizationEstimate::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.header)
  return header_;
}
inline void LocalizationEstimate::set_allocated_header(::controller::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:controller.LocalizationEstimate.header)
}

// optional .controller.Pose pose = 2;
inline bool LocalizationEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalizationEstimate::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::controller::Pose& LocalizationEstimate::pose() const {
  const ::controller::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Pose*>(
      &::controller::_Pose_default_instance_);
}
inline ::controller::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:controller.LocalizationEstimate.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::controller::Pose* LocalizationEstimate::mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.pose)
  return pose_;
}
inline void LocalizationEstimate::set_allocated_pose(::controller::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:controller.LocalizationEstimate.pose)
}

// optional .controller.Uncertainty uncertainty = 3;
inline bool LocalizationEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != nullptr) uncertainty_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::controller::Uncertainty& LocalizationEstimate::uncertainty() const {
  const ::controller::Uncertainty* p = uncertainty_;
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.uncertainty)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Uncertainty*>(
      &::controller::_Uncertainty_default_instance_);
}
inline ::controller::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:controller.LocalizationEstimate.uncertainty)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::Uncertainty* temp = uncertainty_;
  uncertainty_ = nullptr;
  return temp;
}
inline ::controller::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  _has_bits_[0] |= 0x00000004u;
  if (uncertainty_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Uncertainty>(GetArenaNoVirtual());
    uncertainty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
inline void LocalizationEstimate::set_allocated_uncertainty(::controller::Uncertainty* uncertainty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uncertainty_;
  }
  if (uncertainty) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uncertainty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uncertainty, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uncertainty_ = uncertainty;
  // @@protoc_insertion_point(field_set_allocated:controller.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
inline bool LocalizationEstimate::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.measurement_time)
  return measurement_time_;
}
inline void LocalizationEstimate::set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:controller.LocalizationEstimate.measurement_time)
}

// repeated .points.TrajectoryPoint trajectory_point = 5;
inline int LocalizationEstimate::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline ::points::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
LocalizationEstimate::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:controller.LocalizationEstimate.trajectory_point)
  return &trajectory_point_;
}
inline const ::points::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::points::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:controller.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
LocalizationEstimate::trajectory_point() const {
  // @@protoc_insertion_point(field_list:controller.LocalizationEstimate.trajectory_point)
  return trajectory_point_;
}

// optional .controller.MsfStatus msf_status = 6;
inline bool LocalizationEstimate::has_msf_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::controller::MsfStatus& LocalizationEstimate::msf_status() const {
  const ::controller::MsfStatus* p = msf_status_;
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.msf_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::MsfStatus*>(
      &::controller::_MsfStatus_default_instance_);
}
inline ::controller::MsfStatus* LocalizationEstimate::release_msf_status() {
  // @@protoc_insertion_point(field_release:controller.LocalizationEstimate.msf_status)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::MsfStatus* temp = msf_status_;
  msf_status_ = nullptr;
  return temp;
}
inline ::controller::MsfStatus* LocalizationEstimate::mutable_msf_status() {
  _has_bits_[0] |= 0x00000008u;
  if (msf_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::MsfStatus>(GetArenaNoVirtual());
    msf_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.msf_status)
  return msf_status_;
}
inline void LocalizationEstimate::set_allocated_msf_status(::controller::MsfStatus* msf_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msf_status_);
  }
  if (msf_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msf_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msf_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  msf_status_ = msf_status;
  // @@protoc_insertion_point(field_set_allocated:controller.LocalizationEstimate.msf_status)
}

// optional .controller.MsfSensorMsgStatus sensor_status = 7;
inline bool LocalizationEstimate::has_sensor_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::controller::MsfSensorMsgStatus& LocalizationEstimate::sensor_status() const {
  const ::controller::MsfSensorMsgStatus* p = sensor_status_;
  // @@protoc_insertion_point(field_get:controller.LocalizationEstimate.sensor_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::MsfSensorMsgStatus*>(
      &::controller::_MsfSensorMsgStatus_default_instance_);
}
inline ::controller::MsfSensorMsgStatus* LocalizationEstimate::release_sensor_status() {
  // @@protoc_insertion_point(field_release:controller.LocalizationEstimate.sensor_status)
  _has_bits_[0] &= ~0x00000010u;
  ::controller::MsfSensorMsgStatus* temp = sensor_status_;
  sensor_status_ = nullptr;
  return temp;
}
inline ::controller::MsfSensorMsgStatus* LocalizationEstimate::mutable_sensor_status() {
  _has_bits_[0] |= 0x00000010u;
  if (sensor_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::MsfSensorMsgStatus>(GetArenaNoVirtual());
    sensor_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LocalizationEstimate.sensor_status)
  return sensor_status_;
}
inline void LocalizationEstimate::set_allocated_sensor_status(::controller::MsfSensorMsgStatus* sensor_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sensor_status_);
  }
  if (sensor_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sensor_status_ = sensor_status;
  // @@protoc_insertion_point(field_set_allocated:controller.LocalizationEstimate.sensor_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_localization_2eproto
