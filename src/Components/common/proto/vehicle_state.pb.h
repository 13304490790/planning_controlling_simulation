// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_state.proto

#ifndef PROTOBUF_INCLUDED_vehicle_5fstate_2eproto
#define PROTOBUF_INCLUDED_vehicle_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "chassis.pb.h"
#include "localization.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fstate_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fstate_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_vehicle_5fstate_2eproto();
namespace vehicle_state {
class VehicleState;
class VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace vehicle_state
namespace google {
namespace protobuf {
template<> ::vehicle_state::VehicleState* Arena::CreateMaybeMessage<::vehicle_state::VehicleState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vehicle_state {

// ===================================================================

class VehicleState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle_state.VehicleState) */ {
 public:
  VehicleState();
  virtual ~VehicleState();

  VehicleState(const VehicleState& from);

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VehicleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleState* other);
  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleState* New() const final {
    return CreateMaybeMessage<VehicleState>(nullptr);
  }

  VehicleState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleState& from);
  void MergeFrom(const VehicleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .controller.Pose pose = 16;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 16;
  const ::controller::Pose& pose() const;
  ::controller::Pose* release_pose();
  ::controller::Pose* mutable_pose();
  void set_allocated_pose(::controller::Pose* pose);

  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double timestamp = 4 [default = 0];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double roll = 5 [default = 0];
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 5;
  double roll() const;
  void set_roll(double value);

  // optional double pitch = 6 [default = 0];
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 6;
  double pitch() const;
  void set_pitch(double value);

  // optional double yaw = 7 [default = 0];
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 7;
  double yaw() const;
  void set_yaw(double value);

  // optional double heading = 8 [default = 0];
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  double heading() const;
  void set_heading(double value);

  // optional double kappa = 9 [default = 0];
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 9;
  double kappa() const;
  void set_kappa(double value);

  // optional double linear_velocity = 10 [default = 0];
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 10;
  double linear_velocity() const;
  void set_linear_velocity(double value);

  // optional double angular_velocity = 11 [default = 0];
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 11;
  double angular_velocity() const;
  void set_angular_velocity(double value);

  // optional double linear_acceleration = 12 [default = 0];
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 12;
  double linear_acceleration() const;
  void set_linear_acceleration(double value);

  // optional .canbus.Chassis.GearPosition gear = 14;
  bool has_gear() const;
  void clear_gear();
  static const int kGearFieldNumber = 14;
  ::canbus::Chassis_GearPosition gear() const;
  void set_gear(::canbus::Chassis_GearPosition value);

  // optional .canbus.Chassis.DrivingMode driving_mode = 15;
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 15;
  ::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::canbus::Chassis_DrivingMode value);

  // optional double steering_percentage = 17;
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 17;
  double steering_percentage() const;
  void set_steering_percentage(double value);

  // optional double dt = 13 [default = 0.5];
  bool has_dt() const;
  void clear_dt();
  static const int kDtFieldNumber = 13;
  double dt() const;
  void set_dt(double value);

  // @@protoc_insertion_point(class_scope:vehicle_state.VehicleState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::Pose* pose_;
  double x_;
  double y_;
  double z_;
  double timestamp_;
  double roll_;
  double pitch_;
  double yaw_;
  double heading_;
  double kappa_;
  double linear_velocity_;
  double angular_velocity_;
  double linear_acceleration_;
  int gear_;
  int driving_mode_;
  double steering_percentage_;
  double dt_;
  friend struct ::TableStruct_vehicle_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleState

// optional double x = 1 [default = 0];
inline bool VehicleState::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleState::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VehicleState::x() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.x)
  return x_;
}
inline void VehicleState::set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.x)
}

// optional double y = 2 [default = 0];
inline bool VehicleState::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleState::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double VehicleState::y() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.y)
  return y_;
}
inline void VehicleState::set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.y)
}

// optional double z = 3 [default = 0];
inline bool VehicleState::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleState::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double VehicleState::z() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.z)
  return z_;
}
inline void VehicleState::set_z(double value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.z)
}

// optional double timestamp = 4 [default = 0];
inline bool VehicleState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleState::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VehicleState::timestamp() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.timestamp)
  return timestamp_;
}
inline void VehicleState::set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.timestamp)
}

// optional double roll = 5 [default = 0];
inline bool VehicleState::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleState::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double VehicleState::roll() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.roll)
  return roll_;
}
inline void VehicleState::set_roll(double value) {
  _has_bits_[0] |= 0x00000020u;
  roll_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.roll)
}

// optional double pitch = 6 [default = 0];
inline bool VehicleState::has_pitch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleState::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double VehicleState::pitch() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.pitch)
  return pitch_;
}
inline void VehicleState::set_pitch(double value) {
  _has_bits_[0] |= 0x00000040u;
  pitch_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.pitch)
}

// optional double yaw = 7 [default = 0];
inline bool VehicleState::has_yaw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleState::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double VehicleState::yaw() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.yaw)
  return yaw_;
}
inline void VehicleState::set_yaw(double value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.yaw)
}

// optional double heading = 8 [default = 0];
inline bool VehicleState::has_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleState::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.heading)
  return heading_;
}
inline void VehicleState::set_heading(double value) {
  _has_bits_[0] |= 0x00000100u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.heading)
}

// optional double kappa = 9 [default = 0];
inline bool VehicleState::has_kappa() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleState::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double VehicleState::kappa() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.kappa)
  return kappa_;
}
inline void VehicleState::set_kappa(double value) {
  _has_bits_[0] |= 0x00000200u;
  kappa_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.kappa)
}

// optional double linear_velocity = 10 [default = 0];
inline bool VehicleState::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleState::clear_linear_velocity() {
  linear_velocity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double VehicleState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.linear_velocity)
  return linear_velocity_;
}
inline void VehicleState::set_linear_velocity(double value) {
  _has_bits_[0] |= 0x00000400u;
  linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.linear_velocity)
}

// optional double angular_velocity = 11 [default = 0];
inline bool VehicleState::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleState::clear_angular_velocity() {
  angular_velocity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double VehicleState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.angular_velocity)
  return angular_velocity_;
}
inline void VehicleState::set_angular_velocity(double value) {
  _has_bits_[0] |= 0x00000800u;
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.angular_velocity)
}

// optional double linear_acceleration = 12 [default = 0];
inline bool VehicleState::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleState::clear_linear_acceleration() {
  linear_acceleration_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double VehicleState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.linear_acceleration)
  return linear_acceleration_;
}
inline void VehicleState::set_linear_acceleration(double value) {
  _has_bits_[0] |= 0x00001000u;
  linear_acceleration_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.linear_acceleration)
}

// optional double dt = 13 [default = 0.5];
inline bool VehicleState::has_dt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleState::clear_dt() {
  dt_ = 0.5;
  _has_bits_[0] &= ~0x00010000u;
}
inline double VehicleState::dt() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.dt)
  return dt_;
}
inline void VehicleState::set_dt(double value) {
  _has_bits_[0] |= 0x00010000u;
  dt_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.dt)
}

// optional .canbus.Chassis.GearPosition gear = 14;
inline bool VehicleState::has_gear() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleState::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::canbus::Chassis_GearPosition VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.gear)
  return static_cast< ::canbus::Chassis_GearPosition >(gear_);
}
inline void VehicleState::set_gear(::canbus::Chassis_GearPosition value) {
  assert(::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  gear_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.gear)
}

// optional .canbus.Chassis.DrivingMode driving_mode = 15;
inline bool VehicleState::has_driving_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleState::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::canbus::Chassis_DrivingMode VehicleState::driving_mode() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.driving_mode)
  return static_cast< ::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void VehicleState::set_driving_mode(::canbus::Chassis_DrivingMode value) {
  assert(::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.driving_mode)
}

// optional .controller.Pose pose = 16;
inline bool VehicleState::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::Pose& VehicleState::pose() const {
  const ::controller::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::Pose*>(
      &::controller::_Pose_default_instance_);
}
inline ::controller::Pose* VehicleState::release_pose() {
  // @@protoc_insertion_point(field_release:vehicle_state.VehicleState.pose)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::controller::Pose* VehicleState::mutable_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vehicle_state.VehicleState.pose)
  return pose_;
}
inline void VehicleState::set_allocated_pose(::controller::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:vehicle_state.VehicleState.pose)
}

// optional double steering_percentage = 17;
inline bool VehicleState::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleState::clear_steering_percentage() {
  steering_percentage_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double VehicleState::steering_percentage() const {
  // @@protoc_insertion_point(field_get:vehicle_state.VehicleState.steering_percentage)
  return steering_percentage_;
}
inline void VehicleState::set_steering_percentage(double value) {
  _has_bits_[0] |= 0x00008000u;
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:vehicle_state.VehicleState.steering_percentage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vehicle_state

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_vehicle_5fstate_2eproto
