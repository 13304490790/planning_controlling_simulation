// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#include "localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointENU_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Uncertainty_localization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localization_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose_localization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localization_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MsfSensorMsgStatus_localization_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localization_5fstatus_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MsfStatus_localization_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint_pnc_5fpoint_2eproto;
namespace controller {
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose> _instance;
} _Pose_default_instance_;
class UncertaintyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uncertainty> _instance;
} _Uncertainty_default_instance_;
class LocalizationEstimateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationEstimate> _instance;
} _LocalizationEstimate_default_instance_;
}  // namespace controller
static void InitDefaultsPose_localization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_Pose_default_instance_;
    new (ptr) ::controller::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Pose_localization_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPose_localization_2eproto}, {
      &scc_info_PointENU_geometry_2eproto.base,
      &scc_info_Quaternion_geometry_2eproto.base,
      &scc_info_Point3D_geometry_2eproto.base,}};

static void InitDefaultsUncertainty_localization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_Uncertainty_default_instance_;
    new (ptr) ::controller::Uncertainty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::Uncertainty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Uncertainty_localization_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUncertainty_localization_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,}};

static void InitDefaultsLocalizationEstimate_localization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_LocalizationEstimate_default_instance_;
    new (ptr) ::controller::LocalizationEstimate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::LocalizationEstimate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_LocalizationEstimate_localization_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsLocalizationEstimate_localization_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Pose_localization_2eproto.base,
      &scc_info_Uncertainty_localization_2eproto.base,
      &scc_info_TrajectoryPoint_pnc_5fpoint_2eproto.base,
      &scc_info_MsfStatus_localization_5fstatus_2eproto.base,
      &scc_info_MsfSensorMsgStatus_localization_5fstatus_2eproto.base,}};

void InitDefaults_localization_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Pose_localization_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Uncertainty_localization_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalizationEstimate_localization_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_localization_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_localization_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_localization_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_localization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::Pose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::Pose, position_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, orientation_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, heading_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, linear_acceleration_vrf_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, angular_velocity_vrf_),
  PROTOBUF_FIELD_OFFSET(::controller::Pose, euler_angles_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, orientation_std_dev_),
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, linear_acceleration_std_dev_),
  PROTOBUF_FIELD_OFFSET(::controller::Uncertainty, angular_velocity_std_dev_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, header_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, pose_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, uncertainty_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, msf_status_),
  PROTOBUF_FIELD_OFFSET(::controller::LocalizationEstimate, sensor_status_),
  0,
  1,
  2,
  5,
  ~0u,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::controller::Pose)},
  { 23, 33, sizeof(::controller::Uncertainty)},
  { 38, 50, sizeof(::controller::LocalizationEstimate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_Uncertainty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_LocalizationEstimate_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_localization_2eproto = {
  {}, AddDescriptors_localization_2eproto, "localization.proto", schemas,
  file_default_instances, TableStruct_localization_2eproto::offsets,
  file_level_metadata_localization_2eproto, 3, file_level_enum_descriptors_localization_2eproto, file_level_service_descriptors_localization_2eproto,
};

const char descriptor_table_protodef_localization_2eproto[] =
  "\n\022localization.proto\022\ncontroller\032\014header"
  ".proto\032\016geometry.proto\032\017pnc_point.proto\032"
  "\031localization_status.proto\"\377\002\n\004Pose\022$\n\010p"
  "osition\030\001 \001(\0132\022.geometry.PointENU\022)\n\013ori"
  "entation\030\002 \001(\0132\024.geometry.Quaternion\022*\n\017"
  "linear_velocity\030\003 \001(\0132\021.geometry.Point3D"
  "\022.\n\023linear_acceleration\030\004 \001(\0132\021.geometry"
  ".Point3D\022+\n\020angular_velocity\030\005 \001(\0132\021.geo"
  "metry.Point3D\022\017\n\007heading\030\006 \001(\001\0222\n\027linear"
  "_acceleration_vrf\030\007 \001(\0132\021.geometry.Point"
  "3D\022/\n\024angular_velocity_vrf\030\010 \001(\0132\021.geome"
  "try.Point3D\022\'\n\014euler_angles\030\t \001(\0132\021.geom"
  "etry.Point3D\"\213\002\n\013Uncertainty\022+\n\020position"
  "_std_dev\030\001 \001(\0132\021.geometry.Point3D\022.\n\023ori"
  "entation_std_dev\030\002 \001(\0132\021.geometry.Point3"
  "D\0222\n\027linear_velocity_std_dev\030\003 \001(\0132\021.geo"
  "metry.Point3D\0226\n\033linear_acceleration_std"
  "_dev\030\004 \001(\0132\021.geometry.Point3D\0223\n\030angular"
  "_velocity_std_dev\030\005 \001(\0132\021.geometry.Point"
  "3D\"\267\002\n\024LocalizationEstimate\022\"\n\006header\030\001 "
  "\001(\0132\022.controller.Header\022\036\n\004pose\030\002 \001(\0132\020."
  "controller.Pose\022,\n\013uncertainty\030\003 \001(\0132\027.c"
  "ontroller.Uncertainty\022\030\n\020measurement_tim"
  "e\030\004 \001(\001\0221\n\020trajectory_point\030\005 \003(\0132\027.poin"
  "ts.TrajectoryPoint\022)\n\nmsf_status\030\006 \001(\0132\025"
  ".controller.MsfStatus\0225\n\rsensor_status\030\007"
  " \001(\0132\036.controller.MsfSensorMsgStatus"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_localization_2eproto = {
  false, InitDefaults_localization_2eproto, 
  descriptor_table_protodef_localization_2eproto,
  "localization.proto", &assign_descriptors_table_localization_2eproto, 1076,
};

void AddDescriptors_localization_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_header_2eproto,
    ::AddDescriptors_geometry_2eproto,
    ::AddDescriptors_pnc_5fpoint_2eproto,
    ::AddDescriptors_localization_5fstatus_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_localization_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_localization_2eproto = []() { AddDescriptors_localization_2eproto(); return true; }();
namespace controller {

// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::controller::_Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::geometry::PointENU*>(
      ::geometry::PointENU::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::geometry::Quaternion*>(
      ::geometry::Quaternion::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->linear_acceleration_vrf_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->angular_velocity_vrf_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Pose_default_instance_._instance.get_mutable()->euler_angles_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
}
class Pose::HasBitSetters {
 public:
  static const ::geometry::PointENU& position(const Pose* msg);
  static void set_has_position(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::geometry::Quaternion& orientation(const Pose* msg);
  static void set_has_orientation(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::geometry::Point3D& linear_velocity(const Pose* msg);
  static void set_has_linear_velocity(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::geometry::Point3D& linear_acceleration(const Pose* msg);
  static void set_has_linear_acceleration(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::geometry::Point3D& angular_velocity(const Pose* msg);
  static void set_has_angular_velocity(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_heading(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::geometry::Point3D& linear_acceleration_vrf(const Pose* msg);
  static void set_has_linear_acceleration_vrf(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::geometry::Point3D& angular_velocity_vrf(const Pose* msg);
  static void set_has_angular_velocity_vrf(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::geometry::Point3D& euler_angles(const Pose* msg);
  static void set_has_euler_angles(Pose* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

const ::geometry::PointENU&
Pose::HasBitSetters::position(const Pose* msg) {
  return *msg->position_;
}
const ::geometry::Quaternion&
Pose::HasBitSetters::orientation(const Pose* msg) {
  return *msg->orientation_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::linear_velocity(const Pose* msg) {
  return *msg->linear_velocity_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::linear_acceleration(const Pose* msg) {
  return *msg->linear_acceleration_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::angular_velocity(const Pose* msg) {
  return *msg->angular_velocity_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::linear_acceleration_vrf(const Pose* msg) {
  return *msg->linear_acceleration_vrf_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::angular_velocity_vrf(const Pose* msg) {
  return *msg->angular_velocity_vrf_;
}
const ::geometry::Point3D&
Pose::HasBitSetters::euler_angles(const Pose* msg) {
  return *msg->euler_angles_;
}
void Pose::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Pose::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Pose::clear_linear_acceleration() {
  if (linear_acceleration_ != nullptr) linear_acceleration_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Pose::clear_angular_velocity() {
  if (angular_velocity_ != nullptr) angular_velocity_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Pose::clear_linear_acceleration_vrf() {
  if (linear_acceleration_vrf_ != nullptr) linear_acceleration_vrf_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Pose::clear_angular_velocity_vrf() {
  if (angular_velocity_vrf_ != nullptr) angular_velocity_vrf_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Pose::clear_euler_angles() {
  if (euler_angles_ != nullptr) euler_angles_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
const int Pose::kLinearVelocityFieldNumber;
const int Pose::kLinearAccelerationFieldNumber;
const int Pose::kAngularVelocityFieldNumber;
const int Pose::kHeadingFieldNumber;
const int Pose::kLinearAccelerationVrfFieldNumber;
const int Pose::kAngularVelocityVrfFieldNumber;
const int Pose::kEulerAnglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::geometry::PointENU(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::geometry::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::geometry::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::geometry::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::geometry::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from.has_linear_acceleration_vrf()) {
    linear_acceleration_vrf_ = new ::geometry::Point3D(*from.linear_acceleration_vrf_);
  } else {
    linear_acceleration_vrf_ = nullptr;
  }
  if (from.has_angular_velocity_vrf()) {
    angular_velocity_vrf_ = new ::geometry::Point3D(*from.angular_velocity_vrf_);
  } else {
    angular_velocity_vrf_ = nullptr;
  }
  if (from.has_euler_angles()) {
    euler_angles_ = new ::geometry::Point3D(*from.euler_angles_);
  } else {
    euler_angles_ = nullptr;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:controller.Pose)
}

void Pose::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Pose_localization_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:controller.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_vrf_;
  if (this != internal_default_instance()) delete angular_velocity_vrf_;
  if (this != internal_default_instance()) delete euler_angles_;
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Pose_localization_2eproto.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != nullptr);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_acceleration_ != nullptr);
      linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angular_velocity_ != nullptr);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(linear_acceleration_vrf_ != nullptr);
      linear_acceleration_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(angular_velocity_vrf_ != nullptr);
      angular_velocity_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(euler_angles_ != nullptr);
      euler_angles_->Clear();
    }
  }
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pose::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Pose*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geometry.PointENU position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::PointENU::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Quaternion orientation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Quaternion::_InternalParse;
        object = msg->mutable_orientation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D linear_velocity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_linear_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D linear_acceleration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_linear_acceleration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D angular_velocity = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_angular_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double heading = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_heading(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .geometry.Point3D linear_acceleration_vrf = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_linear_acceleration_vrf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D angular_velocity_vrf = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_angular_velocity_vrf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D euler_angles = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_euler_angles();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geometry.PointENU position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Quaternion orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D linear_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D linear_acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D linear_acceleration_vrf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D angular_velocity_vrf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D euler_angles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_euler_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.Pose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geometry.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // optional .geometry.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::orientation(this), output);
  }

  // optional .geometry.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::linear_velocity(this), output);
  }

  // optional .geometry.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::linear_acceleration(this), output);
  }

  // optional .geometry.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::angular_velocity(this), output);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // optional .geometry.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::linear_acceleration_vrf(this), output);
  }

  // optional .geometry.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::angular_velocity_vrf(this), output);
  }

  // optional .geometry.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::euler_angles(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geometry.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // optional .geometry.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::orientation(this), target);
  }

  // optional .geometry.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::linear_velocity(this), target);
  }

  // optional .geometry.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::linear_acceleration(this), target);
  }

  // optional .geometry.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::angular_velocity(this), target);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // optional .geometry.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::linear_acceleration_vrf(this), target);
  }

  // optional .geometry.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::angular_velocity_vrf(this), target);
  }

  // optional .geometry.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::euler_angles(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .geometry.PointENU position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .geometry.Quaternion orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .geometry.Point3D linear_velocity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .geometry.Point3D linear_acceleration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

    // optional .geometry.Point3D angular_velocity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional .geometry.Point3D linear_acceleration_vrf = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_vrf_);
    }

    // optional .geometry.Point3D angular_velocity_vrf = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_vrf_);
    }

    // optional .geometry.Point3D euler_angles = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_angles_);
    }

  }
  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::geometry::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::geometry::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity()->::geometry::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_acceleration()->::geometry::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity()->::geometry::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_linear_acceleration_vrf()->::geometry::Point3D::MergeFrom(from.linear_acceleration_vrf());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_angular_velocity_vrf()->::geometry::Point3D::MergeFrom(from.angular_velocity_vrf());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_euler_angles()->::geometry::Point3D::MergeFrom(from.euler_angles());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_heading(from.heading());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_vrf_, other->linear_acceleration_vrf_);
  swap(angular_velocity_vrf_, other->angular_velocity_vrf_);
  swap(euler_angles_, other->euler_angles_);
  swap(heading_, other->heading_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_localization_2eproto);
  return ::file_level_metadata_localization_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Uncertainty::InitAsDefaultInstance() {
  ::controller::_Uncertainty_default_instance_._instance.get_mutable()->position_std_dev_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Uncertainty_default_instance_._instance.get_mutable()->orientation_std_dev_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Uncertainty_default_instance_._instance.get_mutable()->linear_velocity_std_dev_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Uncertainty_default_instance_._instance.get_mutable()->linear_acceleration_std_dev_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
  ::controller::_Uncertainty_default_instance_._instance.get_mutable()->angular_velocity_std_dev_ = const_cast< ::geometry::Point3D*>(
      ::geometry::Point3D::internal_default_instance());
}
class Uncertainty::HasBitSetters {
 public:
  static const ::geometry::Point3D& position_std_dev(const Uncertainty* msg);
  static void set_has_position_std_dev(Uncertainty* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::geometry::Point3D& orientation_std_dev(const Uncertainty* msg);
  static void set_has_orientation_std_dev(Uncertainty* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::geometry::Point3D& linear_velocity_std_dev(const Uncertainty* msg);
  static void set_has_linear_velocity_std_dev(Uncertainty* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::geometry::Point3D& linear_acceleration_std_dev(const Uncertainty* msg);
  static void set_has_linear_acceleration_std_dev(Uncertainty* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::geometry::Point3D& angular_velocity_std_dev(const Uncertainty* msg);
  static void set_has_angular_velocity_std_dev(Uncertainty* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::geometry::Point3D&
Uncertainty::HasBitSetters::position_std_dev(const Uncertainty* msg) {
  return *msg->position_std_dev_;
}
const ::geometry::Point3D&
Uncertainty::HasBitSetters::orientation_std_dev(const Uncertainty* msg) {
  return *msg->orientation_std_dev_;
}
const ::geometry::Point3D&
Uncertainty::HasBitSetters::linear_velocity_std_dev(const Uncertainty* msg) {
  return *msg->linear_velocity_std_dev_;
}
const ::geometry::Point3D&
Uncertainty::HasBitSetters::linear_acceleration_std_dev(const Uncertainty* msg) {
  return *msg->linear_acceleration_std_dev_;
}
const ::geometry::Point3D&
Uncertainty::HasBitSetters::angular_velocity_std_dev(const Uncertainty* msg) {
  return *msg->angular_velocity_std_dev_;
}
void Uncertainty::clear_position_std_dev() {
  if (position_std_dev_ != nullptr) position_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (orientation_std_dev_ != nullptr) orientation_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != nullptr) linear_velocity_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (linear_acceleration_std_dev_ != nullptr) linear_acceleration_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (angular_velocity_std_dev_ != nullptr) angular_velocity_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_std_dev()) {
    position_std_dev_ = new ::geometry::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = nullptr;
  }
  if (from.has_orientation_std_dev()) {
    orientation_std_dev_ = new ::geometry::Point3D(*from.orientation_std_dev_);
  } else {
    orientation_std_dev_ = nullptr;
  }
  if (from.has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::geometry::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = nullptr;
  }
  if (from.has_linear_acceleration_std_dev()) {
    linear_acceleration_std_dev_ = new ::geometry::Point3D(*from.linear_acceleration_std_dev_);
  } else {
    linear_acceleration_std_dev_ = nullptr;
  }
  if (from.has_angular_velocity_std_dev()) {
    angular_velocity_std_dev_ = new ::geometry::Point3D(*from.angular_velocity_std_dev_);
  } else {
    angular_velocity_std_dev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:controller.Uncertainty)
}

void Uncertainty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Uncertainty_localization_2eproto.base);
  ::memset(&position_std_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_velocity_std_dev_) -
      reinterpret_cast<char*>(&position_std_dev_)) + sizeof(angular_velocity_std_dev_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:controller.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete orientation_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
  if (this != internal_default_instance()) delete linear_acceleration_std_dev_;
  if (this != internal_default_instance()) delete angular_velocity_std_dev_;
}

void Uncertainty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uncertainty& Uncertainty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Uncertainty_localization_2eproto.base);
  return *internal_default_instance();
}


void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_std_dev_ != nullptr);
      position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_std_dev_ != nullptr);
      orientation_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != nullptr);
      linear_velocity_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_acceleration_std_dev_ != nullptr);
      linear_acceleration_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angular_velocity_std_dev_ != nullptr);
      angular_velocity_std_dev_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Uncertainty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Uncertainty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geometry.Point3D position_std_dev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_position_std_dev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D orientation_std_dev = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_orientation_std_dev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_linear_velocity_std_dev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_linear_acceleration_std_dev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geometry.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geometry::Point3D::_InternalParse;
        object = msg->mutable_angular_velocity_std_dev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.Uncertainty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geometry.Point3D position_std_dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D orientation_std_dev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geometry.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.Uncertainty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geometry.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position_std_dev(this), output);
  }

  // optional .geometry.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::orientation_std_dev(this), output);
  }

  // optional .geometry.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::linear_velocity_std_dev(this), output);
  }

  // optional .geometry.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::linear_acceleration_std_dev(this), output);
  }

  // optional .geometry.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::angular_velocity_std_dev(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geometry.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position_std_dev(this), target);
  }

  // optional .geometry.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::orientation_std_dev(this), target);
  }

  // optional .geometry.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::linear_velocity_std_dev(this), target);
  }

  // optional .geometry.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::linear_acceleration_std_dev(this), target);
  }

  // optional .geometry.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::angular_velocity_std_dev(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.Uncertainty)
  return target;
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.Uncertainty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .geometry.Point3D position_std_dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_std_dev_);
    }

    // optional .geometry.Point3D orientation_std_dev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *orientation_std_dev_);
    }

    // optional .geometry.Point3D linear_velocity_std_dev = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_std_dev_);
    }

    // optional .geometry.Point3D linear_acceleration_std_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_std_dev_);
    }

    // optional .geometry.Point3D angular_velocity_std_dev = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_std_dev_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  const Uncertainty* source =
      ::google::protobuf::DynamicCastToGenerated<Uncertainty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.Uncertainty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position_std_dev()->::geometry::Point3D::MergeFrom(from.position_std_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation_std_dev()->::geometry::Point3D::MergeFrom(from.orientation_std_dev());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity_std_dev()->::geometry::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_acceleration_std_dev()->::geometry::Point3D::MergeFrom(from.linear_acceleration_std_dev());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity_std_dev()->::geometry::Point3D::MergeFrom(from.angular_velocity_std_dev());
    }
  }
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_std_dev_, other->position_std_dev_);
  swap(orientation_std_dev_, other->orientation_std_dev_);
  swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_localization_2eproto);
  return ::file_level_metadata_localization_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocalizationEstimate::InitAsDefaultInstance() {
  ::controller::_LocalizationEstimate_default_instance_._instance.get_mutable()->header_ = const_cast< ::controller::Header*>(
      ::controller::Header::internal_default_instance());
  ::controller::_LocalizationEstimate_default_instance_._instance.get_mutable()->pose_ = const_cast< ::controller::Pose*>(
      ::controller::Pose::internal_default_instance());
  ::controller::_LocalizationEstimate_default_instance_._instance.get_mutable()->uncertainty_ = const_cast< ::controller::Uncertainty*>(
      ::controller::Uncertainty::internal_default_instance());
  ::controller::_LocalizationEstimate_default_instance_._instance.get_mutable()->msf_status_ = const_cast< ::controller::MsfStatus*>(
      ::controller::MsfStatus::internal_default_instance());
  ::controller::_LocalizationEstimate_default_instance_._instance.get_mutable()->sensor_status_ = const_cast< ::controller::MsfSensorMsgStatus*>(
      ::controller::MsfSensorMsgStatus::internal_default_instance());
}
class LocalizationEstimate::HasBitSetters {
 public:
  static const ::controller::Header& header(const LocalizationEstimate* msg);
  static void set_has_header(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::Pose& pose(const LocalizationEstimate* msg);
  static void set_has_pose(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::controller::Uncertainty& uncertainty(const LocalizationEstimate* msg);
  static void set_has_uncertainty(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_measurement_time(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::controller::MsfStatus& msf_status(const LocalizationEstimate* msg);
  static void set_has_msf_status(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::controller::MsfSensorMsgStatus& sensor_status(const LocalizationEstimate* msg);
  static void set_has_sensor_status(LocalizationEstimate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::controller::Header&
LocalizationEstimate::HasBitSetters::header(const LocalizationEstimate* msg) {
  return *msg->header_;
}
const ::controller::Pose&
LocalizationEstimate::HasBitSetters::pose(const LocalizationEstimate* msg) {
  return *msg->pose_;
}
const ::controller::Uncertainty&
LocalizationEstimate::HasBitSetters::uncertainty(const LocalizationEstimate* msg) {
  return *msg->uncertainty_;
}
const ::controller::MsfStatus&
LocalizationEstimate::HasBitSetters::msf_status(const LocalizationEstimate* msg) {
  return *msg->msf_status_;
}
const ::controller::MsfSensorMsgStatus&
LocalizationEstimate::HasBitSetters::sensor_status(const LocalizationEstimate* msg) {
  return *msg->sensor_status_;
}
void LocalizationEstimate::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void LocalizationEstimate::clear_msf_status() {
  if (msf_status_ != nullptr) msf_status_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationEstimate::clear_sensor_status() {
  if (sensor_status_ != nullptr) sensor_status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kMeasurementTimeFieldNumber;
const int LocalizationEstimate::kTrajectoryPointFieldNumber;
const int LocalizationEstimate::kMsfStatusFieldNumber;
const int LocalizationEstimate::kSensorStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.LocalizationEstimate)
}
LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::controller::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_pose()) {
    pose_ = new ::controller::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::controller::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = nullptr;
  }
  if (from.has_msf_status()) {
    msf_status_ = new ::controller::MsfStatus(*from.msf_status_);
  } else {
    msf_status_ = nullptr;
  }
  if (from.has_sensor_status()) {
    sensor_status_ = new ::controller::MsfSensorMsgStatus(*from.sensor_status_);
  } else {
    sensor_status_ = nullptr;
  }
  measurement_time_ = from.measurement_time_;
  // @@protoc_insertion_point(copy_constructor:controller.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LocalizationEstimate_localization_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measurement_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(measurement_time_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:controller.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete uncertainty_;
  if (this != internal_default_instance()) delete msf_status_;
  if (this != internal_default_instance()) delete sensor_status_;
}

void LocalizationEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationEstimate& LocalizationEstimate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocalizationEstimate_localization_2eproto.base);
  return *internal_default_instance();
}


void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uncertainty_ != nullptr);
      uncertainty_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(msf_status_ != nullptr);
      msf_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sensor_status_ != nullptr);
      sensor_status_->Clear();
    }
  }
  measurement_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalizationEstimate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocalizationEstimate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .controller.Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.Pose pose = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Pose::_InternalParse;
        object = msg->mutable_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.Uncertainty uncertainty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::Uncertainty::_InternalParse;
        object = msg->mutable_uncertainty();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double measurement_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_measurement_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .points.TrajectoryPoint trajectory_point = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::points::TrajectoryPoint::_InternalParse;
          object = msg->add_trajectory_point();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional .controller.MsfStatus msf_status = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::MsfStatus::_InternalParse;
        object = msg->mutable_msf_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.MsfSensorMsgStatus sensor_status = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::MsfSensorMsgStatus::_InternalParse;
        object = msg->mutable_sensor_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.LocalizationEstimate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .controller.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Pose pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Uncertainty uncertainty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_measurement_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .points.TrajectoryPoint trajectory_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.MsfStatus msf_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msf_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.MsfSensorMsgStatus sensor_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.LocalizationEstimate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // optional .controller.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pose(this), output);
  }

  // optional .controller.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uncertainty(this), output);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measurement_time(), output);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  // optional .controller.MsfStatus msf_status = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::msf_status(this), output);
  }

  // optional .controller.MsfSensorMsgStatus sensor_status = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::sensor_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.LocalizationEstimate)
}

::google::protobuf::uint8* LocalizationEstimate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // optional .controller.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pose(this), target);
  }

  // optional .controller.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uncertainty(this), target);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->measurement_time(), target);
  }

  // repeated .points.TrajectoryPoint trajectory_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->trajectory_point(static_cast<int>(i)), target);
  }

  // optional .controller.MsfStatus msf_status = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::msf_status(this), target);
  }

  // optional .controller.MsfSensorMsgStatus sensor_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::sensor_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.LocalizationEstimate)
  return target;
}

size_t LocalizationEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.LocalizationEstimate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .points.TrajectoryPoint trajectory_point = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .controller.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .controller.Pose pose = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .controller.Uncertainty uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *uncertainty_);
    }

    // optional .controller.MsfStatus msf_status = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msf_status_);
    }

    // optional .controller.MsfSensorMsgStatus sensor_status = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_status_);
    }

    // optional double measurement_time = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationEstimate* source =
      ::google::protobuf::DynamicCastToGenerated<LocalizationEstimate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.LocalizationEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.LocalizationEstimate)
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::controller::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::controller::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uncertainty()->::controller::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_msf_status()->::controller::MsfStatus::MergeFrom(from.msf_status());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sensor_status()->::controller::MsfSensorMsgStatus::MergeFrom(from.sensor_status());
    }
    if (cached_has_bits & 0x00000020u) {
      measurement_time_ = from.measurement_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {
  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(uncertainty_, other->uncertainty_);
  swap(msf_status_, other->msf_status_);
  swap(sensor_status_, other->sensor_status_);
  swap(measurement_time_, other->measurement_time_);
}

::google::protobuf::Metadata LocalizationEstimate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_localization_2eproto);
  return ::file_level_metadata_localization_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::Pose* Arena::CreateMaybeMessage< ::controller::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::controller::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::controller::Uncertainty* Arena::CreateMaybeMessage< ::controller::Uncertainty >(Arena* arena) {
  return Arena::CreateInternal< ::controller::Uncertainty >(arena);
}
template<> PROTOBUF_NOINLINE ::controller::LocalizationEstimate* Arena::CreateMaybeMessage< ::controller::LocalizationEstimate >(Arena* arena) {
  return Arena::CreateInternal< ::controller::LocalizationEstimate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
