// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_conf.proto

#include "control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_lat_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mpc_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stanley_5fcontroller_5fconf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StanleyControllerConf_stanley_5fcontroller_5fconf_2eproto;
namespace controller {
class ControlConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlConf> _instance;
} _ControlConf_default_instance_;
}  // namespace controller
static void InitDefaultsControlConf_control_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_ControlConf_default_instance_;
    new (ptr) ::controller::ControlConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::ControlConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ControlConf_control_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsControlConf_control_5fconf_2eproto}, {
      &scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto.base,
      &scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base,
      &scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto.base,
      &scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto.base,
      &scc_info_StanleyControllerConf_stanley_5fcontroller_5fconf_2eproto.base,}};

void InitDefaults_control_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ControlConf_control_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_control_5fconf_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_control_5fconf_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_control_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_control_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, control_test_duration_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_csv_debug_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_speed_station_preview_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, is_control_test_mode_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, use_preview_speed_for_table_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_input_timestamp_check_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_localization_miss_num_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_chassis_miss_num_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_planning_miss_num_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_acceleration_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, set_steer_limit_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, lock_steer_speed_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_navigation_mode_error_filter_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_navigation_mode_position_update_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, enable_persistent_estop_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, control_period_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_planning_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_planning_delay_threshold_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, action_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, soft_estop_brake_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, active_controllers_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_steering_percentage_allowed_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_status_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, lat_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, lon_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, trajectory_period_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, chassis_period_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, localization_period_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, minimum_speed_resolution_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, mpc_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, minimum_speed_protection_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, max_path_remain_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, simple_pid_lat_lon_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::ControlConf, stanley_controller_conf_),
  23,
  5,
  6,
  7,
  8,
  9,
  24,
  25,
  28,
  26,
  27,
  29,
  30,
  10,
  33,
  11,
  31,
  32,
  34,
  35,
  36,
  12,
  13,
  14,
  ~0u,
  22,
  15,
  0,
  1,
  16,
  17,
  18,
  19,
  2,
  20,
  21,
  37,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 44, sizeof(::controller::ControlConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_ControlConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_control_5fconf_2eproto = {
  {}, AddDescriptors_control_5fconf_2eproto, "control_conf.proto", schemas,
  file_default_instances, TableStruct_control_5fconf_2eproto::offsets,
  file_level_metadata_control_5fconf_2eproto, 1, file_level_enum_descriptors_control_5fconf_2eproto, file_level_service_descriptors_control_5fconf_2eproto,
};

const char descriptor_table_protodef_control_5fconf_2eproto[] =
  "\n\022control_conf.proto\022\ncontroller\032\rchassi"
  "s.proto\032\031lat_controller_conf.proto\032\031lon_"
  "controller_conf.proto\032\031mpc_controller_co"
  "nf.proto\032(simple_pid_lat_lon_controller_"
  "conf.proto\032\035stanley_controller_conf.prot"
  "o\"\274\r\n\013ControlConf\022!\n\025control_test_durati"
  "on\030\001 \001(\001:\002-1\022\037\n\020enable_csv_debug\030\002 \001(\010:\005"
  "false\022+\n\034enable_speed_station_preview\030\003 "
  "\001(\010:\005false\022#\n\024is_control_test_mode\030\004 \001(\010"
  ":\005false\022*\n\033use_preview_speed_for_table\030\005"
  " \001(\010:\005false\022+\n\034enable_input_timestamp_ch"
  "eck\030\006 \001(\010:\005false\022%\n\031max_localization_mis"
  "s_num\030\007 \001(\005:\00220\022 \n\024max_chassis_miss_num\030"
  "\010 \001(\005:\00220\022!\n\025max_planning_miss_num\030\t \001(\005"
  ":\00220\022+\n\035max_acceleration_when_stopped\030\n "
  "\001(\001:\0040.01\022\035\n\020steer_angle_rate\030\013 \001(\001:\003100"
  "\022#\n\025enable_gain_scheduler\030\014 \001(\010:\004true\022\035\n"
  "\017set_steer_limit\030\r \001(\010:\004true\022\"\n\023enable_s"
  "lope_offset\030\016 \001(\010:\005false\022\037\n\020lock_steer_s"
  "peed\030\017 \001(\001:\0050.081\0222\n#enable_navigation_m"
  "ode_error_filter\030\020 \001(\010:\005false\0224\n&enable_"
  "navigation_mode_position_update\030\021 \001(\010:\004t"
  "rue\022%\n\027enable_persistent_estop\030\022 \001(\010:\004tr"
  "ue\022\034\n\016control_period\030\023 \001(\001:\0040.01\022&\n\031max_"
  "planning_interval_sec\030\024 \001(\001:\0030.2\022\'\n\034max_"
  "planning_delay_threshold\030\025 \001(\001:\0014\0221\n\014dri"
  "ving_mode\030\026 \001(\0162\033.canbus.Chassis.Driving"
  "Mode\022)\n\006action\030\027 \001(\0162\031.controller.Drivin"
  "gAction\022\030\n\020soft_estop_brake\030\030 \001(\001\022B\n\022act"
  "ive_controllers\030\031 \003(\0162&.controller.Contr"
  "olConf.ControllerType\022\'\n\037max_steering_pe"
  "rcentage_allowed\030\032 \001(\005\022\037\n\027max_status_int"
  "erval_sec\030\033 \001(\001\022:\n\023lat_controller_conf\030\034"
  " \001(\0132\035.controller.LatControllerConf\022:\n\023l"
  "on_controller_conf\030\035 \001(\0132\035.controller.Lo"
  "nControllerConf\022\031\n\021trajectory_period\030\036 \001"
  "(\001\022\026\n\016chassis_period\030\037 \001(\001\022\033\n\023localizati"
  "on_period\030  \001(\001\022 \n\030minimum_speed_resolut"
  "ion\030! \001(\001\022:\n\023mpc_controller_conf\030\" \001(\0132\035"
  ".controller.MPCControllerConf\022\033\n\023query_r"
  "elative_time\030# \001(\001\022 \n\030minimum_speed_prot"
  "ection\030$ \001(\001\022)\n\034max_path_remain_when_sto"
  "pped\030% \001(\001:\0030.3\022U\n\"simple_pid_lat_lon_co"
  "ntroller_conf\030& \001(\0132).controller.SimpleP"
  "IDLatLonControllerConf\022B\n\027stanley_contro"
  "ller_conf\030\' \001(\0132!.controller.StanleyCont"
  "rollerConf\"L\n\016ControllerType\022\022\n\016LAT_CONT"
  "ROLLER\020\000\022\022\n\016LON_CONTROLLER\020\001\022\022\n\016MPC_CONT"
  "ROLLER\020\002*/\n\rDrivingAction\022\010\n\004STOP\020\000\022\t\n\005S"
  "TART\020\001\022\t\n\005RESET\020\002"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_control_5fconf_2eproto = {
  false, InitDefaults_control_5fconf_2eproto, 
  descriptor_table_protodef_control_5fconf_2eproto,
  "control_conf.proto", &assign_descriptors_table_control_5fconf_2eproto, 1977,
};

void AddDescriptors_control_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[6] =
  {
    ::AddDescriptors_chassis_2eproto,
    ::AddDescriptors_lat_5fcontroller_5fconf_2eproto,
    ::AddDescriptors_lon_5fcontroller_5fconf_2eproto,
    ::AddDescriptors_mpc_5fcontroller_5fconf_2eproto,
    ::AddDescriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto,
    ::AddDescriptors_stanley_5fcontroller_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_control_5fconf_2eproto, deps, 6);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fconf_2eproto = []() { AddDescriptors_control_5fconf_2eproto(); return true; }();
namespace controller {
const ::google::protobuf::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_control_5fconf_2eproto);
  return file_level_enum_descriptors_control_5fconf_2eproto[0];
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
const ControlConf_ControllerType ControlConf::LON_CONTROLLER;
const ControlConf_ControllerType ControlConf::MPC_CONTROLLER;
const ControlConf_ControllerType ControlConf::ControllerType_MIN;
const ControlConf_ControllerType ControlConf::ControllerType_MAX;
const int ControlConf::ControllerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrivingAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_control_5fconf_2eproto);
  return file_level_enum_descriptors_control_5fconf_2eproto[1];
}
bool DrivingAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ControlConf::InitAsDefaultInstance() {
  ::controller::_ControlConf_default_instance_._instance.get_mutable()->lat_controller_conf_ = const_cast< ::controller::LatControllerConf*>(
      ::controller::LatControllerConf::internal_default_instance());
  ::controller::_ControlConf_default_instance_._instance.get_mutable()->lon_controller_conf_ = const_cast< ::controller::LonControllerConf*>(
      ::controller::LonControllerConf::internal_default_instance());
  ::controller::_ControlConf_default_instance_._instance.get_mutable()->mpc_controller_conf_ = const_cast< ::controller::MPCControllerConf*>(
      ::controller::MPCControllerConf::internal_default_instance());
  ::controller::_ControlConf_default_instance_._instance.get_mutable()->simple_pid_lat_lon_controller_conf_ = const_cast< ::controller::SimplePIDLatLonControllerConf*>(
      ::controller::SimplePIDLatLonControllerConf::internal_default_instance());
  ::controller::_ControlConf_default_instance_._instance.get_mutable()->stanley_controller_conf_ = const_cast< ::controller::StanleyControllerConf*>(
      ::controller::StanleyControllerConf::internal_default_instance());
}
class ControlConf::HasBitSetters {
 public:
  static void set_has_control_test_duration(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_enable_csv_debug(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_enable_speed_station_preview(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_is_control_test_mode(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_use_preview_speed_for_table(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_enable_input_timestamp_check(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_max_localization_miss_num(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_max_chassis_miss_num(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_max_planning_miss_num(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_max_acceleration_when_stopped(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_steer_angle_rate(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_enable_gain_scheduler(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_set_steer_limit(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_enable_slope_offset(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lock_steer_speed(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_enable_navigation_mode_error_filter(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_enable_navigation_mode_position_update(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_enable_persistent_estop(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_control_period(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_max_planning_interval_sec(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_max_planning_delay_threshold(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_driving_mode(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_action(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_soft_estop_brake(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_max_steering_percentage_allowed(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_max_status_interval_sec(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static const ::controller::LatControllerConf& lat_controller_conf(const ControlConf* msg);
  static void set_has_lat_controller_conf(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::LonControllerConf& lon_controller_conf(const ControlConf* msg);
  static void set_has_lon_controller_conf(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_trajectory_period(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_chassis_period(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_localization_period(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_minimum_speed_resolution(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static const ::controller::MPCControllerConf& mpc_controller_conf(const ControlConf* msg);
  static void set_has_mpc_controller_conf(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_query_relative_time(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_minimum_speed_protection(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_max_path_remain_when_stopped(ControlConf* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static const ::controller::SimplePIDLatLonControllerConf& simple_pid_lat_lon_controller_conf(const ControlConf* msg);
  static void set_has_simple_pid_lat_lon_controller_conf(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::controller::StanleyControllerConf& stanley_controller_conf(const ControlConf* msg);
  static void set_has_stanley_controller_conf(ControlConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::controller::LatControllerConf&
ControlConf::HasBitSetters::lat_controller_conf(const ControlConf* msg) {
  return *msg->lat_controller_conf_;
}
const ::controller::LonControllerConf&
ControlConf::HasBitSetters::lon_controller_conf(const ControlConf* msg) {
  return *msg->lon_controller_conf_;
}
const ::controller::MPCControllerConf&
ControlConf::HasBitSetters::mpc_controller_conf(const ControlConf* msg) {
  return *msg->mpc_controller_conf_;
}
const ::controller::SimplePIDLatLonControllerConf&
ControlConf::HasBitSetters::simple_pid_lat_lon_controller_conf(const ControlConf* msg) {
  return *msg->simple_pid_lat_lon_controller_conf_;
}
const ::controller::StanleyControllerConf&
ControlConf::HasBitSetters::stanley_controller_conf(const ControlConf* msg) {
  return *msg->stanley_controller_conf_;
}
void ControlConf::clear_lat_controller_conf() {
  if (lat_controller_conf_ != nullptr) lat_controller_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ControlConf::clear_lon_controller_conf() {
  if (lon_controller_conf_ != nullptr) lon_controller_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ControlConf::clear_mpc_controller_conf() {
  if (mpc_controller_conf_ != nullptr) mpc_controller_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ControlConf::clear_simple_pid_lat_lon_controller_conf() {
  if (simple_pid_lat_lon_controller_conf_ != nullptr) simple_pid_lat_lon_controller_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ControlConf::clear_stanley_controller_conf() {
  if (stanley_controller_conf_ != nullptr) stanley_controller_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlConf::kControlTestDurationFieldNumber;
const int ControlConf::kEnableCsvDebugFieldNumber;
const int ControlConf::kEnableSpeedStationPreviewFieldNumber;
const int ControlConf::kIsControlTestModeFieldNumber;
const int ControlConf::kUsePreviewSpeedForTableFieldNumber;
const int ControlConf::kEnableInputTimestampCheckFieldNumber;
const int ControlConf::kMaxLocalizationMissNumFieldNumber;
const int ControlConf::kMaxChassisMissNumFieldNumber;
const int ControlConf::kMaxPlanningMissNumFieldNumber;
const int ControlConf::kMaxAccelerationWhenStoppedFieldNumber;
const int ControlConf::kSteerAngleRateFieldNumber;
const int ControlConf::kEnableGainSchedulerFieldNumber;
const int ControlConf::kSetSteerLimitFieldNumber;
const int ControlConf::kEnableSlopeOffsetFieldNumber;
const int ControlConf::kLockSteerSpeedFieldNumber;
const int ControlConf::kEnableNavigationModeErrorFilterFieldNumber;
const int ControlConf::kEnableNavigationModePositionUpdateFieldNumber;
const int ControlConf::kEnablePersistentEstopFieldNumber;
const int ControlConf::kControlPeriodFieldNumber;
const int ControlConf::kMaxPlanningIntervalSecFieldNumber;
const int ControlConf::kMaxPlanningDelayThresholdFieldNumber;
const int ControlConf::kDrivingModeFieldNumber;
const int ControlConf::kActionFieldNumber;
const int ControlConf::kSoftEstopBrakeFieldNumber;
const int ControlConf::kActiveControllersFieldNumber;
const int ControlConf::kMaxSteeringPercentageAllowedFieldNumber;
const int ControlConf::kMaxStatusIntervalSecFieldNumber;
const int ControlConf::kLatControllerConfFieldNumber;
const int ControlConf::kLonControllerConfFieldNumber;
const int ControlConf::kTrajectoryPeriodFieldNumber;
const int ControlConf::kChassisPeriodFieldNumber;
const int ControlConf::kLocalizationPeriodFieldNumber;
const int ControlConf::kMinimumSpeedResolutionFieldNumber;
const int ControlConf::kMpcControllerConfFieldNumber;
const int ControlConf::kQueryRelativeTimeFieldNumber;
const int ControlConf::kMinimumSpeedProtectionFieldNumber;
const int ControlConf::kMaxPathRemainWhenStoppedFieldNumber;
const int ControlConf::kSimplePidLatLonControllerConfFieldNumber;
const int ControlConf::kStanleyControllerConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlConf::ControlConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.ControlConf)
}
ControlConf::ControlConf(const ControlConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_controllers_(from.active_controllers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_controller_conf()) {
    lat_controller_conf_ = new ::controller::LatControllerConf(*from.lat_controller_conf_);
  } else {
    lat_controller_conf_ = nullptr;
  }
  if (from.has_lon_controller_conf()) {
    lon_controller_conf_ = new ::controller::LonControllerConf(*from.lon_controller_conf_);
  } else {
    lon_controller_conf_ = nullptr;
  }
  if (from.has_mpc_controller_conf()) {
    mpc_controller_conf_ = new ::controller::MPCControllerConf(*from.mpc_controller_conf_);
  } else {
    mpc_controller_conf_ = nullptr;
  }
  if (from.has_simple_pid_lat_lon_controller_conf()) {
    simple_pid_lat_lon_controller_conf_ = new ::controller::SimplePIDLatLonControllerConf(*from.simple_pid_lat_lon_controller_conf_);
  } else {
    simple_pid_lat_lon_controller_conf_ = nullptr;
  }
  if (from.has_stanley_controller_conf()) {
    stanley_controller_conf_ = new ::controller::StanleyControllerConf(*from.stanley_controller_conf_);
  } else {
    stanley_controller_conf_ = nullptr;
  }
  ::memcpy(&enable_csv_debug_, &from.enable_csv_debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_path_remain_when_stopped_) -
    reinterpret_cast<char*>(&enable_csv_debug_)) + sizeof(max_path_remain_when_stopped_));
  // @@protoc_insertion_point(copy_constructor:controller.ControlConf)
}

void ControlConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ControlConf_control_5fconf_2eproto.base);
  ::memset(&lat_controller_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
      reinterpret_cast<char*>(&lat_controller_conf_)) + sizeof(max_steering_percentage_allowed_));
  control_test_duration_ = -1;
  max_localization_miss_num_ = 20;
  max_chassis_miss_num_ = 20;
  max_acceleration_when_stopped_ = 0.01;
  steer_angle_rate_ = 100;
  max_planning_miss_num_ = 20;
  enable_gain_scheduler_ = true;
  set_steer_limit_ = true;
  enable_navigation_mode_position_update_ = true;
  enable_persistent_estop_ = true;
  lock_steer_speed_ = 0.081;
  control_period_ = 0.01;
  max_planning_interval_sec_ = 0.2;
  max_planning_delay_threshold_ = 4;
  max_path_remain_when_stopped_ = 0.3;
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:controller.ControlConf)
  SharedDtor();
}

void ControlConf::SharedDtor() {
  if (this != internal_default_instance()) delete lat_controller_conf_;
  if (this != internal_default_instance()) delete lon_controller_conf_;
  if (this != internal_default_instance()) delete mpc_controller_conf_;
  if (this != internal_default_instance()) delete simple_pid_lat_lon_controller_conf_;
  if (this != internal_default_instance()) delete stanley_controller_conf_;
}

void ControlConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlConf& ControlConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ControlConf_control_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_controllers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_controller_conf_ != nullptr);
      lat_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lon_controller_conf_ != nullptr);
      lon_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mpc_controller_conf_ != nullptr);
      mpc_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(simple_pid_lat_lon_controller_conf_ != nullptr);
      simple_pid_lat_lon_controller_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stanley_controller_conf_ != nullptr);
      stanley_controller_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&enable_csv_debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_control_test_mode_) -
        reinterpret_cast<char*>(&enable_csv_debug_)) + sizeof(is_control_test_mode_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&use_preview_speed_for_table_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_status_interval_sec_) -
        reinterpret_cast<char*>(&use_preview_speed_for_table_)) + sizeof(max_status_interval_sec_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&trajectory_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_steering_percentage_allowed_) -
        reinterpret_cast<char*>(&trajectory_period_)) + sizeof(max_steering_percentage_allowed_));
    control_test_duration_ = -1;
  }
  if (cached_has_bits & 0xff000000u) {
    max_localization_miss_num_ = 20;
    max_chassis_miss_num_ = 20;
    max_acceleration_when_stopped_ = 0.01;
    steer_angle_rate_ = 100;
    max_planning_miss_num_ = 20;
    enable_gain_scheduler_ = true;
    set_steer_limit_ = true;
    enable_navigation_mode_position_update_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    enable_persistent_estop_ = true;
    lock_steer_speed_ = 0.081;
    control_period_ = 0.01;
    max_planning_interval_sec_ = 0.2;
    max_planning_delay_threshold_ = 4;
    max_path_remain_when_stopped_ = 0.3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ControlConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double control_test_duration = 1 [default = -1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_control_test_duration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool enable_csv_debug = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enable_csv_debug(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_speed_station_preview = 3 [default = false];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_enable_speed_station_preview(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_control_test_mode = 4 [default = false];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_control_test_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool use_preview_speed_for_table = 5 [default = false];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_use_preview_speed_for_table(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_input_timestamp_check = 6 [default = false];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_enable_input_timestamp_check(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_localization_miss_num = 7 [default = 20];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_max_localization_miss_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_chassis_miss_num = 8 [default = 20];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_max_chassis_miss_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_planning_miss_num = 9 [default = 20];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_max_planning_miss_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double max_acceleration_when_stopped = 10 [default = 0.01];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_max_acceleration_when_stopped(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double steer_angle_rate = 11 [default = 100];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_steer_angle_rate(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool enable_gain_scheduler = 12 [default = true];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_enable_gain_scheduler(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool set_steer_limit = 13 [default = true];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_set_steer_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_slope_offset = 14 [default = false];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_enable_slope_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double lock_steer_speed = 15 [default = 0.081];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_lock_steer_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool enable_navigation_mode_error_filter = 16 [default = false];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_enable_navigation_mode_error_filter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_navigation_mode_position_update = 17 [default = true];
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_enable_navigation_mode_position_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_persistent_estop = 18 [default = true];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_enable_persistent_estop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double control_period = 19 [default = 0.01];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_control_period(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_planning_interval_sec = 20 [default = 0.2];
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_max_planning_interval_sec(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_planning_delay_threshold = 21 [default = 4];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_max_planning_delay_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .canbus.Chassis.DrivingMode driving_mode = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::canbus::Chassis_DrivingMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(22, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_driving_mode(static_cast<::canbus::Chassis_DrivingMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .controller.DrivingAction action = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::controller::DrivingAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(23, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_action(static_cast<::controller::DrivingAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double soft_estop_brake = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_soft_estop_brake(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .controller.ControlConf.ControllerType active_controllers = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) == 200) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::controller::ControlConf_ControllerType_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(25, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_active_controllers(static_cast<::controller::ControlConf_ControllerType>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 456 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::controller::ControlConf_ControllerType_IsValid, msg->mutable_unknown_fields(), 25);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParser;
        object = msg->mutable_active_controllers();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 max_steering_percentage_allowed = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_max_steering_percentage_allowed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double max_status_interval_sec = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 217) goto handle_unusual;
        msg->set_max_status_interval_sec(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.LatControllerConf lat_controller_conf = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::LatControllerConf::_InternalParse;
        object = msg->mutable_lat_controller_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.LonControllerConf lon_controller_conf = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::LonControllerConf::_InternalParse;
        object = msg->mutable_lon_controller_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double trajectory_period = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_trajectory_period(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double chassis_period = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 249) goto handle_unusual;
        msg->set_chassis_period(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double localization_period = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 1) goto handle_unusual;
        msg->set_localization_period(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double minimum_speed_resolution = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_minimum_speed_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.MPCControllerConf mpc_controller_conf = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::MPCControllerConf::_InternalParse;
        object = msg->mutable_mpc_controller_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double query_relative_time = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_query_relative_time(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double minimum_speed_protection = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_minimum_speed_protection(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double max_path_remain_when_stopped = 37 [default = 0.3];
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_max_path_remain_when_stopped(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::SimplePIDLatLonControllerConf::_InternalParse;
        object = msg->mutable_simple_pid_lat_lon_controller_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.StanleyControllerConf stanley_controller_conf = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::StanleyControllerConf::_InternalParse;
        object = msg->mutable_stanley_controller_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.ControlConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double control_test_duration = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_control_test_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_test_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_csv_debug = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_enable_csv_debug(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_csv_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_speed_station_preview = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_enable_speed_station_preview(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_speed_station_preview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_control_test_mode = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_control_test_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_control_test_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_preview_speed_for_table = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_use_preview_speed_for_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_preview_speed_for_table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_input_timestamp_check = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_enable_input_timestamp_check(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_input_timestamp_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_localization_miss_num = 7 [default = 20];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_max_localization_miss_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_localization_miss_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_chassis_miss_num = 8 [default = 20];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_max_chassis_miss_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_chassis_miss_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_planning_miss_num = 9 [default = 20];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_max_planning_miss_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_planning_miss_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_when_stopped = 10 [default = 0.01];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_max_acceleration_when_stopped(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer_angle_rate = 11 [default = 100];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_steer_angle_rate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_gain_scheduler = 12 [default = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_enable_gain_scheduler(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_gain_scheduler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool set_steer_limit = 13 [default = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_set_steer_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_steer_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_slope_offset = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_enable_slope_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_slope_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lock_steer_speed = 15 [default = 0.081];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_lock_steer_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lock_steer_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_navigation_mode_error_filter = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_enable_navigation_mode_error_filter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_navigation_mode_error_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_navigation_mode_position_update = 17 [default = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_enable_navigation_mode_position_update(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_navigation_mode_position_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_persistent_estop = 18 [default = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_enable_persistent_estop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_persistent_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double control_period = 19 [default = 0.01];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {
          HasBitSetters::set_has_control_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_planning_interval_sec = 20 [default = 0.2];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {
          HasBitSetters::set_has_max_planning_interval_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_planning_delay_threshold = 21 [default = 4];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {
          HasBitSetters::set_has_max_planning_delay_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_planning_delay_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .canbus.Chassis.DrivingMode driving_mode = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.DrivingAction action = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::controller::DrivingAction_IsValid(value)) {
            set_action(static_cast< ::controller::DrivingAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_estop_brake = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {
          HasBitSetters::set_has_soft_estop_brake(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_estop_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .controller.ControlConf.ControllerType active_controllers = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::controller::ControlConf_ControllerType_IsValid(value)) {
            add_active_controllers(static_cast< ::controller::ControlConf_ControllerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast<::google::protobuf::uint64>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 25,
                 ::controller::ControlConf_ControllerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_active_controllers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_steering_percentage_allowed = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_max_steering_percentage_allowed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_steering_percentage_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_status_interval_sec = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (217 & 0xFF)) {
          HasBitSetters::set_has_max_status_interval_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_status_interval_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.LatControllerConf lat_controller_conf = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.LonControllerConf lon_controller_conf = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lon_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trajectory_period = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {
          HasBitSetters::set_has_trajectory_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double chassis_period = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (249 & 0xFF)) {
          HasBitSetters::set_has_chassis_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double localization_period = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (257 & 0xFF)) {
          HasBitSetters::set_has_localization_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimum_speed_resolution = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (265 & 0xFF)) {
          HasBitSetters::set_has_minimum_speed_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_speed_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.MPCControllerConf mpc_controller_conf = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mpc_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double query_relative_time = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (281 & 0xFF)) {
          HasBitSetters::set_has_query_relative_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &query_relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimum_speed_protection = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (289 & 0xFF)) {
          HasBitSetters::set_has_minimum_speed_protection(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_speed_protection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_path_remain_when_stopped = 37 [default = 0.3];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (297 & 0xFF)) {
          HasBitSetters::set_has_max_path_remain_when_stopped(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_path_remain_when_stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_simple_pid_lat_lon_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.StanleyControllerConf stanley_controller_conf = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (314 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stanley_controller_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.ControlConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.ControlConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double control_test_duration = 1 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->control_test_duration(), output);
  }

  // optional bool enable_csv_debug = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_csv_debug(), output);
  }

  // optional bool enable_speed_station_preview = 3 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_speed_station_preview(), output);
  }

  // optional bool is_control_test_mode = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_control_test_mode(), output);
  }

  // optional bool use_preview_speed_for_table = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_preview_speed_for_table(), output);
  }

  // optional bool enable_input_timestamp_check = 6 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_input_timestamp_check(), output);
  }

  // optional int32 max_localization_miss_num = 7 [default = 20];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_localization_miss_num(), output);
  }

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_chassis_miss_num(), output);
  }

  // optional int32 max_planning_miss_num = 9 [default = 20];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_planning_miss_num(), output);
  }

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_acceleration_when_stopped(), output);
  }

  // optional double steer_angle_rate = 11 [default = 100];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_rate(), output);
  }

  // optional bool enable_gain_scheduler = 12 [default = true];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_gain_scheduler(), output);
  }

  // optional bool set_steer_limit = 13 [default = true];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->set_steer_limit(), output);
  }

  // optional bool enable_slope_offset = 14 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_slope_offset(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lock_steer_speed = 15 [default = 0.081];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lock_steer_speed(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_navigation_mode_error_filter(), output);
  }

  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->enable_navigation_mode_position_update(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_persistent_estop = 18 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->enable_persistent_estop(), output);
  }

  // optional double control_period = 19 [default = 0.01];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->control_period(), output);
  }

  // optional double max_planning_interval_sec = 20 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->max_planning_interval_sec(), output);
  }

  // optional double max_planning_delay_threshold = 21 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->max_planning_delay_threshold(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .canbus.Chassis.DrivingMode driving_mode = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->driving_mode(), output);
  }

  // optional .controller.DrivingAction action = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->action(), output);
  }

  // optional double soft_estop_brake = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->soft_estop_brake(), output);
  }

  // repeated .controller.ControlConf.ControllerType active_controllers = 25;
  for (int i = 0, n = this->active_controllers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->active_controllers(i), output);
  }

  // optional int32 max_steering_percentage_allowed = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->max_steering_percentage_allowed(), output);
  }

  // optional double max_status_interval_sec = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->max_status_interval_sec(), output);
  }

  // optional .controller.LatControllerConf lat_controller_conf = 28;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::lat_controller_conf(this), output);
  }

  // optional .controller.LonControllerConf lon_controller_conf = 29;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::lon_controller_conf(this), output);
  }

  // optional double trajectory_period = 30;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->trajectory_period(), output);
  }

  // optional double chassis_period = 31;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->chassis_period(), output);
  }

  // optional double localization_period = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->localization_period(), output);
  }

  // optional double minimum_speed_resolution = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->minimum_speed_resolution(), output);
  }

  // optional .controller.MPCControllerConf mpc_controller_conf = 34;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::mpc_controller_conf(this), output);
  }

  // optional double query_relative_time = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->query_relative_time(), output);
  }

  // optional double minimum_speed_protection = 36;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->minimum_speed_protection(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->max_path_remain_when_stopped(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, HasBitSetters::simple_pid_lat_lon_controller_conf(this), output);
  }

  // optional .controller.StanleyControllerConf stanley_controller_conf = 39;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, HasBitSetters::stanley_controller_conf(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.ControlConf)
}

::google::protobuf::uint8* ControlConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.ControlConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double control_test_duration = 1 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->control_test_duration(), target);
  }

  // optional bool enable_csv_debug = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_csv_debug(), target);
  }

  // optional bool enable_speed_station_preview = 3 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_speed_station_preview(), target);
  }

  // optional bool is_control_test_mode = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_control_test_mode(), target);
  }

  // optional bool use_preview_speed_for_table = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_preview_speed_for_table(), target);
  }

  // optional bool enable_input_timestamp_check = 6 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_input_timestamp_check(), target);
  }

  // optional int32 max_localization_miss_num = 7 [default = 20];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_localization_miss_num(), target);
  }

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_chassis_miss_num(), target);
  }

  // optional int32 max_planning_miss_num = 9 [default = 20];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_planning_miss_num(), target);
  }

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_acceleration_when_stopped(), target);
  }

  // optional double steer_angle_rate = 11 [default = 100];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_rate(), target);
  }

  // optional bool enable_gain_scheduler = 12 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_gain_scheduler(), target);
  }

  // optional bool set_steer_limit = 13 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->set_steer_limit(), target);
  }

  // optional bool enable_slope_offset = 14 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_slope_offset(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lock_steer_speed = 15 [default = 0.081];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lock_steer_speed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_navigation_mode_error_filter(), target);
  }

  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->enable_navigation_mode_position_update(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_persistent_estop = 18 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->enable_persistent_estop(), target);
  }

  // optional double control_period = 19 [default = 0.01];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->control_period(), target);
  }

  // optional double max_planning_interval_sec = 20 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->max_planning_interval_sec(), target);
  }

  // optional double max_planning_delay_threshold = 21 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->max_planning_delay_threshold(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .canbus.Chassis.DrivingMode driving_mode = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->driving_mode(), target);
  }

  // optional .controller.DrivingAction action = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->action(), target);
  }

  // optional double soft_estop_brake = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->soft_estop_brake(), target);
  }

  // repeated .controller.ControlConf.ControllerType active_controllers = 25;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    25, this->active_controllers_, target);

  // optional int32 max_steering_percentage_allowed = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->max_steering_percentage_allowed(), target);
  }

  // optional double max_status_interval_sec = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->max_status_interval_sec(), target);
  }

  // optional .controller.LatControllerConf lat_controller_conf = 28;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::lat_controller_conf(this), target);
  }

  // optional .controller.LonControllerConf lon_controller_conf = 29;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::lon_controller_conf(this), target);
  }

  // optional double trajectory_period = 30;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->trajectory_period(), target);
  }

  // optional double chassis_period = 31;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->chassis_period(), target);
  }

  // optional double localization_period = 32;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->localization_period(), target);
  }

  // optional double minimum_speed_resolution = 33;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->minimum_speed_resolution(), target);
  }

  // optional .controller.MPCControllerConf mpc_controller_conf = 34;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::mpc_controller_conf(this), target);
  }

  // optional double query_relative_time = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->query_relative_time(), target);
  }

  // optional double minimum_speed_protection = 36;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->minimum_speed_protection(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->max_path_remain_when_stopped(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, HasBitSetters::simple_pid_lat_lon_controller_conf(this), target);
  }

  // optional .controller.StanleyControllerConf stanley_controller_conf = 39;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, HasBitSetters::stanley_controller_conf(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.ControlConf)
  return target;
}

size_t ControlConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.ControlConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .controller.ControlConf.ControllerType active_controllers = 25;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->active_controllers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_controllers(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.LatControllerConf lat_controller_conf = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lat_controller_conf_);
    }

    // optional .controller.LonControllerConf lon_controller_conf = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lon_controller_conf_);
    }

    // optional .controller.MPCControllerConf mpc_controller_conf = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mpc_controller_conf_);
    }

    // optional .controller.SimplePIDLatLonControllerConf simple_pid_lat_lon_controller_conf = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *simple_pid_lat_lon_controller_conf_);
    }

    // optional .controller.StanleyControllerConf stanley_controller_conf = 39;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stanley_controller_conf_);
    }

    // optional bool enable_csv_debug = 2 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_speed_station_preview = 3 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_control_test_mode = 4 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_preview_speed_for_table = 5 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_timestamp_check = 6 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool enable_slope_offset = 14 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool enable_navigation_mode_error_filter = 16 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .canbus.Chassis.DrivingMode driving_mode = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .controller.DrivingAction action = 23;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional double soft_estop_brake = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double max_status_interval_sec = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double trajectory_period = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double chassis_period = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double localization_period = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_resolution = 33;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double query_relative_time = 35;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_protection = 36;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_steering_percentage_allowed = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_steering_percentage_allowed());
    }

    // optional double control_test_duration = 1 [default = -1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 max_localization_miss_num = 7 [default = 20];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_localization_miss_num());
    }

    // optional int32 max_chassis_miss_num = 8 [default = 20];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_chassis_miss_num());
    }

    // optional double max_acceleration_when_stopped = 10 [default = 0.01];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_rate = 11 [default = 100];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_planning_miss_num = 9 [default = 20];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_planning_miss_num());
    }

    // optional bool enable_gain_scheduler = 12 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool set_steer_limit = 13 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_navigation_mode_position_update = 17 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool enable_persistent_estop = 18 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional double lock_steer_speed = 15 [default = 0.081];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double control_period = 19 [default = 0.01];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double max_planning_interval_sec = 20 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double max_planning_delay_threshold = 21 [default = 4];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double max_path_remain_when_stopped = 37 [default = 0.3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlConf* source =
      ::google::protobuf::DynamicCastToGenerated<ControlConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.ControlConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.ControlConf)
    MergeFrom(*source);
  }
}

void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_controllers_.MergeFrom(from.active_controllers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat_controller_conf()->::controller::LatControllerConf::MergeFrom(from.lat_controller_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lon_controller_conf()->::controller::LonControllerConf::MergeFrom(from.lon_controller_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mpc_controller_conf()->::controller::MPCControllerConf::MergeFrom(from.mpc_controller_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_simple_pid_lat_lon_controller_conf()->::controller::SimplePIDLatLonControllerConf::MergeFrom(from.simple_pid_lat_lon_controller_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stanley_controller_conf()->::controller::StanleyControllerConf::MergeFrom(from.stanley_controller_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      enable_csv_debug_ = from.enable_csv_debug_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_speed_station_preview_ = from.enable_speed_station_preview_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_control_test_mode_ = from.is_control_test_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      use_preview_speed_for_table_ = from.use_preview_speed_for_table_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_input_timestamp_check_ = from.enable_input_timestamp_check_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_slope_offset_ = from.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_navigation_mode_error_filter_ = from.enable_navigation_mode_error_filter_;
    }
    if (cached_has_bits & 0x00001000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_estop_brake_ = from.soft_estop_brake_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_status_interval_sec_ = from.max_status_interval_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      trajectory_period_ = from.trajectory_period_;
    }
    if (cached_has_bits & 0x00020000u) {
      chassis_period_ = from.chassis_period_;
    }
    if (cached_has_bits & 0x00040000u) {
      localization_period_ = from.localization_period_;
    }
    if (cached_has_bits & 0x00080000u) {
      minimum_speed_resolution_ = from.minimum_speed_resolution_;
    }
    if (cached_has_bits & 0x00100000u) {
      query_relative_time_ = from.query_relative_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      minimum_speed_protection_ = from.minimum_speed_protection_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_steering_percentage_allowed_ = from.max_steering_percentage_allowed_;
    }
    if (cached_has_bits & 0x00800000u) {
      control_test_duration_ = from.control_test_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      max_localization_miss_num_ = from.max_localization_miss_num_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_chassis_miss_num_ = from.max_chassis_miss_num_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_acceleration_when_stopped_ = from.max_acceleration_when_stopped_;
    }
    if (cached_has_bits & 0x08000000u) {
      steer_angle_rate_ = from.steer_angle_rate_;
    }
    if (cached_has_bits & 0x10000000u) {
      max_planning_miss_num_ = from.max_planning_miss_num_;
    }
    if (cached_has_bits & 0x20000000u) {
      enable_gain_scheduler_ = from.enable_gain_scheduler_;
    }
    if (cached_has_bits & 0x40000000u) {
      set_steer_limit_ = from.set_steer_limit_;
    }
    if (cached_has_bits & 0x80000000u) {
      enable_navigation_mode_position_update_ = from.enable_navigation_mode_position_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_persistent_estop_ = from.enable_persistent_estop_;
    }
    if (cached_has_bits & 0x00000002u) {
      lock_steer_speed_ = from.lock_steer_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      control_period_ = from.control_period_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_planning_interval_sec_ = from.max_planning_interval_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_planning_delay_threshold_ = from.max_planning_delay_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_path_remain_when_stopped_ = from.max_path_remain_when_stopped_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ControlConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {
  return true;
}

void ControlConf::Swap(ControlConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlConf::InternalSwap(ControlConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  active_controllers_.InternalSwap(&other->active_controllers_);
  swap(lat_controller_conf_, other->lat_controller_conf_);
  swap(lon_controller_conf_, other->lon_controller_conf_);
  swap(mpc_controller_conf_, other->mpc_controller_conf_);
  swap(simple_pid_lat_lon_controller_conf_, other->simple_pid_lat_lon_controller_conf_);
  swap(stanley_controller_conf_, other->stanley_controller_conf_);
  swap(enable_csv_debug_, other->enable_csv_debug_);
  swap(enable_speed_station_preview_, other->enable_speed_station_preview_);
  swap(is_control_test_mode_, other->is_control_test_mode_);
  swap(use_preview_speed_for_table_, other->use_preview_speed_for_table_);
  swap(enable_input_timestamp_check_, other->enable_input_timestamp_check_);
  swap(enable_slope_offset_, other->enable_slope_offset_);
  swap(enable_navigation_mode_error_filter_, other->enable_navigation_mode_error_filter_);
  swap(driving_mode_, other->driving_mode_);
  swap(action_, other->action_);
  swap(soft_estop_brake_, other->soft_estop_brake_);
  swap(max_status_interval_sec_, other->max_status_interval_sec_);
  swap(trajectory_period_, other->trajectory_period_);
  swap(chassis_period_, other->chassis_period_);
  swap(localization_period_, other->localization_period_);
  swap(minimum_speed_resolution_, other->minimum_speed_resolution_);
  swap(query_relative_time_, other->query_relative_time_);
  swap(minimum_speed_protection_, other->minimum_speed_protection_);
  swap(max_steering_percentage_allowed_, other->max_steering_percentage_allowed_);
  swap(control_test_duration_, other->control_test_duration_);
  swap(max_localization_miss_num_, other->max_localization_miss_num_);
  swap(max_chassis_miss_num_, other->max_chassis_miss_num_);
  swap(max_acceleration_when_stopped_, other->max_acceleration_when_stopped_);
  swap(steer_angle_rate_, other->steer_angle_rate_);
  swap(max_planning_miss_num_, other->max_planning_miss_num_);
  swap(enable_gain_scheduler_, other->enable_gain_scheduler_);
  swap(set_steer_limit_, other->set_steer_limit_);
  swap(enable_navigation_mode_position_update_, other->enable_navigation_mode_position_update_);
  swap(enable_persistent_estop_, other->enable_persistent_estop_);
  swap(lock_steer_speed_, other->lock_steer_speed_);
  swap(control_period_, other->control_period_);
  swap(max_planning_interval_sec_, other->max_planning_interval_sec_);
  swap(max_planning_delay_threshold_, other->max_planning_delay_threshold_);
  swap(max_path_remain_when_stopped_, other->max_path_remain_when_stopped_);
}

::google::protobuf::Metadata ControlConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_control_5fconf_2eproto);
  return ::file_level_metadata_control_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::ControlConf* Arena::CreateMaybeMessage< ::controller::ControlConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::ControlConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
