// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_obstacle.proto

#ifndef PROTOBUF_INCLUDED_prediction_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_prediction_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pnc_point.pb.h"
#include "perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_5fobstacle_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_5fobstacle_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_prediction_5fobstacle_2eproto();
namespace prediction {
class Intent;
class IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class ObstacleIntent;
class ObstacleIntentDefaultTypeInternal;
extern ObstacleIntentDefaultTypeInternal _ObstacleIntent_default_instance_;
class ObstacleInteractiveTag;
class ObstacleInteractiveTagDefaultTypeInternal;
extern ObstacleInteractiveTagDefaultTypeInternal _ObstacleInteractiveTag_default_instance_;
class ObstaclePriority;
class ObstaclePriorityDefaultTypeInternal;
extern ObstaclePriorityDefaultTypeInternal _ObstaclePriority_default_instance_;
class PredictionObstacle;
class PredictionObstacleDefaultTypeInternal;
extern PredictionObstacleDefaultTypeInternal _PredictionObstacle_default_instance_;
class PredictionObstacles;
class PredictionObstaclesDefaultTypeInternal;
extern PredictionObstaclesDefaultTypeInternal _PredictionObstacles_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace prediction
namespace google {
namespace protobuf {
template<> ::prediction::Intent* Arena::CreateMaybeMessage<::prediction::Intent>(Arena*);
template<> ::prediction::ObstacleIntent* Arena::CreateMaybeMessage<::prediction::ObstacleIntent>(Arena*);
template<> ::prediction::ObstacleInteractiveTag* Arena::CreateMaybeMessage<::prediction::ObstacleInteractiveTag>(Arena*);
template<> ::prediction::ObstaclePriority* Arena::CreateMaybeMessage<::prediction::ObstaclePriority>(Arena*);
template<> ::prediction::PredictionObstacle* Arena::CreateMaybeMessage<::prediction::PredictionObstacle>(Arena*);
template<> ::prediction::PredictionObstacles* Arena::CreateMaybeMessage<::prediction::PredictionObstacles>(Arena*);
template<> ::prediction::Trajectory* Arena::CreateMaybeMessage<::prediction::Trajectory>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace prediction {

enum ObstacleIntent_Type {
  ObstacleIntent_Type_UNKNOWN = 0,
  ObstacleIntent_Type_STOP = 1,
  ObstacleIntent_Type_STATIONARY = 2,
  ObstacleIntent_Type_MOVING = 3,
  ObstacleIntent_Type_CHANGE_LANE = 4,
  ObstacleIntent_Type_LOW_ACCELERATION = 5,
  ObstacleIntent_Type_HIGH_ACCELERATION = 6,
  ObstacleIntent_Type_LOW_DECELERATION = 7,
  ObstacleIntent_Type_HIGH_DECELERATION = 8
};
bool ObstacleIntent_Type_IsValid(int value);
const ObstacleIntent_Type ObstacleIntent_Type_Type_MIN = ObstacleIntent_Type_UNKNOWN;
const ObstacleIntent_Type ObstacleIntent_Type_Type_MAX = ObstacleIntent_Type_HIGH_DECELERATION;
const int ObstacleIntent_Type_Type_ARRAYSIZE = ObstacleIntent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor();
inline const ::std::string& ObstacleIntent_Type_Name(ObstacleIntent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleIntent_Type_descriptor(), value);
}
inline bool ObstacleIntent_Type_Parse(
    const ::std::string& name, ObstacleIntent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleIntent_Type>(
    ObstacleIntent_Type_descriptor(), name, value);
}
enum Intent_Type {
  Intent_Type_UNKNOWN = 0,
  Intent_Type_STOP = 1,
  Intent_Type_CRUISE = 2,
  Intent_Type_CHANGE_LANE = 3
};
bool Intent_Type_IsValid(int value);
const Intent_Type Intent_Type_Type_MIN = Intent_Type_UNKNOWN;
const Intent_Type Intent_Type_Type_MAX = Intent_Type_CHANGE_LANE;
const int Intent_Type_Type_ARRAYSIZE = Intent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor();
inline const ::std::string& Intent_Type_Name(Intent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Intent_Type_descriptor(), value);
}
inline bool Intent_Type_Parse(
    const ::std::string& name, Intent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Intent_Type>(
    Intent_Type_descriptor(), name, value);
}
enum ObstacleInteractiveTag_InteractiveTag {
  ObstacleInteractiveTag_InteractiveTag_INTERACTION = 1,
  ObstacleInteractiveTag_InteractiveTag_NONINTERACTION = 2
};
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value);
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MIN = ObstacleInteractiveTag_InteractiveTag_INTERACTION;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX = ObstacleInteractiveTag_InteractiveTag_NONINTERACTION;
const int ObstacleInteractiveTag_InteractiveTag_InteractiveTag_ARRAYSIZE = ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor();
inline const ::std::string& ObstacleInteractiveTag_InteractiveTag_Name(ObstacleInteractiveTag_InteractiveTag value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleInteractiveTag_InteractiveTag_descriptor(), value);
}
inline bool ObstacleInteractiveTag_InteractiveTag_Parse(
    const ::std::string& name, ObstacleInteractiveTag_InteractiveTag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleInteractiveTag_InteractiveTag>(
    ObstacleInteractiveTag_InteractiveTag_descriptor(), name, value);
}
enum ObstaclePriority_Priority {
  ObstaclePriority_Priority_CAUTION = 1,
  ObstaclePriority_Priority_NORMAL = 2,
  ObstaclePriority_Priority_IGNORE = 3
};
bool ObstaclePriority_Priority_IsValid(int value);
const ObstaclePriority_Priority ObstaclePriority_Priority_Priority_MIN = ObstaclePriority_Priority_CAUTION;
const ObstaclePriority_Priority ObstaclePriority_Priority_Priority_MAX = ObstaclePriority_Priority_IGNORE;
const int ObstaclePriority_Priority_Priority_ARRAYSIZE = ObstaclePriority_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstaclePriority_Priority_descriptor();
inline const ::std::string& ObstaclePriority_Priority_Name(ObstaclePriority_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstaclePriority_Priority_descriptor(), value);
}
inline bool ObstaclePriority_Priority_Parse(
    const ::std::string& name, ObstaclePriority_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstaclePriority_Priority>(
    ObstaclePriority_Priority_descriptor(), name, value);
}
// ===================================================================

class ObstacleIntent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.ObstacleIntent) */ {
 public:
  ObstacleIntent();
  virtual ~ObstacleIntent();

  ObstacleIntent(const ObstacleIntent& from);

  inline ObstacleIntent& operator=(const ObstacleIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleIntent(ObstacleIntent&& from) noexcept
    : ObstacleIntent() {
    *this = ::std::move(from);
  }

  inline ObstacleIntent& operator=(ObstacleIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObstacleIntent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleIntent* internal_default_instance() {
    return reinterpret_cast<const ObstacleIntent*>(
               &_ObstacleIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObstacleIntent* other);
  friend void swap(ObstacleIntent& a, ObstacleIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleIntent* New() const final {
    return CreateMaybeMessage<ObstacleIntent>(nullptr);
  }

  ObstacleIntent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleIntent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleIntent& from);
  void MergeFrom(const ObstacleIntent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleIntent_Type Type;
  static const Type UNKNOWN =
    ObstacleIntent_Type_UNKNOWN;
  static const Type STOP =
    ObstacleIntent_Type_STOP;
  static const Type STATIONARY =
    ObstacleIntent_Type_STATIONARY;
  static const Type MOVING =
    ObstacleIntent_Type_MOVING;
  static const Type CHANGE_LANE =
    ObstacleIntent_Type_CHANGE_LANE;
  static const Type LOW_ACCELERATION =
    ObstacleIntent_Type_LOW_ACCELERATION;
  static const Type HIGH_ACCELERATION =
    ObstacleIntent_Type_HIGH_ACCELERATION;
  static const Type LOW_DECELERATION =
    ObstacleIntent_Type_LOW_DECELERATION;
  static const Type HIGH_DECELERATION =
    ObstacleIntent_Type_HIGH_DECELERATION;
  static inline bool Type_IsValid(int value) {
    return ObstacleIntent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObstacleIntent_Type_Type_MIN;
  static const Type Type_MAX =
    ObstacleIntent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObstacleIntent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObstacleIntent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObstacleIntent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObstacleIntent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::prediction::ObstacleIntent_Type type() const;
  void set_type(::prediction::ObstacleIntent_Type value);

  // @@protoc_insertion_point(class_scope:prediction.ObstacleIntent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class Intent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.Intent) */ {
 public:
  Intent();
  virtual ~Intent();

  Intent(const Intent& from);

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(Intent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Intent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Intent* other);
  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Intent* New() const final {
    return CreateMaybeMessage<Intent>(nullptr);
  }

  Intent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Type Type;
  static const Type UNKNOWN =
    Intent_Type_UNKNOWN;
  static const Type STOP =
    Intent_Type_STOP;
  static const Type CRUISE =
    Intent_Type_CRUISE;
  static const Type CHANGE_LANE =
    Intent_Type_CHANGE_LANE;
  static inline bool Type_IsValid(int value) {
    return Intent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Intent_Type_Type_MIN;
  static const Type Type_MAX =
    Intent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Intent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Intent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Intent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Intent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::prediction::Intent_Type type() const;
  void set_type(::prediction::Intent_Type value);

  // @@protoc_insertion_point(class_scope:prediction.Intent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class ObstacleInteractiveTag :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.ObstacleInteractiveTag) */ {
 public:
  ObstacleInteractiveTag();
  virtual ~ObstacleInteractiveTag();

  ObstacleInteractiveTag(const ObstacleInteractiveTag& from);

  inline ObstacleInteractiveTag& operator=(const ObstacleInteractiveTag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleInteractiveTag(ObstacleInteractiveTag&& from) noexcept
    : ObstacleInteractiveTag() {
    *this = ::std::move(from);
  }

  inline ObstacleInteractiveTag& operator=(ObstacleInteractiveTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObstacleInteractiveTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleInteractiveTag* internal_default_instance() {
    return reinterpret_cast<const ObstacleInteractiveTag*>(
               &_ObstacleInteractiveTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ObstacleInteractiveTag* other);
  friend void swap(ObstacleInteractiveTag& a, ObstacleInteractiveTag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleInteractiveTag* New() const final {
    return CreateMaybeMessage<ObstacleInteractiveTag>(nullptr);
  }

  ObstacleInteractiveTag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleInteractiveTag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleInteractiveTag& from);
  void MergeFrom(const ObstacleInteractiveTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleInteractiveTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleInteractiveTag_InteractiveTag InteractiveTag;
  static const InteractiveTag INTERACTION =
    ObstacleInteractiveTag_InteractiveTag_INTERACTION;
  static const InteractiveTag NONINTERACTION =
    ObstacleInteractiveTag_InteractiveTag_NONINTERACTION;
  static inline bool InteractiveTag_IsValid(int value) {
    return ObstacleInteractiveTag_InteractiveTag_IsValid(value);
  }
  static const InteractiveTag InteractiveTag_MIN =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MIN;
  static const InteractiveTag InteractiveTag_MAX =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_MAX;
  static const int InteractiveTag_ARRAYSIZE =
    ObstacleInteractiveTag_InteractiveTag_InteractiveTag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InteractiveTag_descriptor() {
    return ObstacleInteractiveTag_InteractiveTag_descriptor();
  }
  static inline const ::std::string& InteractiveTag_Name(InteractiveTag value) {
    return ObstacleInteractiveTag_InteractiveTag_Name(value);
  }
  static inline bool InteractiveTag_Parse(const ::std::string& name,
      InteractiveTag* value) {
    return ObstacleInteractiveTag_InteractiveTag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  bool has_interactive_tag() const;
  void clear_interactive_tag();
  static const int kInteractiveTagFieldNumber = 37;
  ::prediction::ObstacleInteractiveTag_InteractiveTag interactive_tag() const;
  void set_interactive_tag(::prediction::ObstacleInteractiveTag_InteractiveTag value);

  // @@protoc_insertion_point(class_scope:prediction.ObstacleInteractiveTag)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int interactive_tag_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class ObstaclePriority :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.ObstaclePriority) */ {
 public:
  ObstaclePriority();
  virtual ~ObstaclePriority();

  ObstaclePriority(const ObstaclePriority& from);

  inline ObstaclePriority& operator=(const ObstaclePriority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstaclePriority(ObstaclePriority&& from) noexcept
    : ObstaclePriority() {
    *this = ::std::move(from);
  }

  inline ObstaclePriority& operator=(ObstaclePriority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObstaclePriority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstaclePriority* internal_default_instance() {
    return reinterpret_cast<const ObstaclePriority*>(
               &_ObstaclePriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ObstaclePriority* other);
  friend void swap(ObstaclePriority& a, ObstaclePriority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstaclePriority* New() const final {
    return CreateMaybeMessage<ObstaclePriority>(nullptr);
  }

  ObstaclePriority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstaclePriority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstaclePriority& from);
  void MergeFrom(const ObstaclePriority& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstaclePriority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstaclePriority_Priority Priority;
  static const Priority CAUTION =
    ObstaclePriority_Priority_CAUTION;
  static const Priority NORMAL =
    ObstaclePriority_Priority_NORMAL;
  static const Priority IGNORE =
    ObstaclePriority_Priority_IGNORE;
  static inline bool Priority_IsValid(int value) {
    return ObstaclePriority_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    ObstaclePriority_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    ObstaclePriority_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    ObstaclePriority_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return ObstaclePriority_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return ObstaclePriority_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return ObstaclePriority_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 25;
  ::prediction::ObstaclePriority_Priority priority() const;
  void set_priority(::prediction::ObstaclePriority_Priority value);

  // @@protoc_insertion_point(class_scope:prediction.ObstaclePriority)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int priority_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class Trajectory :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .points.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 2;
  ::points::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::points::TrajectoryPoint& trajectory_point(int index) const;
  ::points::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
      trajectory_point() const;

  // optional double probability = 1;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 1;
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:prediction.Trajectory)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint > trajectory_point_;
  double probability_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PredictionObstacle :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.PredictionObstacle) */ {
 public:
  PredictionObstacle();
  virtual ~PredictionObstacle();

  PredictionObstacle(const PredictionObstacle& from);

  inline PredictionObstacle& operator=(const PredictionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionObstacle(PredictionObstacle&& from) noexcept
    : PredictionObstacle() {
    *this = ::std::move(from);
  }

  inline PredictionObstacle& operator=(PredictionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PredictionObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionObstacle* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacle*>(
               &_PredictionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PredictionObstacle* other);
  friend void swap(PredictionObstacle& a, PredictionObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionObstacle* New() const final {
    return CreateMaybeMessage<PredictionObstacle>(nullptr);
  }

  PredictionObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionObstacle& from);
  void MergeFrom(const PredictionObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction.Trajectory trajectory = 4;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 4;
  ::prediction::Trajectory* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField< ::prediction::Trajectory >*
      mutable_trajectory();
  const ::prediction::Trajectory& trajectory(int index) const;
  ::prediction::Trajectory* add_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::prediction::Trajectory >&
      trajectory() const;

  // optional .perception.PerceptionObstacle perception_obstacle = 1;
  bool has_perception_obstacle() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  const ::perception::PerceptionObstacle& perception_obstacle() const;
  ::perception::PerceptionObstacle* release_perception_obstacle();
  ::perception::PerceptionObstacle* mutable_perception_obstacle();
  void set_allocated_perception_obstacle(::perception::PerceptionObstacle* perception_obstacle);

  // optional .prediction.ObstacleIntent intent = 5;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 5;
  const ::prediction::ObstacleIntent& intent() const;
  ::prediction::ObstacleIntent* release_intent();
  ::prediction::ObstacleIntent* mutable_intent();
  void set_allocated_intent(::prediction::ObstacleIntent* intent);

  // optional .prediction.ObstaclePriority priority = 6;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  const ::prediction::ObstaclePriority& priority() const;
  ::prediction::ObstaclePriority* release_priority();
  ::prediction::ObstaclePriority* mutable_priority();
  void set_allocated_priority(::prediction::ObstaclePriority* priority);

  // optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
  bool has_interactive_tag() const;
  void clear_interactive_tag();
  static const int kInteractiveTagFieldNumber = 9;
  const ::prediction::ObstacleInteractiveTag& interactive_tag() const;
  ::prediction::ObstacleInteractiveTag* release_interactive_tag();
  ::prediction::ObstacleInteractiveTag* mutable_interactive_tag();
  void set_allocated_interactive_tag(::prediction::ObstacleInteractiveTag* interactive_tag);

  // optional double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double predicted_period = 3;
  bool has_predicted_period() const;
  void clear_predicted_period();
  static const int kPredictedPeriodFieldNumber = 3;
  double predicted_period() const;
  void set_predicted_period(double value);

  // optional bool is_static = 7 [default = false];
  bool has_is_static() const;
  void clear_is_static();
  static const int kIsStaticFieldNumber = 7;
  bool is_static() const;
  void set_is_static(bool value);

  // @@protoc_insertion_point(class_scope:prediction.PredictionObstacle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::prediction::Trajectory > trajectory_;
  ::perception::PerceptionObstacle* perception_obstacle_;
  ::prediction::ObstacleIntent* intent_;
  ::prediction::ObstaclePriority* priority_;
  ::prediction::ObstacleInteractiveTag* interactive_tag_;
  double timestamp_;
  double predicted_period_;
  bool is_static_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PredictionObstacles :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction.PredictionObstacles) */ {
 public:
  PredictionObstacles();
  virtual ~PredictionObstacles();

  PredictionObstacles(const PredictionObstacles& from);

  inline PredictionObstacles& operator=(const PredictionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionObstacles(PredictionObstacles&& from) noexcept
    : PredictionObstacles() {
    *this = ::std::move(from);
  }

  inline PredictionObstacles& operator=(PredictionObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PredictionObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionObstacles* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacles*>(
               &_PredictionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PredictionObstacles* other);
  friend void swap(PredictionObstacles& a, PredictionObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionObstacles* New() const final {
    return CreateMaybeMessage<PredictionObstacles>(nullptr);
  }

  PredictionObstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionObstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionObstacles& from);
  void MergeFrom(const PredictionObstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction.PredictionObstacle prediction_obstacle = 1;
  int prediction_obstacle_size() const;
  void clear_prediction_obstacle();
  static const int kPredictionObstacleFieldNumber = 1;
  ::prediction::PredictionObstacle* mutable_prediction_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::prediction::PredictionObstacle >*
      mutable_prediction_obstacle();
  const ::prediction::PredictionObstacle& prediction_obstacle(int index) const;
  ::prediction::PredictionObstacle* add_prediction_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::prediction::PredictionObstacle >&
      prediction_obstacle() const;

  // optional .prediction.Intent intent = 4;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 4;
  const ::prediction::Intent& intent() const;
  ::prediction::Intent* release_intent();
  ::prediction::Intent* mutable_intent();
  void set_allocated_intent(::prediction::Intent* intent);

  // optional double start_timestamp = 2;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 2;
  double start_timestamp() const;
  void set_start_timestamp(double value);

  // optional double end_timestamp = 3;
  bool has_end_timestamp() const;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 3;
  double end_timestamp() const;
  void set_end_timestamp(double value);

  // @@protoc_insertion_point(class_scope:prediction.PredictionObstacles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::prediction::PredictionObstacle > prediction_obstacle_;
  ::prediction::Intent* intent_;
  double start_timestamp_;
  double end_timestamp_;
  friend struct ::TableStruct_prediction_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleIntent

// optional .prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
inline bool ObstacleIntent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleIntent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::prediction::ObstacleIntent_Type ObstacleIntent::type() const {
  // @@protoc_insertion_point(field_get:prediction.ObstacleIntent.type)
  return static_cast< ::prediction::ObstacleIntent_Type >(type_);
}
inline void ObstacleIntent::set_type(::prediction::ObstacleIntent_Type value) {
  assert(::prediction::ObstacleIntent_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:prediction.ObstacleIntent.type)
}

// -------------------------------------------------------------------

// Intent

// optional .prediction.Intent.Type type = 1 [default = UNKNOWN];
inline bool Intent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Intent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::prediction::Intent_Type Intent::type() const {
  // @@protoc_insertion_point(field_get:prediction.Intent.type)
  return static_cast< ::prediction::Intent_Type >(type_);
}
inline void Intent::set_type(::prediction::Intent_Type value) {
  assert(::prediction::Intent_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:prediction.Intent.type)
}

// -------------------------------------------------------------------

// ObstacleInteractiveTag

// optional .prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
inline bool ObstacleInteractiveTag::has_interactive_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleInteractiveTag::clear_interactive_tag() {
  interactive_tag_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::interactive_tag() const {
  // @@protoc_insertion_point(field_get:prediction.ObstacleInteractiveTag.interactive_tag)
  return static_cast< ::prediction::ObstacleInteractiveTag_InteractiveTag >(interactive_tag_);
}
inline void ObstacleInteractiveTag::set_interactive_tag(::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  assert(::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  interactive_tag_ = value;
  // @@protoc_insertion_point(field_set:prediction.ObstacleInteractiveTag.interactive_tag)
}

// -------------------------------------------------------------------

// ObstaclePriority

// optional .prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
inline bool ObstaclePriority::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstaclePriority::clear_priority() {
  priority_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::prediction::ObstaclePriority_Priority ObstaclePriority::priority() const {
  // @@protoc_insertion_point(field_get:prediction.ObstaclePriority.priority)
  return static_cast< ::prediction::ObstaclePriority_Priority >(priority_);
}
inline void ObstaclePriority::set_priority(::prediction::ObstaclePriority_Priority value) {
  assert(::prediction::ObstaclePriority_Priority_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:prediction.ObstaclePriority.priority)
}

// -------------------------------------------------------------------

// Trajectory

// optional double probability = 1;
inline bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::clear_probability() {
  probability_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:prediction.Trajectory.probability)
  return probability_;
}
inline void Trajectory::set_probability(double value) {
  _has_bits_[0] |= 0x00000001u;
  probability_ = value;
  // @@protoc_insertion_point(field_set:prediction.Trajectory.probability)
}

// repeated .points.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline ::points::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:prediction.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:prediction.Trajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::points::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:prediction.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::points::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:prediction.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::points::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:prediction.Trajectory.trajectory_point)
  return trajectory_point_;
}

// -------------------------------------------------------------------

// PredictionObstacle

// optional .perception.PerceptionObstacle perception_obstacle = 1;
inline bool PredictionObstacle::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perception::PerceptionObstacle& PredictionObstacle::perception_obstacle() const {
  const ::perception::PerceptionObstacle* p = perception_obstacle_;
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.perception_obstacle)
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::PerceptionObstacle*>(
      &::perception::_PerceptionObstacle_default_instance_);
}
inline ::perception::PerceptionObstacle* PredictionObstacle::release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:prediction.PredictionObstacle.perception_obstacle)
  _has_bits_[0] &= ~0x00000001u;
  ::perception::PerceptionObstacle* temp = perception_obstacle_;
  perception_obstacle_ = nullptr;
  return temp;
}
inline ::perception::PerceptionObstacle* PredictionObstacle::mutable_perception_obstacle() {
  _has_bits_[0] |= 0x00000001u;
  if (perception_obstacle_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::PerceptionObstacle>(GetArenaNoVirtual());
    perception_obstacle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_;
}
inline void PredictionObstacle::set_allocated_perception_obstacle(::perception::PerceptionObstacle* perception_obstacle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(perception_obstacle_);
  }
  if (perception_obstacle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perception_obstacle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, perception_obstacle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  perception_obstacle_ = perception_obstacle;
  // @@protoc_insertion_point(field_set_allocated:prediction.PredictionObstacle.perception_obstacle)
}

// optional double timestamp = 2;
inline bool PredictionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictionObstacle::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PredictionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.timestamp)
  return timestamp_;
}
inline void PredictionObstacle::set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:prediction.PredictionObstacle.timestamp)
}

// optional double predicted_period = 3;
inline bool PredictionObstacle::has_predicted_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictionObstacle::clear_predicted_period() {
  predicted_period_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PredictionObstacle::predicted_period() const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.predicted_period)
  return predicted_period_;
}
inline void PredictionObstacle::set_predicted_period(double value) {
  _has_bits_[0] |= 0x00000020u;
  predicted_period_ = value;
  // @@protoc_insertion_point(field_set:prediction.PredictionObstacle.predicted_period)
}

// repeated .prediction.Trajectory trajectory = 4;
inline int PredictionObstacle::trajectory_size() const {
  return trajectory_.size();
}
inline void PredictionObstacle::clear_trajectory() {
  trajectory_.Clear();
}
inline ::prediction::Trajectory* PredictionObstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacle.trajectory)
  return trajectory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prediction::Trajectory >*
PredictionObstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:prediction.PredictionObstacle.trajectory)
  return &trajectory_;
}
inline const ::prediction::Trajectory& PredictionObstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.trajectory)
  return trajectory_.Get(index);
}
inline ::prediction::Trajectory* PredictionObstacle::add_trajectory() {
  // @@protoc_insertion_point(field_add:prediction.PredictionObstacle.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction::Trajectory >&
PredictionObstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:prediction.PredictionObstacle.trajectory)
  return trajectory_;
}

// optional .prediction.ObstacleIntent intent = 5;
inline bool PredictionObstacle::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictionObstacle::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::prediction::ObstacleIntent& PredictionObstacle::intent() const {
  const ::prediction::ObstacleIntent* p = intent_;
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::prediction::ObstacleIntent*>(
      &::prediction::_ObstacleIntent_default_instance_);
}
inline ::prediction::ObstacleIntent* PredictionObstacle::release_intent() {
  // @@protoc_insertion_point(field_release:prediction.PredictionObstacle.intent)
  _has_bits_[0] &= ~0x00000002u;
  ::prediction::ObstacleIntent* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::prediction::ObstacleIntent* PredictionObstacle::mutable_intent() {
  _has_bits_[0] |= 0x00000002u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::prediction::ObstacleIntent>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacle.intent)
  return intent_;
}
inline void PredictionObstacle::set_allocated_intent(::prediction::ObstacleIntent* intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intent_;
  }
  if (intent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:prediction.PredictionObstacle.intent)
}

// optional .prediction.ObstaclePriority priority = 6;
inline bool PredictionObstacle::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictionObstacle::clear_priority() {
  if (priority_ != nullptr) priority_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::prediction::ObstaclePriority& PredictionObstacle::priority() const {
  const ::prediction::ObstaclePriority* p = priority_;
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.priority)
  return p != nullptr ? *p : *reinterpret_cast<const ::prediction::ObstaclePriority*>(
      &::prediction::_ObstaclePriority_default_instance_);
}
inline ::prediction::ObstaclePriority* PredictionObstacle::release_priority() {
  // @@protoc_insertion_point(field_release:prediction.PredictionObstacle.priority)
  _has_bits_[0] &= ~0x00000004u;
  ::prediction::ObstaclePriority* temp = priority_;
  priority_ = nullptr;
  return temp;
}
inline ::prediction::ObstaclePriority* PredictionObstacle::mutable_priority() {
  _has_bits_[0] |= 0x00000004u;
  if (priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::prediction::ObstaclePriority>(GetArenaNoVirtual());
    priority_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacle.priority)
  return priority_;
}
inline void PredictionObstacle::set_allocated_priority(::prediction::ObstaclePriority* priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete priority_;
  }
  if (priority) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:prediction.PredictionObstacle.priority)
}

// optional .prediction.ObstacleInteractiveTag interactive_tag = 9;
inline bool PredictionObstacle::has_interactive_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictionObstacle::clear_interactive_tag() {
  if (interactive_tag_ != nullptr) interactive_tag_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::prediction::ObstacleInteractiveTag& PredictionObstacle::interactive_tag() const {
  const ::prediction::ObstacleInteractiveTag* p = interactive_tag_;
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.interactive_tag)
  return p != nullptr ? *p : *reinterpret_cast<const ::prediction::ObstacleInteractiveTag*>(
      &::prediction::_ObstacleInteractiveTag_default_instance_);
}
inline ::prediction::ObstacleInteractiveTag* PredictionObstacle::release_interactive_tag() {
  // @@protoc_insertion_point(field_release:prediction.PredictionObstacle.interactive_tag)
  _has_bits_[0] &= ~0x00000008u;
  ::prediction::ObstacleInteractiveTag* temp = interactive_tag_;
  interactive_tag_ = nullptr;
  return temp;
}
inline ::prediction::ObstacleInteractiveTag* PredictionObstacle::mutable_interactive_tag() {
  _has_bits_[0] |= 0x00000008u;
  if (interactive_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::prediction::ObstacleInteractiveTag>(GetArenaNoVirtual());
    interactive_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacle.interactive_tag)
  return interactive_tag_;
}
inline void PredictionObstacle::set_allocated_interactive_tag(::prediction::ObstacleInteractiveTag* interactive_tag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interactive_tag_;
  }
  if (interactive_tag) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interactive_tag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interactive_tag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  interactive_tag_ = interactive_tag;
  // @@protoc_insertion_point(field_set_allocated:prediction.PredictionObstacle.interactive_tag)
}

// optional bool is_static = 7 [default = false];
inline bool PredictionObstacle::has_is_static() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PredictionObstacle::clear_is_static() {
  is_static_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PredictionObstacle::is_static() const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacle.is_static)
  return is_static_;
}
inline void PredictionObstacle::set_is_static(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_static_ = value;
  // @@protoc_insertion_point(field_set:prediction.PredictionObstacle.is_static)
}

// -------------------------------------------------------------------

// PredictionObstacles

// repeated .prediction.PredictionObstacle prediction_obstacle = 1;
inline int PredictionObstacles::prediction_obstacle_size() const {
  return prediction_obstacle_.size();
}
inline void PredictionObstacles::clear_prediction_obstacle() {
  prediction_obstacle_.Clear();
}
inline ::prediction::PredictionObstacle* PredictionObstacles::mutable_prediction_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prediction::PredictionObstacle >*
PredictionObstacles::mutable_prediction_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:prediction.PredictionObstacles.prediction_obstacle)
  return &prediction_obstacle_;
}
inline const ::prediction::PredictionObstacle& PredictionObstacles::prediction_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Get(index);
}
inline ::prediction::PredictionObstacle* PredictionObstacles::add_prediction_obstacle() {
  // @@protoc_insertion_point(field_add:prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction::PredictionObstacle >&
PredictionObstacles::prediction_obstacle() const {
  // @@protoc_insertion_point(field_list:prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_;
}

// optional double start_timestamp = 2;
inline bool PredictionObstacles::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictionObstacles::clear_start_timestamp() {
  start_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PredictionObstacles::start_timestamp() const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacles.start_timestamp)
  return start_timestamp_;
}
inline void PredictionObstacles::set_start_timestamp(double value) {
  _has_bits_[0] |= 0x00000002u;
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:prediction.PredictionObstacles.start_timestamp)
}

// optional double end_timestamp = 3;
inline bool PredictionObstacles::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictionObstacles::clear_end_timestamp() {
  end_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PredictionObstacles::end_timestamp() const {
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacles.end_timestamp)
  return end_timestamp_;
}
inline void PredictionObstacles::set_end_timestamp(double value) {
  _has_bits_[0] |= 0x00000004u;
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:prediction.PredictionObstacles.end_timestamp)
}

// optional .prediction.Intent intent = 4;
inline bool PredictionObstacles::has_intent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictionObstacles::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::prediction::Intent& PredictionObstacles::intent() const {
  const ::prediction::Intent* p = intent_;
  // @@protoc_insertion_point(field_get:prediction.PredictionObstacles.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::prediction::Intent*>(
      &::prediction::_Intent_default_instance_);
}
inline ::prediction::Intent* PredictionObstacles::release_intent() {
  // @@protoc_insertion_point(field_release:prediction.PredictionObstacles.intent)
  _has_bits_[0] &= ~0x00000001u;
  ::prediction::Intent* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::prediction::Intent* PredictionObstacles::mutable_intent() {
  _has_bits_[0] |= 0x00000001u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::prediction::Intent>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prediction.PredictionObstacles.intent)
  return intent_;
}
inline void PredictionObstacles::set_allocated_intent(::prediction::Intent* intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intent_;
  }
  if (intent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:prediction.PredictionObstacles.intent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::prediction::ObstacleIntent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prediction::ObstacleIntent_Type>() {
  return ::prediction::ObstacleIntent_Type_descriptor();
}
template <> struct is_proto_enum< ::prediction::Intent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prediction::Intent_Type>() {
  return ::prediction::Intent_Type_descriptor();
}
template <> struct is_proto_enum< ::prediction::ObstacleInteractiveTag_InteractiveTag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prediction::ObstacleInteractiveTag_InteractiveTag>() {
  return ::prediction::ObstacleInteractiveTag_InteractiveTag_descriptor();
}
template <> struct is_proto_enum< ::prediction::ObstaclePriority_Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prediction::ObstaclePriority_Priority>() {
  return ::prediction::ObstaclePriority_Priority_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_prediction_5fobstacle_2eproto
