// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pid_conf.proto

#include "pid_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace controller {
class PidConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PidConf> _instance;
} _PidConf_default_instance_;
}  // namespace controller
static void InitDefaultsPidConf_pid_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_PidConf_default_instance_;
    new (ptr) ::controller::PidConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::PidConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PidConf_pid_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPidConf_pid_5fconf_2eproto}, {}};

void InitDefaults_pid_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PidConf_pid_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_pid_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_pid_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_pid_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_pid_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, integrator_enable_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, integrator_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, kp_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, ki_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, kd_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, kaw_),
  PROTOBUF_FIELD_OFFSET(::controller::PidConf, output_saturation_level_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::controller::PidConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_PidConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_pid_5fconf_2eproto = {
  {}, AddDescriptors_pid_5fconf_2eproto, "pid_conf.proto", schemas,
  file_default_instances, TableStruct_pid_5fconf_2eproto::offsets,
  file_level_metadata_pid_5fconf_2eproto, 1, file_level_enum_descriptors_pid_5fconf_2eproto, file_level_service_descriptors_pid_5fconf_2eproto,
};

const char descriptor_table_protodef_pid_5fconf_2eproto[] =
  "\n\016pid_conf.proto\022\ncontroller\"\236\001\n\007PidConf"
  "\022\031\n\021integrator_enable\030\001 \001(\010\022#\n\033integrato"
  "r_saturation_level\030\002 \001(\001\022\n\n\002kp\030\003 \001(\001\022\n\n\002"
  "ki\030\004 \001(\001\022\n\n\002kd\030\005 \001(\001\022\016\n\003kaw\030\006 \001(\001:\0010\022\037\n\027"
  "output_saturation_level\030\007 \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_pid_5fconf_2eproto = {
  false, InitDefaults_pid_5fconf_2eproto, 
  descriptor_table_protodef_pid_5fconf_2eproto,
  "pid_conf.proto", &assign_descriptors_table_pid_5fconf_2eproto, 189,
};

void AddDescriptors_pid_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_pid_5fconf_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pid_5fconf_2eproto = []() { AddDescriptors_pid_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void PidConf::InitAsDefaultInstance() {
}
class PidConf::HasBitSetters {
 public:
  static void set_has_integrator_enable(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_integrator_saturation_level(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kp(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ki(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kd(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_kaw(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_output_saturation_level(PidConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PidConf::kIntegratorEnableFieldNumber;
const int PidConf::kIntegratorSaturationLevelFieldNumber;
const int PidConf::kKpFieldNumber;
const int PidConf::kKiFieldNumber;
const int PidConf::kKdFieldNumber;
const int PidConf::kKawFieldNumber;
const int PidConf::kOutputSaturationLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PidConf::PidConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.PidConf)
}
PidConf::PidConf(const PidConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&integrator_saturation_level_, &from.integrator_saturation_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&integrator_enable_) -
    reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
  // @@protoc_insertion_point(copy_constructor:controller.PidConf)
}

void PidConf::SharedCtor() {
  ::memset(&integrator_saturation_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&integrator_enable_) -
      reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
}

PidConf::~PidConf() {
  // @@protoc_insertion_point(destructor:controller.PidConf)
  SharedDtor();
}

void PidConf::SharedDtor() {
}

void PidConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PidConf& PidConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PidConf_pid_5fconf_2eproto.base);
  return *internal_default_instance();
}


void PidConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&integrator_saturation_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integrator_enable_) -
        reinterpret_cast<char*>(&integrator_saturation_level_)) + sizeof(integrator_enable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PidConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PidConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool integrator_enable = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_integrator_enable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double integrator_saturation_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_integrator_saturation_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_kp(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ki = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_ki(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kd = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_kd(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kaw = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_kaw(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double output_saturation_level = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_output_saturation_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PidConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.PidConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool integrator_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_integrator_enable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrator_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double integrator_saturation_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_integrator_saturation_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &integrator_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_kp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ki = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_ki(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ki_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_kd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kaw = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_kaw(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double output_saturation_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_output_saturation_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &output_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.PidConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.PidConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PidConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool integrator_enable = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->integrator_enable(), output);
  }

  // optional double integrator_saturation_level = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->integrator_saturation_level(), output);
  }

  // optional double kp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kp(), output);
  }

  // optional double ki = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ki(), output);
  }

  // optional double kd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kd(), output);
  }

  // optional double kaw = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->kaw(), output);
  }

  // optional double output_saturation_level = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->output_saturation_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.PidConf)
}

::google::protobuf::uint8* PidConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.PidConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool integrator_enable = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->integrator_enable(), target);
  }

  // optional double integrator_saturation_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->integrator_saturation_level(), target);
  }

  // optional double kp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kp(), target);
  }

  // optional double ki = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ki(), target);
  }

  // optional double kd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kd(), target);
  }

  // optional double kaw = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->kaw(), target);
  }

  // optional double output_saturation_level = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->output_saturation_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.PidConf)
  return target;
}

size_t PidConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.PidConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double integrator_saturation_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double kp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ki = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double kd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double kaw = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double output_saturation_level = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool integrator_enable = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PidConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.PidConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PidConf* source =
      ::google::protobuf::DynamicCastToGenerated<PidConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.PidConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.PidConf)
    MergeFrom(*source);
  }
}

void PidConf::MergeFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.PidConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      integrator_saturation_level_ = from.integrator_saturation_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      kp_ = from.kp_;
    }
    if (cached_has_bits & 0x00000004u) {
      ki_ = from.ki_;
    }
    if (cached_has_bits & 0x00000008u) {
      kd_ = from.kd_;
    }
    if (cached_has_bits & 0x00000010u) {
      kaw_ = from.kaw_;
    }
    if (cached_has_bits & 0x00000020u) {
      output_saturation_level_ = from.output_saturation_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      integrator_enable_ = from.integrator_enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PidConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidConf::CopyFrom(const PidConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.PidConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidConf::IsInitialized() const {
  return true;
}

void PidConf::Swap(PidConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PidConf::InternalSwap(PidConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(integrator_saturation_level_, other->integrator_saturation_level_);
  swap(kp_, other->kp_);
  swap(ki_, other->ki_);
  swap(kd_, other->kd_);
  swap(kaw_, other->kaw_);
  swap(output_saturation_level_, other->output_saturation_level_);
  swap(integrator_enable_, other->integrator_enable_);
}

::google::protobuf::Metadata PidConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pid_5fconf_2eproto);
  return ::file_level_metadata_pid_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::PidConf* Arena::CreateMaybeMessage< ::controller::PidConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::PidConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
