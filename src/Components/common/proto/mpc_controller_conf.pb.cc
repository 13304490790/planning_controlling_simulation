// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpc_controller_conf.proto

#include "mpc_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_calibration_5ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControlCalibrationTable_calibration_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gain_5fscheduler_5fconf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GainScheduler_gain_5fscheduler_5fconf_2eproto;
namespace controller {
class MPCControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MPCControllerConf> _instance;
} _MPCControllerConf_default_instance_;
}  // namespace controller
static void InitDefaultsMPCControllerConf_mpc_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_MPCControllerConf_default_instance_;
    new (ptr) ::controller::MPCControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::MPCControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMPCControllerConf_mpc_5fcontroller_5fconf_2eproto}, {
      &scc_info_GainScheduler_gain_5fscheduler_5fconf_2eproto.base,
      &scc_info_ControlCalibrationTable_calibration_5ftable_2eproto.base,}};

void InitDefaults_mpc_5fcontroller_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_mpc_5fcontroller_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_mpc_5fcontroller_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_mpc_5fcontroller_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_mpc_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, matrix_r_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, steer_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, feedforwardterm_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, calibration_table_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, enable_mpc_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::controller::MPCControllerConf, unconstrained_control_diff_limit_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  ~0u,
  ~0u,
  13,
  14,
  19,
  15,
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  20,
  21,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::controller::MPCControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_MPCControllerConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_mpc_5fcontroller_5fconf_2eproto = {
  {}, AddDescriptors_mpc_5fcontroller_5fconf_2eproto, "mpc_controller_conf.proto", schemas,
  file_default_instances, TableStruct_mpc_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_mpc_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_mpc_5fcontroller_5fconf_2eproto, file_level_service_descriptors_mpc_5fcontroller_5fconf_2eproto,
};

const char descriptor_table_protodef_mpc_5fcontroller_5fconf_2eproto[] =
  "\n\031mpc_controller_conf.proto\022\ncontroller\032"
  "\027calibration_table.proto\032\031gain_scheduler"
  "_conf.proto\"\226\006\n\021MPCControllerConf\022\n\n\002ts\030"
  "\001 \001(\001\022\n\n\002cf\030\002 \001(\001\022\n\n\002cr\030\003 \001(\001\022\017\n\007mass_fl"
  "\030\004 \001(\005\022\017\n\007mass_fr\030\005 \001(\005\022\017\n\007mass_rl\030\006 \001(\005"
  "\022\017\n\007mass_rr\030\007 \001(\005\022\013\n\003eps\030\010 \001(\001\022\020\n\010matrix"
  "_q\030\t \003(\001\022\020\n\010matrix_r\030\n \003(\001\022\023\n\013cutoff_fre"
  "q\030\013 \001(\005\022\037\n\027mean_filter_window_size\030\014 \001(\005"
  "\022\025\n\rmax_iteration\030\r \001(\005\022 \n\030max_lateral_a"
  "cceleration\030\016 \001(\001\022\037\n\027standstill_accelera"
  "tion\030\017 \001(\001\022\034\n\024brake_minimum_action\030\020 \001(\001"
  "\022\037\n\027throttle_minimum_action\030\021 \001(\001\0229\n\026lat"
  "_err_gain_scheduler\030\022 \001(\0132\031.controller.G"
  "ainScheduler\022=\n\032heading_err_gain_schedul"
  "er\030\023 \001(\0132\031.controller.GainScheduler\022>\n\033s"
  "teer_weight_gain_scheduler\030\024 \001(\0132\031.contr"
  "oller.GainScheduler\022A\n\036feedforwardterm_g"
  "ain_scheduler\030\025 \001(\0132\031.controller.GainSch"
  "eduler\022>\n\021calibration_table\030\026 \001(\0132#.cont"
  "roller.ControlCalibrationTable\0222\n#enable"
  "_mpc_feedforward_compensation\030\027 \001(\010:\005fal"
  "se\022(\n unconstrained_control_diff_limit\030\030"
  " \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_mpc_5fcontroller_5fconf_2eproto = {
  false, InitDefaults_mpc_5fcontroller_5fconf_2eproto, 
  descriptor_table_protodef_mpc_5fcontroller_5fconf_2eproto,
  "mpc_controller_conf.proto", &assign_descriptors_table_mpc_5fcontroller_5fconf_2eproto, 884,
};

void AddDescriptors_mpc_5fcontroller_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_calibration_5ftable_2eproto,
    ::AddDescriptors_gain_5fscheduler_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_mpc_5fcontroller_5fconf_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mpc_5fcontroller_5fconf_2eproto = []() { AddDescriptors_mpc_5fcontroller_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void MPCControllerConf::InitAsDefaultInstance() {
  ::controller::_MPCControllerConf_default_instance_._instance.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_MPCControllerConf_default_instance_._instance.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_MPCControllerConf_default_instance_._instance.get_mutable()->steer_weight_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_MPCControllerConf_default_instance_._instance.get_mutable()->feedforwardterm_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_MPCControllerConf_default_instance_._instance.get_mutable()->calibration_table_ = const_cast< ::controller::ControlCalibrationTable*>(
      ::controller::ControlCalibrationTable::internal_default_instance());
}
class MPCControllerConf::HasBitSetters {
 public:
  static void set_has_ts(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cf(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_cr(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_mass_fl(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_mass_fr(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_mass_rl(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_mass_rr(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_eps(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_cutoff_freq(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_mean_filter_window_size(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_max_iteration(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_max_lateral_acceleration(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_standstill_acceleration(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_brake_minimum_action(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_throttle_minimum_action(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static const ::controller::GainScheduler& lat_err_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_lat_err_gain_scheduler(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::GainScheduler& heading_err_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_heading_err_gain_scheduler(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::controller::GainScheduler& steer_weight_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_steer_weight_gain_scheduler(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::controller::GainScheduler& feedforwardterm_gain_scheduler(const MPCControllerConf* msg);
  static void set_has_feedforwardterm_gain_scheduler(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::controller::ControlCalibrationTable& calibration_table(const MPCControllerConf* msg);
  static void set_has_calibration_table(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_enable_mpc_feedforward_compensation(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_unconstrained_control_diff_limit(MPCControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
};

const ::controller::GainScheduler&
MPCControllerConf::HasBitSetters::lat_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::controller::GainScheduler&
MPCControllerConf::HasBitSetters::heading_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::controller::GainScheduler&
MPCControllerConf::HasBitSetters::steer_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->steer_weight_gain_scheduler_;
}
const ::controller::GainScheduler&
MPCControllerConf::HasBitSetters::feedforwardterm_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->feedforwardterm_gain_scheduler_;
}
const ::controller::ControlCalibrationTable&
MPCControllerConf::HasBitSetters::calibration_table(const MPCControllerConf* msg) {
  return *msg->calibration_table_;
}
void MPCControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != nullptr) lat_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MPCControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != nullptr) heading_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  if (steer_weight_gain_scheduler_ != nullptr) steer_weight_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  if (feedforwardterm_gain_scheduler_ != nullptr) feedforwardterm_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MPCControllerConf::clear_calibration_table() {
  if (calibration_table_ != nullptr) calibration_table_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPCControllerConf::kTsFieldNumber;
const int MPCControllerConf::kCfFieldNumber;
const int MPCControllerConf::kCrFieldNumber;
const int MPCControllerConf::kMassFlFieldNumber;
const int MPCControllerConf::kMassFrFieldNumber;
const int MPCControllerConf::kMassRlFieldNumber;
const int MPCControllerConf::kMassRrFieldNumber;
const int MPCControllerConf::kEpsFieldNumber;
const int MPCControllerConf::kMatrixQFieldNumber;
const int MPCControllerConf::kMatrixRFieldNumber;
const int MPCControllerConf::kCutoffFreqFieldNumber;
const int MPCControllerConf::kMeanFilterWindowSizeFieldNumber;
const int MPCControllerConf::kMaxIterationFieldNumber;
const int MPCControllerConf::kMaxLateralAccelerationFieldNumber;
const int MPCControllerConf::kStandstillAccelerationFieldNumber;
const int MPCControllerConf::kBrakeMinimumActionFieldNumber;
const int MPCControllerConf::kThrottleMinimumActionFieldNumber;
const int MPCControllerConf::kLatErrGainSchedulerFieldNumber;
const int MPCControllerConf::kHeadingErrGainSchedulerFieldNumber;
const int MPCControllerConf::kSteerWeightGainSchedulerFieldNumber;
const int MPCControllerConf::kFeedforwardtermGainSchedulerFieldNumber;
const int MPCControllerConf::kCalibrationTableFieldNumber;
const int MPCControllerConf::kEnableMpcFeedforwardCompensationFieldNumber;
const int MPCControllerConf::kUnconstrainedControlDiffLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPCControllerConf::MPCControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.MPCControllerConf)
}
MPCControllerConf::MPCControllerConf(const MPCControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matrix_q_(from.matrix_q_),
      matrix_r_(from.matrix_r_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::controller::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from.has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::controller::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from.has_steer_weight_gain_scheduler()) {
    steer_weight_gain_scheduler_ = new ::controller::GainScheduler(*from.steer_weight_gain_scheduler_);
  } else {
    steer_weight_gain_scheduler_ = nullptr;
  }
  if (from.has_feedforwardterm_gain_scheduler()) {
    feedforwardterm_gain_scheduler_ = new ::controller::GainScheduler(*from.feedforwardterm_gain_scheduler_);
  } else {
    feedforwardterm_gain_scheduler_ = nullptr;
  }
  if (from.has_calibration_table()) {
    calibration_table_ = new ::controller::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&unconstrained_control_diff_limit_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(unconstrained_control_diff_limit_));
  // @@protoc_insertion_point(copy_constructor:controller.MPCControllerConf)
}

void MPCControllerConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto.base);
  ::memset(&lat_err_gain_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconstrained_control_diff_limit_) -
      reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(unconstrained_control_diff_limit_));
}

MPCControllerConf::~MPCControllerConf() {
  // @@protoc_insertion_point(destructor:controller.MPCControllerConf)
  SharedDtor();
}

void MPCControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete steer_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete feedforwardterm_gain_scheduler_;
  if (this != internal_default_instance()) delete calibration_table_;
}

void MPCControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPCControllerConf& MPCControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MPCControllerConf_mpc_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void MPCControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.MPCControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  matrix_r_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != nullptr);
      lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != nullptr);
      heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(steer_weight_gain_scheduler_ != nullptr);
      steer_weight_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(feedforwardterm_gain_scheduler_ != nullptr);
      feedforwardterm_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(calibration_table_ != nullptr);
      calibration_table_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cr_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(cr_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mass_fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_lateral_acceleration_) -
        reinterpret_cast<char*>(&mass_fl_)) + sizeof(max_lateral_acceleration_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&standstill_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unconstrained_control_diff_limit_) -
        reinterpret_cast<char*>(&standstill_acceleration_)) + sizeof(unconstrained_control_diff_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MPCControllerConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MPCControllerConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ts(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double cf = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_cf(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double cr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_cr(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int32 mass_fl = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_mass_fl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_fr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_mass_fr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_rl = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_mass_rl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_rr = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_mass_rr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double eps = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_eps(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double matrix_q = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 73) {
          do {
            msg->add_matrix_q(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 73 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_matrix_q();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated double matrix_r = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 81) {
          do {
            msg->add_matrix_r(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 81 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_matrix_r();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 cutoff_freq = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_cutoff_freq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mean_filter_window_size = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_mean_filter_window_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_iteration = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_max_iteration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double max_lateral_acceleration = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_max_lateral_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double standstill_acceleration = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_standstill_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double brake_minimum_action = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_brake_minimum_action(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double throttle_minimum_action = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_throttle_minimum_action(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_lat_err_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_heading_err_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_steer_weight_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_feedforwardterm_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.ControlCalibrationTable calibration_table = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::ControlCalibrationTable::_InternalParse;
        object = msg->mutable_calibration_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_enable_mpc_feedforward_compensation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double unconstrained_control_diff_limit = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_unconstrained_control_diff_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MPCControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.MPCControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_cf(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_cr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_mass_fl(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_mass_fr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mass_rl(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_mass_rr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_eps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_q = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73u, input, this->mutable_matrix_q())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_r = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_matrix_r())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_r())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cutoff_freq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_cutoff_freq(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mean_filter_window_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_mean_filter_window_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iteration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_max_iteration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lateral_acceleration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {
          HasBitSetters::set_has_max_lateral_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lateral_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double standstill_acceleration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_standstill_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &standstill_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_minimum_action = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_brake_minimum_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_minimum_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_minimum_action = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {
          HasBitSetters::set_has_throttle_minimum_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_minimum_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steer_weight_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feedforwardterm_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.ControlCalibrationTable calibration_table = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_enable_mpc_feedforward_compensation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_mpc_feedforward_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unconstrained_control_diff_limit = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {
          HasBitSetters::set_has_unconstrained_control_diff_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unconstrained_control_diff_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.MPCControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.MPCControllerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MPCControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.MPCControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cf(), output);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cr(), output);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mass_fl(), output);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mass_fr(), output);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass_rl(), output);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mass_rr(), output);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->eps(), output);
  }

  // repeated double matrix_q = 9;
  for (int i = 0, n = this->matrix_q_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->matrix_q(i), output);
  }

  // repeated double matrix_r = 10;
  for (int i = 0, n = this->matrix_r_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->matrix_r(i), output);
  }

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cutoff_freq(), output);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mean_filter_window_size(), output);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_iteration(), output);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_lateral_acceleration(), output);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->standstill_acceleration(), output);
  }

  // optional double brake_minimum_action = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->brake_minimum_action(), output);
  }

  // optional double throttle_minimum_action = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->throttle_minimum_action(), output);
  }

  // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::lat_err_gain_scheduler(this), output);
  }

  // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::heading_err_gain_scheduler(this), output);
  }

  // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::steer_weight_gain_scheduler(this), output);
  }

  // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::feedforwardterm_gain_scheduler(this), output);
  }

  // optional .controller.ControlCalibrationTable calibration_table = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::calibration_table(this), output);
  }

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_mpc_feedforward_compensation(), output);
  }

  // optional double unconstrained_control_diff_limit = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->unconstrained_control_diff_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.MPCControllerConf)
}

::google::protobuf::uint8* MPCControllerConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.MPCControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional double cf = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cf(), target);
  }

  // optional double cr = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cr(), target);
  }

  // optional int32 mass_fl = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mass_fl(), target);
  }

  // optional int32 mass_fr = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mass_fr(), target);
  }

  // optional int32 mass_rl = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass_rl(), target);
  }

  // optional int32 mass_rr = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mass_rr(), target);
  }

  // optional double eps = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->eps(), target);
  }

  // repeated double matrix_q = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(9, this->matrix_q_, target);

  // repeated double matrix_r = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->matrix_r_, target);

  // optional int32 cutoff_freq = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_lateral_acceleration(), target);
  }

  // optional double standstill_acceleration = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->standstill_acceleration(), target);
  }

  // optional double brake_minimum_action = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->throttle_minimum_action(), target);
  }

  // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::lat_err_gain_scheduler(this), target);
  }

  // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::heading_err_gain_scheduler(this), target);
  }

  // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::steer_weight_gain_scheduler(this), target);
  }

  // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::feedforwardterm_gain_scheduler(this), target);
  }

  // optional .controller.ControlCalibrationTable calibration_table = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::calibration_table(this), target);
  }

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_mpc_feedforward_compensation(), target);
  }

  // optional double unconstrained_control_diff_limit = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->unconstrained_control_diff_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.MPCControllerConf)
  return target;
}

size_t MPCControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.MPCControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->matrix_q_size());
    total_size += data_size;
  }

  // repeated double matrix_r = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_r_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->matrix_r_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lat_err_gain_scheduler_);
    }

    // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *heading_err_gain_scheduler_);
    }

    // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steer_weight_gain_scheduler_);
    }

    // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *feedforwardterm_gain_scheduler_);
    }

    // optional .controller.ControlCalibrationTable calibration_table = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *calibration_table_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double cf = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double cr = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 mass_fl = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fl());
    }

    // optional int32 mass_fr = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fr());
    }

    // optional int32 mass_rl = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rl());
    }

    // optional int32 mass_rr = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rr());
    }

    // optional double eps = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional int32 cutoff_freq = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cutoff_freq());
    }

    // optional int32 mean_filter_window_size = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_filter_window_size());
    }

    // optional double max_lateral_acceleration = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double standstill_acceleration = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double brake_minimum_action = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_minimum_action = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_iteration = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iteration());
    }

    // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional double unconstrained_control_diff_limit = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPCControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MPCControllerConf* source =
      ::google::protobuf::DynamicCastToGenerated<MPCControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.MPCControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.MPCControllerConf)
    MergeFrom(*source);
  }
}

void MPCControllerConf::MergeFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  matrix_r_.MergeFrom(from.matrix_r_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat_err_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_heading_err_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_steer_weight_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.steer_weight_gain_scheduler());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_feedforwardterm_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.feedforwardterm_gain_scheduler());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_calibration_table()->::controller::ControlCalibrationTable::MergeFrom(from.calibration_table());
    }
    if (cached_has_bits & 0x00000020u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      cf_ = from.cf_;
    }
    if (cached_has_bits & 0x00000080u) {
      cr_ = from.cr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mass_fl_ = from.mass_fl_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00000800u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00001000u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00002000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00004000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_lateral_acceleration_ = from.max_lateral_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    if (cached_has_bits & 0x00020000u) {
      brake_minimum_action_ = from.brake_minimum_action_;
    }
    if (cached_has_bits & 0x00040000u) {
      throttle_minimum_action_ = from.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00100000u) {
      enable_mpc_feedforward_compensation_ = from.enable_mpc_feedforward_compensation_;
    }
    if (cached_has_bits & 0x00200000u) {
      unconstrained_control_diff_limit_ = from.unconstrained_control_diff_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPCControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPCControllerConf::CopyFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPCControllerConf::IsInitialized() const {
  return true;
}

void MPCControllerConf::Swap(MPCControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPCControllerConf::InternalSwap(MPCControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_q_.InternalSwap(&other->matrix_q_);
  matrix_r_.InternalSwap(&other->matrix_r_);
  swap(lat_err_gain_scheduler_, other->lat_err_gain_scheduler_);
  swap(heading_err_gain_scheduler_, other->heading_err_gain_scheduler_);
  swap(steer_weight_gain_scheduler_, other->steer_weight_gain_scheduler_);
  swap(feedforwardterm_gain_scheduler_, other->feedforwardterm_gain_scheduler_);
  swap(calibration_table_, other->calibration_table_);
  swap(ts_, other->ts_);
  swap(cf_, other->cf_);
  swap(cr_, other->cr_);
  swap(mass_fl_, other->mass_fl_);
  swap(mass_fr_, other->mass_fr_);
  swap(mass_rl_, other->mass_rl_);
  swap(mass_rr_, other->mass_rr_);
  swap(eps_, other->eps_);
  swap(cutoff_freq_, other->cutoff_freq_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(max_lateral_acceleration_, other->max_lateral_acceleration_);
  swap(standstill_acceleration_, other->standstill_acceleration_);
  swap(brake_minimum_action_, other->brake_minimum_action_);
  swap(throttle_minimum_action_, other->throttle_minimum_action_);
  swap(max_iteration_, other->max_iteration_);
  swap(enable_mpc_feedforward_compensation_, other->enable_mpc_feedforward_compensation_);
  swap(unconstrained_control_diff_limit_, other->unconstrained_control_diff_limit_);
}

::google::protobuf::Metadata MPCControllerConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mpc_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_mpc_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::MPCControllerConf* Arena::CreateMaybeMessage< ::controller::MPCControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::MPCControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
