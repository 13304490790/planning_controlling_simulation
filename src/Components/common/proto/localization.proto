syntax = "proto2";

package controller;

import "header.proto";
import "geometry.proto";
import "pnc_point.proto";
import "localization_status.proto";

message Pose {
    // Position of the vehicle reference point (VRP) in the map reference frame.
    // The VRP is the center of rear axle.
    optional geometry.PointENU position = 1;

    // A quaternion that represents the rotation from the IMU coordinate
    // (Right/Forward/Up) to the
    // world coordinate (East/North/Up).
    optional geometry.Quaternion orientation = 2;

    // Linear velocity of the VRP in the map reference frame.
    // East/north/up in meters per second.
    optional geometry.Point3D linear_velocity = 3;

    // Linear acceleration of the VRP in the map reference frame.
    // East/north/up in meters per square second.
    optional geometry.Point3D linear_acceleration = 4;

    // Angular velocity of the vehicle in the map reference frame.
    // Around east/north/up axes in radians per second.
    optional geometry.Point3D angular_velocity = 5;

    // Heading
    // The heading is zero when the car is facing East and positive when facing
    // North.
    optional double heading = 6;

    // Linear acceleration of the VRP in the vehicle reference frame.
    // Right/forward/up in meters per square second.
    optional geometry.Point3D linear_acceleration_vrf = 7;

    // Angular velocity of the VRP in the vehicle reference frame.
    // Around right/forward/up axes in radians per second.
    optional geometry.Point3D angular_velocity_vrf = 8;

    // Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
    // in world coordinate (East/North/Up)
    // The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
    // The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
    // The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
    // The direction of rotation follows the right-hand rule.
    optional geometry.Point3D euler_angles = 9;
}

message Uncertainty {
  // Standard deviation of position, east/north/up in meters.
  optional geometry.Point3D position_std_dev = 1;

  // Standard deviation of quaternion qx/qy/qz, unitless.
  optional geometry.Point3D orientation_std_dev = 2;

  // Standard deviation of linear velocity, east/north/up in meters per second.
  optional geometry.Point3D linear_velocity_std_dev = 3;

  // Standard deviation of linear acceleration, right/forward/up in meters per
  // square second.
  optional geometry.Point3D linear_acceleration_std_dev = 4;

  // Standard deviation of angular velocity, right/forward/up in radians per
  // second.
  optional geometry.Point3D angular_velocity_std_dev = 5;

  // TODO: Define covariance items when needed.
}

message LocalizationEstimate {
  optional Header header = 1;
  optional Pose pose = 2;
  optional Uncertainty uncertainty = 3;

  // The time of pose measurement, seconds since 1970-1-1 (UNIX time).
  optional double measurement_time = 4;  // In seconds.

  // Future trajectory actually driven by the drivers
  repeated points.TrajectoryPoint trajectory_point = 5;

  // msf status
  optional MsfStatus msf_status = 6;
  // msf quality
  optional MsfSensorMsgStatus sensor_status = 7;
}