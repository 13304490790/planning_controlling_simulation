// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lon_controller_conf.proto

#ifndef PROTOBUF_INCLUDED_lon_5fcontroller_5fconf_2eproto
#define PROTOBUF_INCLUDED_lon_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "calibration_table.pb.h"
#include "leadlag_conf.pb.h"
#include "pid_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lon_5fcontroller_5fconf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_lon_5fcontroller_5fconf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_lon_5fcontroller_5fconf_2eproto();
namespace controller {
class FilterConf;
class FilterConfDefaultTypeInternal;
extern FilterConfDefaultTypeInternal _FilterConf_default_instance_;
class LonControllerConf;
class LonControllerConfDefaultTypeInternal;
extern LonControllerConfDefaultTypeInternal _LonControllerConf_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::FilterConf* Arena::CreateMaybeMessage<::controller::FilterConf>(Arena*);
template<> ::controller::LonControllerConf* Arena::CreateMaybeMessage<::controller::LonControllerConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

// ===================================================================

class FilterConf :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.FilterConf) */ {
 public:
  FilterConf();
  virtual ~FilterConf();

  FilterConf(const FilterConf& from);

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilterConf(FilterConf&& from) noexcept
    : FilterConf() {
    *this = ::std::move(from);
  }

  inline FilterConf& operator=(FilterConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FilterConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterConf* internal_default_instance() {
    return reinterpret_cast<const FilterConf*>(
               &_FilterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FilterConf* other);
  friend void swap(FilterConf& a, FilterConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilterConf* New() const final {
    return CreateMaybeMessage<FilterConf>(nullptr);
  }

  FilterConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilterConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilterConf& from);
  void MergeFrom(const FilterConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cutoff_freq = 1;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 1;
  ::google::protobuf::int32 cutoff_freq() const;
  void set_cutoff_freq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:controller.FilterConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 cutoff_freq_;
  friend struct ::TableStruct_lon_5fcontroller_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LonControllerConf :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.LonControllerConf) */ {
 public:
  LonControllerConf();
  virtual ~LonControllerConf();

  LonControllerConf(const LonControllerConf& from);

  inline LonControllerConf& operator=(const LonControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LonControllerConf(LonControllerConf&& from) noexcept
    : LonControllerConf() {
    *this = ::std::move(from);
  }

  inline LonControllerConf& operator=(LonControllerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LonControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LonControllerConf* internal_default_instance() {
    return reinterpret_cast<const LonControllerConf*>(
               &_LonControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LonControllerConf* other);
  friend void swap(LonControllerConf& a, LonControllerConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LonControllerConf* New() const final {
    return CreateMaybeMessage<LonControllerConf>(nullptr);
  }

  LonControllerConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LonControllerConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LonControllerConf& from);
  void MergeFrom(const LonControllerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonControllerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .controller.PidConf station_pid_conf = 8;
  bool has_station_pid_conf() const;
  void clear_station_pid_conf();
  static const int kStationPidConfFieldNumber = 8;
  const ::controller::PidConf& station_pid_conf() const;
  ::controller::PidConf* release_station_pid_conf();
  ::controller::PidConf* mutable_station_pid_conf();
  void set_allocated_station_pid_conf(::controller::PidConf* station_pid_conf);

  // optional .controller.PidConf low_speed_pid_conf = 9;
  bool has_low_speed_pid_conf() const;
  void clear_low_speed_pid_conf();
  static const int kLowSpeedPidConfFieldNumber = 9;
  const ::controller::PidConf& low_speed_pid_conf() const;
  ::controller::PidConf* release_low_speed_pid_conf();
  ::controller::PidConf* mutable_low_speed_pid_conf();
  void set_allocated_low_speed_pid_conf(::controller::PidConf* low_speed_pid_conf);

  // optional .controller.PidConf high_speed_pid_conf = 10;
  bool has_high_speed_pid_conf() const;
  void clear_high_speed_pid_conf();
  static const int kHighSpeedPidConfFieldNumber = 10;
  const ::controller::PidConf& high_speed_pid_conf() const;
  ::controller::PidConf* release_high_speed_pid_conf();
  ::controller::PidConf* mutable_high_speed_pid_conf();
  void set_allocated_high_speed_pid_conf(::controller::PidConf* high_speed_pid_conf);

  // optional .controller.PidConf reverse_station_pid_conf = 12;
  bool has_reverse_station_pid_conf() const;
  void clear_reverse_station_pid_conf();
  static const int kReverseStationPidConfFieldNumber = 12;
  const ::controller::PidConf& reverse_station_pid_conf() const;
  ::controller::PidConf* release_reverse_station_pid_conf();
  ::controller::PidConf* mutable_reverse_station_pid_conf();
  void set_allocated_reverse_station_pid_conf(::controller::PidConf* reverse_station_pid_conf);

  // optional .controller.PidConf reverse_speed_pid_conf = 13;
  bool has_reverse_speed_pid_conf() const;
  void clear_reverse_speed_pid_conf();
  static const int kReverseSpeedPidConfFieldNumber = 13;
  const ::controller::PidConf& reverse_speed_pid_conf() const;
  ::controller::PidConf* release_reverse_speed_pid_conf();
  ::controller::PidConf* mutable_reverse_speed_pid_conf();
  void set_allocated_reverse_speed_pid_conf(::controller::PidConf* reverse_speed_pid_conf);

  // optional .controller.FilterConf pitch_angle_filter_conf = 14;
  bool has_pitch_angle_filter_conf() const;
  void clear_pitch_angle_filter_conf();
  static const int kPitchAngleFilterConfFieldNumber = 14;
  const ::controller::FilterConf& pitch_angle_filter_conf() const;
  ::controller::FilterConf* release_pitch_angle_filter_conf();
  ::controller::FilterConf* mutable_pitch_angle_filter_conf();
  void set_allocated_pitch_angle_filter_conf(::controller::FilterConf* pitch_angle_filter_conf);

  // optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
  bool has_reverse_station_leadlag_conf() const;
  void clear_reverse_station_leadlag_conf();
  static const int kReverseStationLeadlagConfFieldNumber = 15;
  const ::controller::LeadlagConf& reverse_station_leadlag_conf() const;
  ::controller::LeadlagConf* release_reverse_station_leadlag_conf();
  ::controller::LeadlagConf* mutable_reverse_station_leadlag_conf();
  void set_allocated_reverse_station_leadlag_conf(::controller::LeadlagConf* reverse_station_leadlag_conf);

  // optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
  bool has_reverse_speed_leadlag_conf() const;
  void clear_reverse_speed_leadlag_conf();
  static const int kReverseSpeedLeadlagConfFieldNumber = 16;
  const ::controller::LeadlagConf& reverse_speed_leadlag_conf() const;
  ::controller::LeadlagConf* release_reverse_speed_leadlag_conf();
  ::controller::LeadlagConf* mutable_reverse_speed_leadlag_conf();
  void set_allocated_reverse_speed_leadlag_conf(::controller::LeadlagConf* reverse_speed_leadlag_conf);

  // optional .controller.ControlCalibrationTable calibration_table = 17;
  bool has_calibration_table() const;
  void clear_calibration_table();
  static const int kCalibrationTableFieldNumber = 17;
  const ::controller::ControlCalibrationTable& calibration_table() const;
  ::controller::ControlCalibrationTable* release_calibration_table();
  ::controller::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::controller::ControlCalibrationTable* calibration_table);

  // optional double ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  double ts() const;
  void set_ts(double value);

  // optional double brake_minimum_action = 2;
  bool has_brake_minimum_action() const;
  void clear_brake_minimum_action();
  static const int kBrakeMinimumActionFieldNumber = 2;
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);

  // optional double throttle_minimum_action = 3;
  bool has_throttle_minimum_action() const;
  void clear_throttle_minimum_action();
  static const int kThrottleMinimumActionFieldNumber = 3;
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);

  // optional double speed_controller_input_limit = 4;
  bool has_speed_controller_input_limit() const;
  void clear_speed_controller_input_limit();
  static const int kSpeedControllerInputLimitFieldNumber = 4;
  double speed_controller_input_limit() const;
  void set_speed_controller_input_limit(double value);

  // optional double station_error_limit = 5;
  bool has_station_error_limit() const;
  void clear_station_error_limit();
  static const int kStationErrorLimitFieldNumber = 5;
  double station_error_limit() const;
  void set_station_error_limit(double value);

  // optional double preview_window = 6;
  bool has_preview_window() const;
  void clear_preview_window();
  static const int kPreviewWindowFieldNumber = 6;
  double preview_window() const;
  void set_preview_window(double value);

  // optional double standstill_acceleration = 7;
  bool has_standstill_acceleration() const;
  void clear_standstill_acceleration();
  static const int kStandstillAccelerationFieldNumber = 7;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  // optional double switch_speed = 11;
  bool has_switch_speed() const;
  void clear_switch_speed();
  static const int kSwitchSpeedFieldNumber = 11;
  double switch_speed() const;
  void set_switch_speed(double value);

  // optional double switch_speed_window = 19 [default = 0];
  bool has_switch_speed_window() const;
  void clear_switch_speed_window();
  static const int kSwitchSpeedWindowFieldNumber = 19;
  double switch_speed_window() const;
  void set_switch_speed_window(double value);

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  bool has_enable_reverse_leadlag_compensation() const;
  void clear_enable_reverse_leadlag_compensation();
  static const int kEnableReverseLeadlagCompensationFieldNumber = 18;
  bool enable_reverse_leadlag_compensation() const;
  void set_enable_reverse_leadlag_compensation(bool value);

  // @@protoc_insertion_point(class_scope:controller.LonControllerConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::controller::PidConf* station_pid_conf_;
  ::controller::PidConf* low_speed_pid_conf_;
  ::controller::PidConf* high_speed_pid_conf_;
  ::controller::PidConf* reverse_station_pid_conf_;
  ::controller::PidConf* reverse_speed_pid_conf_;
  ::controller::FilterConf* pitch_angle_filter_conf_;
  ::controller::LeadlagConf* reverse_station_leadlag_conf_;
  ::controller::LeadlagConf* reverse_speed_leadlag_conf_;
  ::controller::ControlCalibrationTable* calibration_table_;
  double ts_;
  double brake_minimum_action_;
  double throttle_minimum_action_;
  double speed_controller_input_limit_;
  double station_error_limit_;
  double preview_window_;
  double standstill_acceleration_;
  double switch_speed_;
  double switch_speed_window_;
  bool enable_reverse_leadlag_compensation_;
  friend struct ::TableStruct_lon_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilterConf

// optional int32 cutoff_freq = 1;
inline bool FilterConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 FilterConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:controller.FilterConf.cutoff_freq)
  return cutoff_freq_;
}
inline void FilterConf::set_cutoff_freq(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:controller.FilterConf.cutoff_freq)
}

// -------------------------------------------------------------------

// LonControllerConf

// optional double ts = 1;
inline bool LonControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LonControllerConf::clear_ts() {
  ts_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LonControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.ts)
  return ts_;
}
inline void LonControllerConf::set_ts(double value) {
  _has_bits_[0] |= 0x00000200u;
  ts_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.ts)
}

// optional double brake_minimum_action = 2;
inline bool LonControllerConf::has_brake_minimum_action() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LonControllerConf::clear_brake_minimum_action() {
  brake_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double LonControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.brake_minimum_action)
  return brake_minimum_action_;
}
inline void LonControllerConf::set_brake_minimum_action(double value) {
  _has_bits_[0] |= 0x00000400u;
  brake_minimum_action_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.brake_minimum_action)
}

// optional double throttle_minimum_action = 3;
inline bool LonControllerConf::has_throttle_minimum_action() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LonControllerConf::clear_throttle_minimum_action() {
  throttle_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double LonControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.throttle_minimum_action)
  return throttle_minimum_action_;
}
inline void LonControllerConf::set_throttle_minimum_action(double value) {
  _has_bits_[0] |= 0x00000800u;
  throttle_minimum_action_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.throttle_minimum_action)
}

// optional double speed_controller_input_limit = 4;
inline bool LonControllerConf::has_speed_controller_input_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LonControllerConf::clear_speed_controller_input_limit() {
  speed_controller_input_limit_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double LonControllerConf::speed_controller_input_limit() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.speed_controller_input_limit)
  return speed_controller_input_limit_;
}
inline void LonControllerConf::set_speed_controller_input_limit(double value) {
  _has_bits_[0] |= 0x00001000u;
  speed_controller_input_limit_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.speed_controller_input_limit)
}

// optional double station_error_limit = 5;
inline bool LonControllerConf::has_station_error_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LonControllerConf::clear_station_error_limit() {
  station_error_limit_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double LonControllerConf::station_error_limit() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.station_error_limit)
  return station_error_limit_;
}
inline void LonControllerConf::set_station_error_limit(double value) {
  _has_bits_[0] |= 0x00002000u;
  station_error_limit_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.station_error_limit)
}

// optional double preview_window = 6;
inline bool LonControllerConf::has_preview_window() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LonControllerConf::clear_preview_window() {
  preview_window_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double LonControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.preview_window)
  return preview_window_;
}
inline void LonControllerConf::set_preview_window(double value) {
  _has_bits_[0] |= 0x00004000u;
  preview_window_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.preview_window)
}

// optional double standstill_acceleration = 7;
inline bool LonControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LonControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double LonControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
inline void LonControllerConf::set_standstill_acceleration(double value) {
  _has_bits_[0] |= 0x00008000u;
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.standstill_acceleration)
}

// optional .controller.PidConf station_pid_conf = 8;
inline bool LonControllerConf::has_station_pid_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::PidConf& LonControllerConf::station_pid_conf() const {
  const ::controller::PidConf* p = station_pid_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.station_pid_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::PidConf*>(
      &::controller::_PidConf_default_instance_);
}
inline ::controller::PidConf* LonControllerConf::release_station_pid_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.station_pid_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::PidConf* temp = station_pid_conf_;
  station_pid_conf_ = nullptr;
  return temp;
}
inline ::controller::PidConf* LonControllerConf::mutable_station_pid_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::PidConf>(GetArenaNoVirtual());
    station_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.station_pid_conf)
  return station_pid_conf_;
}
inline void LonControllerConf::set_allocated_station_pid_conf(::controller::PidConf* station_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(station_pid_conf_);
  }
  if (station_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      station_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, station_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  station_pid_conf_ = station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.station_pid_conf)
}

// optional .controller.PidConf low_speed_pid_conf = 9;
inline bool LonControllerConf::has_low_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::controller::PidConf& LonControllerConf::low_speed_pid_conf() const {
  const ::controller::PidConf* p = low_speed_pid_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.low_speed_pid_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::PidConf*>(
      &::controller::_PidConf_default_instance_);
}
inline ::controller::PidConf* LonControllerConf::release_low_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.low_speed_pid_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::PidConf* temp = low_speed_pid_conf_;
  low_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::controller::PidConf* LonControllerConf::mutable_low_speed_pid_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (low_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::PidConf>(GetArenaNoVirtual());
    low_speed_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.low_speed_pid_conf)
  return low_speed_pid_conf_;
}
inline void LonControllerConf::set_allocated_low_speed_pid_conf(::controller::PidConf* low_speed_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(low_speed_pid_conf_);
  }
  if (low_speed_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_speed_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, low_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  low_speed_pid_conf_ = low_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.low_speed_pid_conf)
}

// optional .controller.PidConf high_speed_pid_conf = 10;
inline bool LonControllerConf::has_high_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::controller::PidConf& LonControllerConf::high_speed_pid_conf() const {
  const ::controller::PidConf* p = high_speed_pid_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.high_speed_pid_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::PidConf*>(
      &::controller::_PidConf_default_instance_);
}
inline ::controller::PidConf* LonControllerConf::release_high_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.high_speed_pid_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::PidConf* temp = high_speed_pid_conf_;
  high_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::controller::PidConf* LonControllerConf::mutable_high_speed_pid_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (high_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::PidConf>(GetArenaNoVirtual());
    high_speed_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.high_speed_pid_conf)
  return high_speed_pid_conf_;
}
inline void LonControllerConf::set_allocated_high_speed_pid_conf(::controller::PidConf* high_speed_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(high_speed_pid_conf_);
  }
  if (high_speed_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      high_speed_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, high_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  high_speed_pid_conf_ = high_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.high_speed_pid_conf)
}

// optional double switch_speed = 11;
inline bool LonControllerConf::has_switch_speed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LonControllerConf::clear_switch_speed() {
  switch_speed_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double LonControllerConf::switch_speed() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.switch_speed)
  return switch_speed_;
}
inline void LonControllerConf::set_switch_speed(double value) {
  _has_bits_[0] |= 0x00010000u;
  switch_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.switch_speed)
}

// optional .controller.PidConf reverse_station_pid_conf = 12;
inline bool LonControllerConf::has_reverse_station_pid_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::controller::PidConf& LonControllerConf::reverse_station_pid_conf() const {
  const ::controller::PidConf* p = reverse_station_pid_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.reverse_station_pid_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::PidConf*>(
      &::controller::_PidConf_default_instance_);
}
inline ::controller::PidConf* LonControllerConf::release_reverse_station_pid_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.reverse_station_pid_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::PidConf* temp = reverse_station_pid_conf_;
  reverse_station_pid_conf_ = nullptr;
  return temp;
}
inline ::controller::PidConf* LonControllerConf::mutable_reverse_station_pid_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (reverse_station_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::PidConf>(GetArenaNoVirtual());
    reverse_station_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.reverse_station_pid_conf)
  return reverse_station_pid_conf_;
}
inline void LonControllerConf::set_allocated_reverse_station_pid_conf(::controller::PidConf* reverse_station_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reverse_station_pid_conf_);
  }
  if (reverse_station_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reverse_station_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_station_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reverse_station_pid_conf_ = reverse_station_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.reverse_station_pid_conf)
}

// optional .controller.PidConf reverse_speed_pid_conf = 13;
inline bool LonControllerConf::has_reverse_speed_pid_conf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::controller::PidConf& LonControllerConf::reverse_speed_pid_conf() const {
  const ::controller::PidConf* p = reverse_speed_pid_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.reverse_speed_pid_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::PidConf*>(
      &::controller::_PidConf_default_instance_);
}
inline ::controller::PidConf* LonControllerConf::release_reverse_speed_pid_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.reverse_speed_pid_conf)
  _has_bits_[0] &= ~0x00000010u;
  ::controller::PidConf* temp = reverse_speed_pid_conf_;
  reverse_speed_pid_conf_ = nullptr;
  return temp;
}
inline ::controller::PidConf* LonControllerConf::mutable_reverse_speed_pid_conf() {
  _has_bits_[0] |= 0x00000010u;
  if (reverse_speed_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::PidConf>(GetArenaNoVirtual());
    reverse_speed_pid_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.reverse_speed_pid_conf)
  return reverse_speed_pid_conf_;
}
inline void LonControllerConf::set_allocated_reverse_speed_pid_conf(::controller::PidConf* reverse_speed_pid_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reverse_speed_pid_conf_);
  }
  if (reverse_speed_pid_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reverse_speed_pid_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_speed_pid_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reverse_speed_pid_conf_ = reverse_speed_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.reverse_speed_pid_conf)
}

// optional .controller.FilterConf pitch_angle_filter_conf = 14;
inline bool LonControllerConf::has_pitch_angle_filter_conf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LonControllerConf::clear_pitch_angle_filter_conf() {
  if (pitch_angle_filter_conf_ != nullptr) pitch_angle_filter_conf_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::controller::FilterConf& LonControllerConf::pitch_angle_filter_conf() const {
  const ::controller::FilterConf* p = pitch_angle_filter_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.pitch_angle_filter_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::FilterConf*>(
      &::controller::_FilterConf_default_instance_);
}
inline ::controller::FilterConf* LonControllerConf::release_pitch_angle_filter_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.pitch_angle_filter_conf)
  _has_bits_[0] &= ~0x00000020u;
  ::controller::FilterConf* temp = pitch_angle_filter_conf_;
  pitch_angle_filter_conf_ = nullptr;
  return temp;
}
inline ::controller::FilterConf* LonControllerConf::mutable_pitch_angle_filter_conf() {
  _has_bits_[0] |= 0x00000020u;
  if (pitch_angle_filter_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::FilterConf>(GetArenaNoVirtual());
    pitch_angle_filter_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.pitch_angle_filter_conf)
  return pitch_angle_filter_conf_;
}
inline void LonControllerConf::set_allocated_pitch_angle_filter_conf(::controller::FilterConf* pitch_angle_filter_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pitch_angle_filter_conf_;
  }
  if (pitch_angle_filter_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pitch_angle_filter_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pitch_angle_filter_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pitch_angle_filter_conf_ = pitch_angle_filter_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.pitch_angle_filter_conf)
}

// optional .controller.LeadlagConf reverse_station_leadlag_conf = 15;
inline bool LonControllerConf::has_reverse_station_leadlag_conf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::controller::LeadlagConf& LonControllerConf::reverse_station_leadlag_conf() const {
  const ::controller::LeadlagConf* p = reverse_station_leadlag_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.reverse_station_leadlag_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::LeadlagConf*>(
      &::controller::_LeadlagConf_default_instance_);
}
inline ::controller::LeadlagConf* LonControllerConf::release_reverse_station_leadlag_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.reverse_station_leadlag_conf)
  _has_bits_[0] &= ~0x00000040u;
  ::controller::LeadlagConf* temp = reverse_station_leadlag_conf_;
  reverse_station_leadlag_conf_ = nullptr;
  return temp;
}
inline ::controller::LeadlagConf* LonControllerConf::mutable_reverse_station_leadlag_conf() {
  _has_bits_[0] |= 0x00000040u;
  if (reverse_station_leadlag_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::LeadlagConf>(GetArenaNoVirtual());
    reverse_station_leadlag_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.reverse_station_leadlag_conf)
  return reverse_station_leadlag_conf_;
}
inline void LonControllerConf::set_allocated_reverse_station_leadlag_conf(::controller::LeadlagConf* reverse_station_leadlag_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reverse_station_leadlag_conf_);
  }
  if (reverse_station_leadlag_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reverse_station_leadlag_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_station_leadlag_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  reverse_station_leadlag_conf_ = reverse_station_leadlag_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.reverse_station_leadlag_conf)
}

// optional .controller.LeadlagConf reverse_speed_leadlag_conf = 16;
inline bool LonControllerConf::has_reverse_speed_leadlag_conf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::controller::LeadlagConf& LonControllerConf::reverse_speed_leadlag_conf() const {
  const ::controller::LeadlagConf* p = reverse_speed_leadlag_conf_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.reverse_speed_leadlag_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::LeadlagConf*>(
      &::controller::_LeadlagConf_default_instance_);
}
inline ::controller::LeadlagConf* LonControllerConf::release_reverse_speed_leadlag_conf() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.reverse_speed_leadlag_conf)
  _has_bits_[0] &= ~0x00000080u;
  ::controller::LeadlagConf* temp = reverse_speed_leadlag_conf_;
  reverse_speed_leadlag_conf_ = nullptr;
  return temp;
}
inline ::controller::LeadlagConf* LonControllerConf::mutable_reverse_speed_leadlag_conf() {
  _has_bits_[0] |= 0x00000080u;
  if (reverse_speed_leadlag_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::LeadlagConf>(GetArenaNoVirtual());
    reverse_speed_leadlag_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.reverse_speed_leadlag_conf)
  return reverse_speed_leadlag_conf_;
}
inline void LonControllerConf::set_allocated_reverse_speed_leadlag_conf(::controller::LeadlagConf* reverse_speed_leadlag_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reverse_speed_leadlag_conf_);
  }
  if (reverse_speed_leadlag_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reverse_speed_leadlag_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_speed_leadlag_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  reverse_speed_leadlag_conf_ = reverse_speed_leadlag_conf;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.reverse_speed_leadlag_conf)
}

// optional .controller.ControlCalibrationTable calibration_table = 17;
inline bool LonControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::controller::ControlCalibrationTable& LonControllerConf::calibration_table() const {
  const ::controller::ControlCalibrationTable* p = calibration_table_;
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.calibration_table)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::ControlCalibrationTable*>(
      &::controller::_ControlCalibrationTable_default_instance_);
}
inline ::controller::ControlCalibrationTable* LonControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:controller.LonControllerConf.calibration_table)
  _has_bits_[0] &= ~0x00000100u;
  ::controller::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = nullptr;
  return temp;
}
inline ::controller::ControlCalibrationTable* LonControllerConf::mutable_calibration_table() {
  _has_bits_[0] |= 0x00000100u;
  if (calibration_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::ControlCalibrationTable>(GetArenaNoVirtual());
    calibration_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.LonControllerConf.calibration_table)
  return calibration_table_;
}
inline void LonControllerConf::set_allocated_calibration_table(::controller::ControlCalibrationTable* calibration_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(calibration_table_);
  }
  if (calibration_table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calibration_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:controller.LonControllerConf.calibration_table)
}

// optional bool enable_reverse_leadlag_compensation = 18 [default = false];
inline bool LonControllerConf::has_enable_reverse_leadlag_compensation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LonControllerConf::clear_enable_reverse_leadlag_compensation() {
  enable_reverse_leadlag_compensation_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool LonControllerConf::enable_reverse_leadlag_compensation() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.enable_reverse_leadlag_compensation)
  return enable_reverse_leadlag_compensation_;
}
inline void LonControllerConf::set_enable_reverse_leadlag_compensation(bool value) {
  _has_bits_[0] |= 0x00040000u;
  enable_reverse_leadlag_compensation_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.enable_reverse_leadlag_compensation)
}

// optional double switch_speed_window = 19 [default = 0];
inline bool LonControllerConf::has_switch_speed_window() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LonControllerConf::clear_switch_speed_window() {
  switch_speed_window_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double LonControllerConf::switch_speed_window() const {
  // @@protoc_insertion_point(field_get:controller.LonControllerConf.switch_speed_window)
  return switch_speed_window_;
}
inline void LonControllerConf::set_switch_speed_window(double value) {
  _has_bits_[0] |= 0x00020000u;
  switch_speed_window_ = value;
  // @@protoc_insertion_point(field_set:controller.LonControllerConf.switch_speed_window)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_lon_5fcontroller_5fconf_2eproto
