// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_pid_lat_lon_controller_conf.proto

#include "simple_pid_lat_lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_pid_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PidConf_pid_5fconf_2eproto;
namespace controller {
class SimplePIDLatLonControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimplePIDLatLonControllerConf> _instance;
} _SimplePIDLatLonControllerConf_default_instance_;
}  // namespace controller
static void InitDefaultsSimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_SimplePIDLatLonControllerConf_default_instance_;
    new (ptr) ::controller::SimplePIDLatLonControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::SimplePIDLatLonControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_pid_5fconf_2eproto.base,}};

void InitDefaults_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, look_ahead_distance_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, d_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, yaw_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, dt_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, speed_controller_input_limit_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::controller::SimplePIDLatLonControllerConf, mean_filter_window_size_),
  5,
  6,
  0,
  1,
  7,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::controller::SimplePIDLatLonControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_SimplePIDLatLonControllerConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto = {
  {}, AddDescriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, "simple_pid_lat_lon_controller_conf.proto", schemas,
  file_default_instances, TableStruct_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, file_level_service_descriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto,
};

const char descriptor_table_protodef_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto[] =
  "\n(simple_pid_lat_lon_controller_conf.pro"
  "to\022\ncontroller\032\016pid_conf.proto\"\227\002\n\035Simpl"
  "ePIDLatLonControllerConf\022\036\n\023look_ahead_d"
  "istance\030\001 \001(\001:\0011\022\016\n\001d\030\002 \001(\001:\0030.1\022-\n\020stat"
  "ion_pid_conf\030\003 \001(\0132\023.controller.PidConf\022"
  ")\n\014yaw_pid_conf\030\004 \001(\0132\023.controller.PidCo"
  "nf\022\020\n\002dt\030\005 \001(\001:\0040.01\022$\n\034speed_controller"
  "_input_limit\030\006 \001(\001\022\023\n\013cutoff_freq\030\007 \001(\001\022"
  "\037\n\027mean_filter_window_size\030\010 \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto = {
  false, InitDefaults_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, 
  descriptor_table_protodef_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto,
  "simple_pid_lat_lon_controller_conf.proto", &assign_descriptors_table_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, 352,
};

void AddDescriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_pid_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto = []() { AddDescriptors_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void SimplePIDLatLonControllerConf::InitAsDefaultInstance() {
  ::controller::_SimplePIDLatLonControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
  ::controller::_SimplePIDLatLonControllerConf_default_instance_._instance.get_mutable()->yaw_pid_conf_ = const_cast< ::controller::PidConf*>(
      ::controller::PidConf::internal_default_instance());
}
class SimplePIDLatLonControllerConf::HasBitSetters {
 public:
  static void set_has_look_ahead_distance(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_d(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::controller::PidConf& station_pid_conf(const SimplePIDLatLonControllerConf* msg);
  static void set_has_station_pid_conf(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::PidConf& yaw_pid_conf(const SimplePIDLatLonControllerConf* msg);
  static void set_has_yaw_pid_conf(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dt(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_speed_controller_input_limit(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cutoff_freq(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_mean_filter_window_size(SimplePIDLatLonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::controller::PidConf&
SimplePIDLatLonControllerConf::HasBitSetters::station_pid_conf(const SimplePIDLatLonControllerConf* msg) {
  return *msg->station_pid_conf_;
}
const ::controller::PidConf&
SimplePIDLatLonControllerConf::HasBitSetters::yaw_pid_conf(const SimplePIDLatLonControllerConf* msg) {
  return *msg->yaw_pid_conf_;
}
void SimplePIDLatLonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != nullptr) station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SimplePIDLatLonControllerConf::clear_yaw_pid_conf() {
  if (yaw_pid_conf_ != nullptr) yaw_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimplePIDLatLonControllerConf::kLookAheadDistanceFieldNumber;
const int SimplePIDLatLonControllerConf::kDFieldNumber;
const int SimplePIDLatLonControllerConf::kStationPidConfFieldNumber;
const int SimplePIDLatLonControllerConf::kYawPidConfFieldNumber;
const int SimplePIDLatLonControllerConf::kDtFieldNumber;
const int SimplePIDLatLonControllerConf::kSpeedControllerInputLimitFieldNumber;
const int SimplePIDLatLonControllerConf::kCutoffFreqFieldNumber;
const int SimplePIDLatLonControllerConf::kMeanFilterWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimplePIDLatLonControllerConf::SimplePIDLatLonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.SimplePIDLatLonControllerConf)
}
SimplePIDLatLonControllerConf::SimplePIDLatLonControllerConf(const SimplePIDLatLonControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_pid_conf()) {
    station_pid_conf_ = new ::controller::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = nullptr;
  }
  if (from.has_yaw_pid_conf()) {
    yaw_pid_conf_ = new ::controller::PidConf(*from.yaw_pid_conf_);
  } else {
    yaw_pid_conf_ = nullptr;
  }
  ::memcpy(&speed_controller_input_limit_, &from.speed_controller_input_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&dt_) -
    reinterpret_cast<char*>(&speed_controller_input_limit_)) + sizeof(dt_));
  // @@protoc_insertion_point(copy_constructor:controller.SimplePIDLatLonControllerConf)
}

void SimplePIDLatLonControllerConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto.base);
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_filter_window_size_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(mean_filter_window_size_));
  look_ahead_distance_ = 1;
  d_ = 0.1;
  dt_ = 0.01;
}

SimplePIDLatLonControllerConf::~SimplePIDLatLonControllerConf() {
  // @@protoc_insertion_point(destructor:controller.SimplePIDLatLonControllerConf)
  SharedDtor();
}

void SimplePIDLatLonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete yaw_pid_conf_;
}

void SimplePIDLatLonControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimplePIDLatLonControllerConf& SimplePIDLatLonControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SimplePIDLatLonControllerConf_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void SimplePIDLatLonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.SimplePIDLatLonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_pid_conf_ != nullptr);
      station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(yaw_pid_conf_ != nullptr);
      yaw_pid_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&speed_controller_input_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mean_filter_window_size_) -
        reinterpret_cast<char*>(&speed_controller_input_limit_)) + sizeof(mean_filter_window_size_));
    look_ahead_distance_ = 1;
    d_ = 0.1;
    dt_ = 0.01;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimplePIDLatLonControllerConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SimplePIDLatLonControllerConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double look_ahead_distance = 1 [default = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_look_ahead_distance(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double d = 2 [default = 0.1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_d(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.PidConf station_pid_conf = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_station_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.PidConf yaw_pid_conf = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::PidConf::_InternalParse;
        object = msg->mutable_yaw_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional double dt = 5 [default = 0.01];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_dt(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double speed_controller_input_limit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_speed_controller_input_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double cutoff_freq = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_cutoff_freq(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double mean_filter_window_size = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_mean_filter_window_size(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimplePIDLatLonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.SimplePIDLatLonControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double look_ahead_distance = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_look_ahead_distance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &look_ahead_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double d = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_d(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf station_pid_conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.PidConf yaw_pid_conf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dt = 5 [default = 0.01];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_dt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_controller_input_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_speed_controller_input_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_controller_input_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cutoff_freq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_cutoff_freq(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mean_filter_window_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_mean_filter_window_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_filter_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.SimplePIDLatLonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.SimplePIDLatLonControllerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimplePIDLatLonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.SimplePIDLatLonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double look_ahead_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->look_ahead_distance(), output);
  }

  // optional double d = 2 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->d(), output);
  }

  // optional .controller.PidConf station_pid_conf = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::station_pid_conf(this), output);
  }

  // optional .controller.PidConf yaw_pid_conf = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::yaw_pid_conf(this), output);
  }

  // optional double dt = 5 [default = 0.01];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dt(), output);
  }

  // optional double speed_controller_input_limit = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_controller_input_limit(), output);
  }

  // optional double cutoff_freq = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cutoff_freq(), output);
  }

  // optional double mean_filter_window_size = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mean_filter_window_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.SimplePIDLatLonControllerConf)
}

::google::protobuf::uint8* SimplePIDLatLonControllerConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.SimplePIDLatLonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double look_ahead_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->look_ahead_distance(), target);
  }

  // optional double d = 2 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->d(), target);
  }

  // optional .controller.PidConf station_pid_conf = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::station_pid_conf(this), target);
  }

  // optional .controller.PidConf yaw_pid_conf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::yaw_pid_conf(this), target);
  }

  // optional double dt = 5 [default = 0.01];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dt(), target);
  }

  // optional double speed_controller_input_limit = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_controller_input_limit(), target);
  }

  // optional double cutoff_freq = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cutoff_freq(), target);
  }

  // optional double mean_filter_window_size = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mean_filter_window_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.SimplePIDLatLonControllerConf)
  return target;
}

size_t SimplePIDLatLonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.SimplePIDLatLonControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.PidConf station_pid_conf = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_pid_conf_);
    }

    // optional .controller.PidConf yaw_pid_conf = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yaw_pid_conf_);
    }

    // optional double speed_controller_input_limit = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double cutoff_freq = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double mean_filter_window_size = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double look_ahead_distance = 1 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double d = 2 [default = 0.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double dt = 5 [default = 0.01];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimplePIDLatLonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.SimplePIDLatLonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SimplePIDLatLonControllerConf* source =
      ::google::protobuf::DynamicCastToGenerated<SimplePIDLatLonControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.SimplePIDLatLonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.SimplePIDLatLonControllerConf)
    MergeFrom(*source);
  }
}

void SimplePIDLatLonControllerConf::MergeFrom(const SimplePIDLatLonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.SimplePIDLatLonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_pid_conf()->::controller::PidConf::MergeFrom(from.station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_yaw_pid_conf()->::controller::PidConf::MergeFrom(from.yaw_pid_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      speed_controller_input_limit_ = from.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00000010u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      look_ahead_distance_ = from.look_ahead_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000080u) {
      dt_ = from.dt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimplePIDLatLonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.SimplePIDLatLonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplePIDLatLonControllerConf::CopyFrom(const SimplePIDLatLonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.SimplePIDLatLonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplePIDLatLonControllerConf::IsInitialized() const {
  return true;
}

void SimplePIDLatLonControllerConf::Swap(SimplePIDLatLonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimplePIDLatLonControllerConf::InternalSwap(SimplePIDLatLonControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(station_pid_conf_, other->station_pid_conf_);
  swap(yaw_pid_conf_, other->yaw_pid_conf_);
  swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  swap(cutoff_freq_, other->cutoff_freq_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(look_ahead_distance_, other->look_ahead_distance_);
  swap(d_, other->d_);
  swap(dt_, other->dt_);
}

::google::protobuf::Metadata SimplePIDLatLonControllerConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_simple_5fpid_5flat_5flon_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::SimplePIDLatLonControllerConf* Arena::CreateMaybeMessage< ::controller::SimplePIDLatLonControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::SimplePIDLatLonControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
