// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lat_controller_conf.proto

#include "lat_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gain_5fscheduler_5fconf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GainScheduler_gain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_leadlag_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeadlagConf_leadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mrac_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MracConf_mrac_5fconf_2eproto;
namespace controller {
class LatControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatControllerConf> _instance;
} _LatControllerConf_default_instance_;
}  // namespace controller
static void InitDefaultsLatControllerConf_lat_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_LatControllerConf_default_instance_;
    new (ptr) ::controller::LatControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::LatControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLatControllerConf_lat_5fcontroller_5fconf_2eproto}, {
      &scc_info_GainScheduler_gain_5fscheduler_5fconf_2eproto.base,
      &scc_info_LeadlagConf_leadlag_5fconf_2eproto.base,
      &scc_info_MracConf_mrac_5fconf_2eproto.base,}};

void InitDefaults_lat_5fcontroller_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lat_5fcontroller_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_lat_5fcontroller_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lat_5fcontroller_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lat_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, reverse_matrix_q_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, reverse_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, enable_look_ahead_back_control_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, lookahead_station_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, lookback_station_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, steer_mrac_conf_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, enable_steer_mrac_control_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, lookahead_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, lookback_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::controller::LatControllerConf, matrix_r_),
  14,
  4,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  22,
  23,
  13,
  24,
  0,
  1,
  2,
  5,
  6,
  8,
  9,
  3,
  7,
  10,
  11,
  12,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::controller::LatControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_LatControllerConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lat_5fcontroller_5fconf_2eproto = {
  {}, AddDescriptors_lat_5fcontroller_5fconf_2eproto, "lat_controller_conf.proto", schemas,
  file_default_instances, TableStruct_lat_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_lat_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_lat_5fcontroller_5fconf_2eproto, file_level_service_descriptors_lat_5fcontroller_5fconf_2eproto,
};

const char descriptor_table_protodef_lat_5fcontroller_5fconf_2eproto[] =
  "\n\031lat_controller_conf.proto\022\ncontroller\032"
  "\031gain_scheduler_conf.proto\032\022leadlag_conf"
  ".proto\032\017mrac_conf.proto\"\221\007\n\021LatControlle"
  "rConf\022\020\n\002ts\030\001 \001(\001:\0040.01\022\031\n\016preview_windo"
  "w\030\002 \001(\005:\0010\022\026\n\002cf\030\003 \001(\001:\n155494.663\022\026\n\002cr"
  "\030\004 \001(\001:\n155494.663\022\024\n\007mass_fl\030\005 \001(\005:\003520"
  "\022\024\n\007mass_fr\030\006 \001(\005:\003520\022\024\n\007mass_rl\030\007 \001(\005:"
  "\003520\022\024\n\007mass_rr\030\010 \001(\005:\003520\022\021\n\003eps\030\t \001(\001:"
  "\0040.01\022\020\n\010matrix_q\030\n \003(\001\022\030\n\020reverse_matri"
  "x_q\030\013 \003(\001\022\027\n\013cutoff_freq\030\014 \001(\005:\00210\022#\n\027me"
  "an_filter_window_size\030\r \001(\005:\00210\022\032\n\rmax_i"
  "teration\030\016 \001(\005:\003100\022#\n\030max_lateral_accel"
  "eration\030\017 \001(\001:\0015\0229\n\026lat_err_gain_schedul"
  "er\030\020 \001(\0132\031.controller.GainScheduler\022=\n\032h"
  "eading_err_gain_scheduler\030\021 \001(\0132\031.contro"
  "ller.GainScheduler\0225\n\024reverse_leadlag_co"
  "nf\030\022 \001(\0132\027.controller.LeadlagConf\0222\n#ena"
  "ble_reverse_leadlag_compensation\030\023 \001(\010:\005"
  "false\022-\n\036enable_look_ahead_back_control\030"
  "\024 \001(\010:\005false\022\034\n\021lookahead_station\030\025 \001(\001:"
  "\0010\022\033\n\020lookback_station\030\026 \001(\001:\0010\022-\n\017steer"
  "_mrac_conf\030\027 \001(\0132\024.controller.MracConf\022("
  "\n\031enable_steer_mrac_control\030\030 \001(\010:\005false"
  "\022\'\n\034lookahead_station_high_speed\030\031 \001(\001:\001"
  "0\022&\n\033lookback_station_high_speed\030\032 \001(\001:\001"
  "0\022\020\n\010matrix_r\030\033 \001(\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lat_5fcontroller_5fconf_2eproto = {
  false, InitDefaults_lat_5fcontroller_5fconf_2eproto, 
  descriptor_table_protodef_lat_5fcontroller_5fconf_2eproto,
  "lat_controller_conf.proto", &assign_descriptors_table_lat_5fcontroller_5fconf_2eproto, 1019,
};

void AddDescriptors_lat_5fcontroller_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_gain_5fscheduler_5fconf_2eproto,
    ::AddDescriptors_leadlag_5fconf_2eproto,
    ::AddDescriptors_mrac_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lat_5fcontroller_5fconf_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lat_5fcontroller_5fconf_2eproto = []() { AddDescriptors_lat_5fcontroller_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void LatControllerConf::InitAsDefaultInstance() {
  ::controller::_LatControllerConf_default_instance_._instance.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_LatControllerConf_default_instance_._instance.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::controller::GainScheduler*>(
      ::controller::GainScheduler::internal_default_instance());
  ::controller::_LatControllerConf_default_instance_._instance.get_mutable()->reverse_leadlag_conf_ = const_cast< ::controller::LeadlagConf*>(
      ::controller::LeadlagConf::internal_default_instance());
  ::controller::_LatControllerConf_default_instance_._instance.get_mutable()->steer_mrac_conf_ = const_cast< ::controller::MracConf*>(
      ::controller::MracConf::internal_default_instance());
}
class LatControllerConf::HasBitSetters {
 public:
  static void set_has_ts(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_preview_window(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_cf(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_cr(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_mass_fl(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_mass_fr(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_mass_rl(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_mass_rr(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_eps(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_cutoff_freq(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_mean_filter_window_size(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_max_iteration(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_max_lateral_acceleration(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static const ::controller::GainScheduler& lat_err_gain_scheduler(const LatControllerConf* msg);
  static void set_has_lat_err_gain_scheduler(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::controller::GainScheduler& heading_err_gain_scheduler(const LatControllerConf* msg);
  static void set_has_heading_err_gain_scheduler(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::controller::LeadlagConf& reverse_leadlag_conf(const LatControllerConf* msg);
  static void set_has_reverse_leadlag_conf(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_enable_reverse_leadlag_compensation(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_enable_look_ahead_back_control(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lookahead_station(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_lookback_station(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::controller::MracConf& steer_mrac_conf(const LatControllerConf* msg);
  static void set_has_steer_mrac_conf(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_enable_steer_mrac_control(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_lookahead_station_high_speed(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lookback_station_high_speed(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_matrix_r(LatControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

const ::controller::GainScheduler&
LatControllerConf::HasBitSetters::lat_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::controller::GainScheduler&
LatControllerConf::HasBitSetters::heading_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::controller::LeadlagConf&
LatControllerConf::HasBitSetters::reverse_leadlag_conf(const LatControllerConf* msg) {
  return *msg->reverse_leadlag_conf_;
}
const ::controller::MracConf&
LatControllerConf::HasBitSetters::steer_mrac_conf(const LatControllerConf* msg) {
  return *msg->steer_mrac_conf_;
}
void LatControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != nullptr) lat_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LatControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != nullptr) heading_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LatControllerConf::clear_reverse_leadlag_conf() {
  if (reverse_leadlag_conf_ != nullptr) reverse_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LatControllerConf::clear_steer_mrac_conf() {
  if (steer_mrac_conf_ != nullptr) steer_mrac_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatControllerConf::kTsFieldNumber;
const int LatControllerConf::kPreviewWindowFieldNumber;
const int LatControllerConf::kCfFieldNumber;
const int LatControllerConf::kCrFieldNumber;
const int LatControllerConf::kMassFlFieldNumber;
const int LatControllerConf::kMassFrFieldNumber;
const int LatControllerConf::kMassRlFieldNumber;
const int LatControllerConf::kMassRrFieldNumber;
const int LatControllerConf::kEpsFieldNumber;
const int LatControllerConf::kMatrixQFieldNumber;
const int LatControllerConf::kReverseMatrixQFieldNumber;
const int LatControllerConf::kCutoffFreqFieldNumber;
const int LatControllerConf::kMeanFilterWindowSizeFieldNumber;
const int LatControllerConf::kMaxIterationFieldNumber;
const int LatControllerConf::kMaxLateralAccelerationFieldNumber;
const int LatControllerConf::kLatErrGainSchedulerFieldNumber;
const int LatControllerConf::kHeadingErrGainSchedulerFieldNumber;
const int LatControllerConf::kReverseLeadlagConfFieldNumber;
const int LatControllerConf::kEnableReverseLeadlagCompensationFieldNumber;
const int LatControllerConf::kEnableLookAheadBackControlFieldNumber;
const int LatControllerConf::kLookaheadStationFieldNumber;
const int LatControllerConf::kLookbackStationFieldNumber;
const int LatControllerConf::kSteerMracConfFieldNumber;
const int LatControllerConf::kEnableSteerMracControlFieldNumber;
const int LatControllerConf::kLookaheadStationHighSpeedFieldNumber;
const int LatControllerConf::kLookbackStationHighSpeedFieldNumber;
const int LatControllerConf::kMatrixRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatControllerConf::LatControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.LatControllerConf)
}
LatControllerConf::LatControllerConf(const LatControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matrix_q_(from.matrix_q_),
      reverse_matrix_q_(from.reverse_matrix_q_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::controller::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from.has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::controller::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from.has_reverse_leadlag_conf()) {
    reverse_leadlag_conf_ = new ::controller::LeadlagConf(*from.reverse_leadlag_conf_);
  } else {
    reverse_leadlag_conf_ = nullptr;
  }
  if (from.has_steer_mrac_conf()) {
    steer_mrac_conf_ = new ::controller::MracConf(*from.steer_mrac_conf_);
  } else {
    steer_mrac_conf_ = nullptr;
  }
  ::memcpy(&preview_window_, &from.preview_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lateral_acceleration_) -
    reinterpret_cast<char*>(&preview_window_)) + sizeof(max_lateral_acceleration_));
  // @@protoc_insertion_point(copy_constructor:controller.LatControllerConf)
}

void LatControllerConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto.base);
  ::memset(&lat_err_gain_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matrix_r_) -
      reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(matrix_r_));
  max_iteration_ = 100;
  ts_ = 0.01;
  cf_ = 155494.663;
  cr_ = 155494.663;
  mass_fl_ = 520;
  mass_fr_ = 520;
  mass_rl_ = 520;
  mass_rr_ = 520;
  eps_ = 0.01;
  cutoff_freq_ = 10;
  mean_filter_window_size_ = 10;
  max_lateral_acceleration_ = 5;
}

LatControllerConf::~LatControllerConf() {
  // @@protoc_insertion_point(destructor:controller.LatControllerConf)
  SharedDtor();
}

void LatControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete reverse_leadlag_conf_;
  if (this != internal_default_instance()) delete steer_mrac_conf_;
}

void LatControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatControllerConf& LatControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LatControllerConf_lat_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LatControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  reverse_matrix_q_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != nullptr);
      lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != nullptr);
      heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_leadlag_conf_ != nullptr);
      reverse_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(steer_mrac_conf_ != nullptr);
      steer_mrac_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&preview_window_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_steer_mrac_control_) -
        reinterpret_cast<char*>(&preview_window_)) + sizeof(enable_steer_mrac_control_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lookahead_station_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matrix_r_) -
        reinterpret_cast<char*>(&lookahead_station_)) + sizeof(matrix_r_));
    max_iteration_ = 100;
    ts_ = 0.01;
    cf_ = 155494.663;
  }
  if (cached_has_bits & 0x00ff0000u) {
    cr_ = 155494.663;
    mass_fl_ = 520;
    mass_fr_ = 520;
    mass_rl_ = 520;
    mass_rr_ = 520;
    eps_ = 0.01;
    cutoff_freq_ = 10;
    mean_filter_window_size_ = 10;
  }
  max_lateral_acceleration_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatControllerConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LatControllerConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double ts = 1 [default = 0.01];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ts(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int32 preview_window = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_preview_window(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double cf = 3 [default = 155494.663];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_cf(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double cr = 4 [default = 155494.663];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_cr(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int32 mass_fl = 5 [default = 520];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_mass_fl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_fr = 6 [default = 520];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_mass_fr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_rl = 7 [default = 520];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_mass_rl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mass_rr = 8 [default = 520];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_mass_rr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double eps = 9 [default = 0.01];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_eps(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated double matrix_q = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 81) {
          do {
            msg->add_matrix_q(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 81 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_matrix_q();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated double reverse_matrix_q = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 89) {
          do {
            msg->add_reverse_matrix_q(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 89 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_reverse_matrix_q();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 cutoff_freq = 12 [default = 10];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_cutoff_freq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 mean_filter_window_size = 13 [default = 10];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_mean_filter_window_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_iteration = 14 [default = 100];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_max_iteration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double max_lateral_acceleration = 15 [default = 5];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_max_lateral_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.GainScheduler lat_err_gain_scheduler = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_lat_err_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.GainScheduler heading_err_gain_scheduler = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::GainScheduler::_InternalParse;
        object = msg->mutable_heading_err_gain_scheduler();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .controller.LeadlagConf reverse_leadlag_conf = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::LeadlagConf::_InternalParse;
        object = msg->mutable_reverse_leadlag_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_enable_reverse_leadlag_compensation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_look_ahead_back_control = 20 [default = false];
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_enable_look_ahead_back_control(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double lookahead_station = 21 [default = 0];
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_lookahead_station(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double lookback_station = 22 [default = 0];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 177) goto handle_unusual;
        msg->set_lookback_station(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .controller.MracConf steer_mrac_conf = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::controller::MracConf::_InternalParse;
        object = msg->mutable_steer_mrac_conf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool enable_steer_mrac_control = 24 [default = false];
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_enable_steer_mrac_control(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double lookahead_station_high_speed = 25 [default = 0];
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_lookahead_station_high_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double lookback_station_high_speed = 26 [default = 0];
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_lookback_station_high_speed(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double matrix_r = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 217) goto handle_unusual;
        msg->set_matrix_r(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.LatControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ts = 1 [default = 0.01];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ts(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preview_window = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_preview_window(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preview_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cf = 3 [default = 155494.663];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_cf(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cr = 4 [default = 155494.663];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_cr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fl = 5 [default = 520];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_mass_fl(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_fr = 6 [default = 520];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mass_fr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rl = 7 [default = 520];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_mass_rl(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mass_rr = 8 [default = 520];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_mass_rr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps = 9 [default = 0.01];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_eps(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double matrix_q = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_matrix_q())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double reverse_matrix_q = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_reverse_matrix_q())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_reverse_matrix_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cutoff_freq = 12 [default = 10];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_cutoff_freq(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mean_filter_window_size = 13 [default = 10];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_mean_filter_window_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iteration = 14 [default = 100];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_max_iteration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lateral_acceleration = 15 [default = 5];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_max_lateral_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lateral_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler lat_err_gain_scheduler = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.GainScheduler heading_err_gain_scheduler = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading_err_gain_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.LeadlagConf reverse_leadlag_conf = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_leadlag_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_enable_reverse_leadlag_compensation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_reverse_leadlag_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_look_ahead_back_control = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_enable_look_ahead_back_control(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_look_ahead_back_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lookahead_station = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {
          HasBitSetters::set_has_lookahead_station(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookahead_station_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lookback_station = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (177 & 0xFF)) {
          HasBitSetters::set_has_lookback_station(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookback_station_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.MracConf steer_mrac_conf = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steer_mrac_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_steer_mrac_control = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_enable_steer_mrac_control(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_steer_mrac_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lookahead_station_high_speed = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {
          HasBitSetters::set_has_lookahead_station_high_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookahead_station_high_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lookback_station_high_speed = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {
          HasBitSetters::set_has_lookback_station_high_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookback_station_high_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double matrix_r = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (217 & 0xFF)) {
          HasBitSetters::set_has_matrix_r(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matrix_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.LatControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.LatControllerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1 [default = 0.01];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ts(), output);
  }

  // optional int32 preview_window = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preview_window(), output);
  }

  // optional double cf = 3 [default = 155494.663];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cf(), output);
  }

  // optional double cr = 4 [default = 155494.663];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cr(), output);
  }

  // optional int32 mass_fl = 5 [default = 520];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mass_fl(), output);
  }

  // optional int32 mass_fr = 6 [default = 520];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass_fr(), output);
  }

  // optional int32 mass_rl = 7 [default = 520];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mass_rl(), output);
  }

  // optional int32 mass_rr = 8 [default = 520];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mass_rr(), output);
  }

  // optional double eps = 9 [default = 0.01];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->eps(), output);
  }

  // repeated double matrix_q = 10;
  for (int i = 0, n = this->matrix_q_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->matrix_q(i), output);
  }

  // repeated double reverse_matrix_q = 11;
  for (int i = 0, n = this->reverse_matrix_q_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->reverse_matrix_q(i), output);
  }

  // optional int32 cutoff_freq = 12 [default = 10];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cutoff_freq(), output);
  }

  // optional int32 mean_filter_window_size = 13 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mean_filter_window_size(), output);
  }

  // optional int32 max_iteration = 14 [default = 100];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_iteration(), output);
  }

  // optional double max_lateral_acceleration = 15 [default = 5];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_lateral_acceleration(), output);
  }

  // optional .controller.GainScheduler lat_err_gain_scheduler = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::lat_err_gain_scheduler(this), output);
  }

  // optional .controller.GainScheduler heading_err_gain_scheduler = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::heading_err_gain_scheduler(this), output);
  }

  // optional .controller.LeadlagConf reverse_leadlag_conf = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::reverse_leadlag_conf(this), output);
  }

  // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->enable_reverse_leadlag_compensation(), output);
  }

  // optional bool enable_look_ahead_back_control = 20 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->enable_look_ahead_back_control(), output);
  }

  // optional double lookahead_station = 21 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->lookahead_station(), output);
  }

  // optional double lookback_station = 22 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lookback_station(), output);
  }

  // optional .controller.MracConf steer_mrac_conf = 23;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::steer_mrac_conf(this), output);
  }

  // optional bool enable_steer_mrac_control = 24 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_steer_mrac_control(), output);
  }

  // optional double lookahead_station_high_speed = 25 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lookahead_station_high_speed(), output);
  }

  // optional double lookback_station_high_speed = 26 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->lookback_station_high_speed(), output);
  }

  // optional double matrix_r = 27;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->matrix_r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.LatControllerConf)
}

::google::protobuf::uint8* LatControllerConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.LatControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1 [default = 0.01];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ts(), target);
  }

  // optional int32 preview_window = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preview_window(), target);
  }

  // optional double cf = 3 [default = 155494.663];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cf(), target);
  }

  // optional double cr = 4 [default = 155494.663];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cr(), target);
  }

  // optional int32 mass_fl = 5 [default = 520];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mass_fl(), target);
  }

  // optional int32 mass_fr = 6 [default = 520];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass_fr(), target);
  }

  // optional int32 mass_rl = 7 [default = 520];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mass_rl(), target);
  }

  // optional int32 mass_rr = 8 [default = 520];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mass_rr(), target);
  }

  // optional double eps = 9 [default = 0.01];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->eps(), target);
  }

  // repeated double matrix_q = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->matrix_q_, target);

  // repeated double reverse_matrix_q = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->reverse_matrix_q_, target);

  // optional int32 cutoff_freq = 12 [default = 10];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 13 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 14 [default = 100];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 15 [default = 5];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_lateral_acceleration(), target);
  }

  // optional .controller.GainScheduler lat_err_gain_scheduler = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::lat_err_gain_scheduler(this), target);
  }

  // optional .controller.GainScheduler heading_err_gain_scheduler = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::heading_err_gain_scheduler(this), target);
  }

  // optional .controller.LeadlagConf reverse_leadlag_conf = 18;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::reverse_leadlag_conf(this), target);
  }

  // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->enable_reverse_leadlag_compensation(), target);
  }

  // optional bool enable_look_ahead_back_control = 20 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->enable_look_ahead_back_control(), target);
  }

  // optional double lookahead_station = 21 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->lookahead_station(), target);
  }

  // optional double lookback_station = 22 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lookback_station(), target);
  }

  // optional .controller.MracConf steer_mrac_conf = 23;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::steer_mrac_conf(this), target);
  }

  // optional bool enable_steer_mrac_control = 24 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_steer_mrac_control(), target);
  }

  // optional double lookahead_station_high_speed = 25 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lookahead_station_high_speed(), target);
  }

  // optional double lookback_station_high_speed = 26 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->lookback_station_high_speed(), target);
  }

  // optional double matrix_r = 27;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->matrix_r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.LatControllerConf)
  return target;
}

size_t LatControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.LatControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->matrix_q_size());
    total_size += data_size;
  }

  // repeated double reverse_matrix_q = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->reverse_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reverse_matrix_q_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .controller.GainScheduler lat_err_gain_scheduler = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lat_err_gain_scheduler_);
    }

    // optional .controller.GainScheduler heading_err_gain_scheduler = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *heading_err_gain_scheduler_);
    }

    // optional .controller.LeadlagConf reverse_leadlag_conf = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_leadlag_conf_);
    }

    // optional .controller.MracConf steer_mrac_conf = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steer_mrac_conf_);
    }

    // optional int32 preview_window = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preview_window());
    }

    // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool enable_look_ahead_back_control = 20 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool enable_steer_mrac_control = 24 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double lookahead_station = 21 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station = 22 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double lookahead_station_high_speed = 25 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station_high_speed = 26 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double matrix_r = 27;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_iteration = 14 [default = 100];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iteration());
    }

    // optional double ts = 1 [default = 0.01];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double cf = 3 [default = 155494.663];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double cr = 4 [default = 155494.663];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional int32 mass_fl = 5 [default = 520];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fl());
    }

    // optional int32 mass_fr = 6 [default = 520];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_fr());
    }

    // optional int32 mass_rl = 7 [default = 520];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rl());
    }

    // optional int32 mass_rr = 8 [default = 520];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_rr());
    }

    // optional double eps = 9 [default = 0.01];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional int32 cutoff_freq = 12 [default = 10];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cutoff_freq());
    }

    // optional int32 mean_filter_window_size = 13 [default = 10];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_filter_window_size());
    }

  }
  // optional double max_lateral_acceleration = 15 [default = 5];
  if (cached_has_bits & 0x01000000u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LatControllerConf* source =
      ::google::protobuf::DynamicCastToGenerated<LatControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.LatControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.LatControllerConf)
    MergeFrom(*source);
  }
}

void LatControllerConf::MergeFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  reverse_matrix_q_.MergeFrom(from.reverse_matrix_q_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat_err_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_heading_err_gain_scheduler()->::controller::GainScheduler::MergeFrom(from.heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reverse_leadlag_conf()->::controller::LeadlagConf::MergeFrom(from.reverse_leadlag_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_steer_mrac_conf()->::controller::MracConf::MergeFrom(from.steer_mrac_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_look_ahead_back_control_ = from.enable_look_ahead_back_control_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_steer_mrac_control_ = from.enable_steer_mrac_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lookahead_station_ = from.lookahead_station_;
    }
    if (cached_has_bits & 0x00000200u) {
      lookback_station_ = from.lookback_station_;
    }
    if (cached_has_bits & 0x00000400u) {
      lookahead_station_high_speed_ = from.lookahead_station_high_speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      lookback_station_high_speed_ = from.lookback_station_high_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      matrix_r_ = from.matrix_r_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00004000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00008000u) {
      cf_ = from.cf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      cr_ = from.cr_;
    }
    if (cached_has_bits & 0x00020000u) {
      mass_fl_ = from.mass_fl_;
    }
    if (cached_has_bits & 0x00040000u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00080000u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00100000u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00200000u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00400000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00800000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_max_lateral_acceleration(from.max_lateral_acceleration());
  }
}

void LatControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatControllerConf::CopyFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatControllerConf::IsInitialized() const {
  return true;
}

void LatControllerConf::Swap(LatControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatControllerConf::InternalSwap(LatControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_q_.InternalSwap(&other->matrix_q_);
  reverse_matrix_q_.InternalSwap(&other->reverse_matrix_q_);
  swap(lat_err_gain_scheduler_, other->lat_err_gain_scheduler_);
  swap(heading_err_gain_scheduler_, other->heading_err_gain_scheduler_);
  swap(reverse_leadlag_conf_, other->reverse_leadlag_conf_);
  swap(steer_mrac_conf_, other->steer_mrac_conf_);
  swap(preview_window_, other->preview_window_);
  swap(enable_reverse_leadlag_compensation_, other->enable_reverse_leadlag_compensation_);
  swap(enable_look_ahead_back_control_, other->enable_look_ahead_back_control_);
  swap(enable_steer_mrac_control_, other->enable_steer_mrac_control_);
  swap(lookahead_station_, other->lookahead_station_);
  swap(lookback_station_, other->lookback_station_);
  swap(lookahead_station_high_speed_, other->lookahead_station_high_speed_);
  swap(lookback_station_high_speed_, other->lookback_station_high_speed_);
  swap(matrix_r_, other->matrix_r_);
  swap(max_iteration_, other->max_iteration_);
  swap(ts_, other->ts_);
  swap(cf_, other->cf_);
  swap(cr_, other->cr_);
  swap(mass_fl_, other->mass_fl_);
  swap(mass_fr_, other->mass_fr_);
  swap(mass_rl_, other->mass_rl_);
  swap(mass_rr_, other->mass_rr_);
  swap(eps_, other->eps_);
  swap(cutoff_freq_, other->cutoff_freq_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(max_lateral_acceleration_, other->max_lateral_acceleration_);
}

::google::protobuf::Metadata LatControllerConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lat_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_lat_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::LatControllerConf* Arena::CreateMaybeMessage< ::controller::LatControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::LatControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
