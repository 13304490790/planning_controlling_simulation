// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpc_controller_conf.proto

#ifndef PROTOBUF_INCLUDED_mpc_5fcontroller_5fconf_2eproto
#define PROTOBUF_INCLUDED_mpc_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "calibration_table.pb.h"
#include "gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mpc_5fcontroller_5fconf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_mpc_5fcontroller_5fconf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_mpc_5fcontroller_5fconf_2eproto();
namespace controller {
class MPCControllerConf;
class MPCControllerConfDefaultTypeInternal;
extern MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::MPCControllerConf* Arena::CreateMaybeMessage<::controller::MPCControllerConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

// ===================================================================

class MPCControllerConf :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.MPCControllerConf) */ {
 public:
  MPCControllerConf();
  virtual ~MPCControllerConf();

  MPCControllerConf(const MPCControllerConf& from);

  inline MPCControllerConf& operator=(const MPCControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MPCControllerConf(MPCControllerConf&& from) noexcept
    : MPCControllerConf() {
    *this = ::std::move(from);
  }

  inline MPCControllerConf& operator=(MPCControllerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MPCControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPCControllerConf* internal_default_instance() {
    return reinterpret_cast<const MPCControllerConf*>(
               &_MPCControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MPCControllerConf* other);
  friend void swap(MPCControllerConf& a, MPCControllerConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MPCControllerConf* New() const final {
    return CreateMaybeMessage<MPCControllerConf>(nullptr);
  }

  MPCControllerConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MPCControllerConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MPCControllerConf& from);
  void MergeFrom(const MPCControllerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPCControllerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double matrix_q = 9;
  int matrix_q_size() const;
  void clear_matrix_q();
  static const int kMatrixQFieldNumber = 9;
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_q() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_q();

  // repeated double matrix_r = 10;
  int matrix_r_size() const;
  void clear_matrix_r();
  static const int kMatrixRFieldNumber = 10;
  double matrix_r(int index) const;
  void set_matrix_r(int index, double value);
  void add_matrix_r(double value);
  const ::google::protobuf::RepeatedField< double >&
      matrix_r() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_matrix_r();

  // optional .controller.GainScheduler lat_err_gain_scheduler = 18;
  bool has_lat_err_gain_scheduler() const;
  void clear_lat_err_gain_scheduler();
  static const int kLatErrGainSchedulerFieldNumber = 18;
  const ::controller::GainScheduler& lat_err_gain_scheduler() const;
  ::controller::GainScheduler* release_lat_err_gain_scheduler();
  ::controller::GainScheduler* mutable_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::controller::GainScheduler* lat_err_gain_scheduler);

  // optional .controller.GainScheduler heading_err_gain_scheduler = 19;
  bool has_heading_err_gain_scheduler() const;
  void clear_heading_err_gain_scheduler();
  static const int kHeadingErrGainSchedulerFieldNumber = 19;
  const ::controller::GainScheduler& heading_err_gain_scheduler() const;
  ::controller::GainScheduler* release_heading_err_gain_scheduler();
  ::controller::GainScheduler* mutable_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::controller::GainScheduler* heading_err_gain_scheduler);

  // optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
  bool has_steer_weight_gain_scheduler() const;
  void clear_steer_weight_gain_scheduler();
  static const int kSteerWeightGainSchedulerFieldNumber = 20;
  const ::controller::GainScheduler& steer_weight_gain_scheduler() const;
  ::controller::GainScheduler* release_steer_weight_gain_scheduler();
  ::controller::GainScheduler* mutable_steer_weight_gain_scheduler();
  void set_allocated_steer_weight_gain_scheduler(::controller::GainScheduler* steer_weight_gain_scheduler);

  // optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
  bool has_feedforwardterm_gain_scheduler() const;
  void clear_feedforwardterm_gain_scheduler();
  static const int kFeedforwardtermGainSchedulerFieldNumber = 21;
  const ::controller::GainScheduler& feedforwardterm_gain_scheduler() const;
  ::controller::GainScheduler* release_feedforwardterm_gain_scheduler();
  ::controller::GainScheduler* mutable_feedforwardterm_gain_scheduler();
  void set_allocated_feedforwardterm_gain_scheduler(::controller::GainScheduler* feedforwardterm_gain_scheduler);

  // optional .controller.ControlCalibrationTable calibration_table = 22;
  bool has_calibration_table() const;
  void clear_calibration_table();
  static const int kCalibrationTableFieldNumber = 22;
  const ::controller::ControlCalibrationTable& calibration_table() const;
  ::controller::ControlCalibrationTable* release_calibration_table();
  ::controller::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::controller::ControlCalibrationTable* calibration_table);

  // optional double ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  double ts() const;
  void set_ts(double value);

  // optional double cf = 2;
  bool has_cf() const;
  void clear_cf();
  static const int kCfFieldNumber = 2;
  double cf() const;
  void set_cf(double value);

  // optional double cr = 3;
  bool has_cr() const;
  void clear_cr();
  static const int kCrFieldNumber = 3;
  double cr() const;
  void set_cr(double value);

  // optional int32 mass_fl = 4;
  bool has_mass_fl() const;
  void clear_mass_fl();
  static const int kMassFlFieldNumber = 4;
  ::google::protobuf::int32 mass_fl() const;
  void set_mass_fl(::google::protobuf::int32 value);

  // optional int32 mass_fr = 5;
  bool has_mass_fr() const;
  void clear_mass_fr();
  static const int kMassFrFieldNumber = 5;
  ::google::protobuf::int32 mass_fr() const;
  void set_mass_fr(::google::protobuf::int32 value);

  // optional int32 mass_rl = 6;
  bool has_mass_rl() const;
  void clear_mass_rl();
  static const int kMassRlFieldNumber = 6;
  ::google::protobuf::int32 mass_rl() const;
  void set_mass_rl(::google::protobuf::int32 value);

  // optional int32 mass_rr = 7;
  bool has_mass_rr() const;
  void clear_mass_rr();
  static const int kMassRrFieldNumber = 7;
  ::google::protobuf::int32 mass_rr() const;
  void set_mass_rr(::google::protobuf::int32 value);

  // optional double eps = 8;
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 8;
  double eps() const;
  void set_eps(double value);

  // optional int32 cutoff_freq = 11;
  bool has_cutoff_freq() const;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 11;
  ::google::protobuf::int32 cutoff_freq() const;
  void set_cutoff_freq(::google::protobuf::int32 value);

  // optional int32 mean_filter_window_size = 12;
  bool has_mean_filter_window_size() const;
  void clear_mean_filter_window_size();
  static const int kMeanFilterWindowSizeFieldNumber = 12;
  ::google::protobuf::int32 mean_filter_window_size() const;
  void set_mean_filter_window_size(::google::protobuf::int32 value);

  // optional double max_lateral_acceleration = 14;
  bool has_max_lateral_acceleration() const;
  void clear_max_lateral_acceleration();
  static const int kMaxLateralAccelerationFieldNumber = 14;
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);

  // optional double standstill_acceleration = 15;
  bool has_standstill_acceleration() const;
  void clear_standstill_acceleration();
  static const int kStandstillAccelerationFieldNumber = 15;
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);

  // optional double brake_minimum_action = 16;
  bool has_brake_minimum_action() const;
  void clear_brake_minimum_action();
  static const int kBrakeMinimumActionFieldNumber = 16;
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);

  // optional double throttle_minimum_action = 17;
  bool has_throttle_minimum_action() const;
  void clear_throttle_minimum_action();
  static const int kThrottleMinimumActionFieldNumber = 17;
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);

  // optional int32 max_iteration = 13;
  bool has_max_iteration() const;
  void clear_max_iteration();
  static const int kMaxIterationFieldNumber = 13;
  ::google::protobuf::int32 max_iteration() const;
  void set_max_iteration(::google::protobuf::int32 value);

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  bool has_enable_mpc_feedforward_compensation() const;
  void clear_enable_mpc_feedforward_compensation();
  static const int kEnableMpcFeedforwardCompensationFieldNumber = 23;
  bool enable_mpc_feedforward_compensation() const;
  void set_enable_mpc_feedforward_compensation(bool value);

  // optional double unconstrained_control_diff_limit = 24;
  bool has_unconstrained_control_diff_limit() const;
  void clear_unconstrained_control_diff_limit();
  static const int kUnconstrainedControlDiffLimitFieldNumber = 24;
  double unconstrained_control_diff_limit() const;
  void set_unconstrained_control_diff_limit(double value);

  // @@protoc_insertion_point(class_scope:controller.MPCControllerConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > matrix_q_;
  ::google::protobuf::RepeatedField< double > matrix_r_;
  ::controller::GainScheduler* lat_err_gain_scheduler_;
  ::controller::GainScheduler* heading_err_gain_scheduler_;
  ::controller::GainScheduler* steer_weight_gain_scheduler_;
  ::controller::GainScheduler* feedforwardterm_gain_scheduler_;
  ::controller::ControlCalibrationTable* calibration_table_;
  double ts_;
  double cf_;
  double cr_;
  ::google::protobuf::int32 mass_fl_;
  ::google::protobuf::int32 mass_fr_;
  ::google::protobuf::int32 mass_rl_;
  ::google::protobuf::int32 mass_rr_;
  double eps_;
  ::google::protobuf::int32 cutoff_freq_;
  ::google::protobuf::int32 mean_filter_window_size_;
  double max_lateral_acceleration_;
  double standstill_acceleration_;
  double brake_minimum_action_;
  double throttle_minimum_action_;
  ::google::protobuf::int32 max_iteration_;
  bool enable_mpc_feedforward_compensation_;
  double unconstrained_control_diff_limit_;
  friend struct ::TableStruct_mpc_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPCControllerConf

// optional double ts = 1;
inline bool MPCControllerConf::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MPCControllerConf::clear_ts() {
  ts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.ts)
  return ts_;
}
inline void MPCControllerConf::set_ts(double value) {
  _has_bits_[0] |= 0x00000020u;
  ts_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.ts)
}

// optional double cf = 2;
inline bool MPCControllerConf::has_cf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MPCControllerConf::clear_cf() {
  cf_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.cf)
  return cf_;
}
inline void MPCControllerConf::set_cf(double value) {
  _has_bits_[0] |= 0x00000040u;
  cf_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.cf)
}

// optional double cr = 3;
inline bool MPCControllerConf::has_cr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MPCControllerConf::clear_cr() {
  cr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.cr)
  return cr_;
}
inline void MPCControllerConf::set_cr(double value) {
  _has_bits_[0] |= 0x00000080u;
  cr_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.cr)
}

// optional int32 mass_fl = 4;
inline bool MPCControllerConf::has_mass_fl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MPCControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.mass_fl)
  return mass_fl_;
}
inline void MPCControllerConf::set_mass_fl(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  mass_fl_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.mass_fl)
}

// optional int32 mass_fr = 5;
inline bool MPCControllerConf::has_mass_fr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MPCControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.mass_fr)
  return mass_fr_;
}
inline void MPCControllerConf::set_mass_fr(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  mass_fr_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.mass_fr)
}

// optional int32 mass_rl = 6;
inline bool MPCControllerConf::has_mass_rl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MPCControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.mass_rl)
  return mass_rl_;
}
inline void MPCControllerConf::set_mass_rl(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  mass_rl_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.mass_rl)
}

// optional int32 mass_rr = 7;
inline bool MPCControllerConf::has_mass_rr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MPCControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.mass_rr)
  return mass_rr_;
}
inline void MPCControllerConf::set_mass_rr(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  mass_rr_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.mass_rr)
}

// optional double eps = 8;
inline bool MPCControllerConf::has_eps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MPCControllerConf::clear_eps() {
  eps_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.eps)
  return eps_;
}
inline void MPCControllerConf::set_eps(double value) {
  _has_bits_[0] |= 0x00001000u;
  eps_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.eps)
}

// repeated double matrix_q = 9;
inline int MPCControllerConf::matrix_q_size() const {
  return matrix_q_.size();
}
inline void MPCControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
inline double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.matrix_q)
  return matrix_q_.Get(index);
}
inline void MPCControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.matrix_q)
}
inline void MPCControllerConf::add_matrix_q(double value) {
  matrix_q_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MPCControllerConf.matrix_q)
}
inline const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:controller.MPCControllerConf.matrix_q)
  return matrix_q_;
}
inline ::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:controller.MPCControllerConf.matrix_q)
  return &matrix_q_;
}

// repeated double matrix_r = 10;
inline int MPCControllerConf::matrix_r_size() const {
  return matrix_r_.size();
}
inline void MPCControllerConf::clear_matrix_r() {
  matrix_r_.Clear();
}
inline double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.matrix_r)
  return matrix_r_.Get(index);
}
inline void MPCControllerConf::set_matrix_r(int index, double value) {
  matrix_r_.Set(index, value);
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.matrix_r)
}
inline void MPCControllerConf::add_matrix_r(double value) {
  matrix_r_.Add(value);
  // @@protoc_insertion_point(field_add:controller.MPCControllerConf.matrix_r)
}
inline const ::google::protobuf::RepeatedField< double >&
MPCControllerConf::matrix_r() const {
  // @@protoc_insertion_point(field_list:controller.MPCControllerConf.matrix_r)
  return matrix_r_;
}
inline ::google::protobuf::RepeatedField< double >*
MPCControllerConf::mutable_matrix_r() {
  // @@protoc_insertion_point(field_mutable_list:controller.MPCControllerConf.matrix_r)
  return &matrix_r_;
}

// optional int32 cutoff_freq = 11;
inline bool MPCControllerConf::has_cutoff_freq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MPCControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::int32 MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.cutoff_freq)
  return cutoff_freq_;
}
inline void MPCControllerConf::set_cutoff_freq(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.cutoff_freq)
}

// optional int32 mean_filter_window_size = 12;
inline bool MPCControllerConf::has_mean_filter_window_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MPCControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int32 MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.mean_filter_window_size)
  return mean_filter_window_size_;
}
inline void MPCControllerConf::set_mean_filter_window_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  mean_filter_window_size_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.mean_filter_window_size)
}

// optional int32 max_iteration = 13;
inline bool MPCControllerConf::has_max_iteration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MPCControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::int32 MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.max_iteration)
  return max_iteration_;
}
inline void MPCControllerConf::set_max_iteration(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.max_iteration)
}

// optional double max_lateral_acceleration = 14;
inline bool MPCControllerConf::has_max_lateral_acceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MPCControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.max_lateral_acceleration)
  return max_lateral_acceleration_;
}
inline void MPCControllerConf::set_max_lateral_acceleration(double value) {
  _has_bits_[0] |= 0x00008000u;
  max_lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.max_lateral_acceleration)
}

// optional double standstill_acceleration = 15;
inline bool MPCControllerConf::has_standstill_acceleration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MPCControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.standstill_acceleration)
  return standstill_acceleration_;
}
inline void MPCControllerConf::set_standstill_acceleration(double value) {
  _has_bits_[0] |= 0x00010000u;
  standstill_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.standstill_acceleration)
}

// optional double brake_minimum_action = 16;
inline bool MPCControllerConf::has_brake_minimum_action() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MPCControllerConf::clear_brake_minimum_action() {
  brake_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double MPCControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.brake_minimum_action)
  return brake_minimum_action_;
}
inline void MPCControllerConf::set_brake_minimum_action(double value) {
  _has_bits_[0] |= 0x00020000u;
  brake_minimum_action_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.brake_minimum_action)
}

// optional double throttle_minimum_action = 17;
inline bool MPCControllerConf::has_throttle_minimum_action() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MPCControllerConf::clear_throttle_minimum_action() {
  throttle_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double MPCControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.throttle_minimum_action)
  return throttle_minimum_action_;
}
inline void MPCControllerConf::set_throttle_minimum_action(double value) {
  _has_bits_[0] |= 0x00040000u;
  throttle_minimum_action_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.throttle_minimum_action)
}

// optional .controller.GainScheduler lat_err_gain_scheduler = 18;
inline bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::controller::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const {
  const ::controller::GainScheduler* p = lat_err_gain_scheduler_;
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.lat_err_gain_scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::GainScheduler*>(
      &::controller::_GainScheduler_default_instance_);
}
inline ::controller::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:controller.MPCControllerConf.lat_err_gain_scheduler)
  _has_bits_[0] &= ~0x00000001u;
  ::controller::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::controller::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000001u;
  if (lat_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::GainScheduler>(GetArenaNoVirtual());
    lat_err_gain_scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MPCControllerConf.lat_err_gain_scheduler)
  return lat_err_gain_scheduler_;
}
inline void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::controller::GainScheduler* lat_err_gain_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lat_err_gain_scheduler_);
  }
  if (lat_err_gain_scheduler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_err_gain_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lat_err_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:controller.MPCControllerConf.lat_err_gain_scheduler)
}

// optional .controller.GainScheduler heading_err_gain_scheduler = 19;
inline bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::controller::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const {
  const ::controller::GainScheduler* p = heading_err_gain_scheduler_;
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.heading_err_gain_scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::GainScheduler*>(
      &::controller::_GainScheduler_default_instance_);
}
inline ::controller::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:controller.MPCControllerConf.heading_err_gain_scheduler)
  _has_bits_[0] &= ~0x00000002u;
  ::controller::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::controller::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000002u;
  if (heading_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::GainScheduler>(GetArenaNoVirtual());
    heading_err_gain_scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MPCControllerConf.heading_err_gain_scheduler)
  return heading_err_gain_scheduler_;
}
inline void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::controller::GainScheduler* heading_err_gain_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heading_err_gain_scheduler_);
  }
  if (heading_err_gain_scheduler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heading_err_gain_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heading_err_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:controller.MPCControllerConf.heading_err_gain_scheduler)
}

// optional .controller.GainScheduler steer_weight_gain_scheduler = 20;
inline bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::controller::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const {
  const ::controller::GainScheduler* p = steer_weight_gain_scheduler_;
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.steer_weight_gain_scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::GainScheduler*>(
      &::controller::_GainScheduler_default_instance_);
}
inline ::controller::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:controller.MPCControllerConf.steer_weight_gain_scheduler)
  _has_bits_[0] &= ~0x00000004u;
  ::controller::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::controller::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() {
  _has_bits_[0] |= 0x00000004u;
  if (steer_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::GainScheduler>(GetArenaNoVirtual());
    steer_weight_gain_scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MPCControllerConf.steer_weight_gain_scheduler)
  return steer_weight_gain_scheduler_;
}
inline void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::controller::GainScheduler* steer_weight_gain_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(steer_weight_gain_scheduler_);
  }
  if (steer_weight_gain_scheduler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steer_weight_gain_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steer_weight_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:controller.MPCControllerConf.steer_weight_gain_scheduler)
}

// optional .controller.GainScheduler feedforwardterm_gain_scheduler = 21;
inline bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::controller::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const {
  const ::controller::GainScheduler* p = feedforwardterm_gain_scheduler_;
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.feedforwardterm_gain_scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::GainScheduler*>(
      &::controller::_GainScheduler_default_instance_);
}
inline ::controller::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_release:controller.MPCControllerConf.feedforwardterm_gain_scheduler)
  _has_bits_[0] &= ~0x00000008u;
  ::controller::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = nullptr;
  return temp;
}
inline ::controller::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() {
  _has_bits_[0] |= 0x00000008u;
  if (feedforwardterm_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::GainScheduler>(GetArenaNoVirtual());
    feedforwardterm_gain_scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MPCControllerConf.feedforwardterm_gain_scheduler)
  return feedforwardterm_gain_scheduler_;
}
inline void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::controller::GainScheduler* feedforwardterm_gain_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(feedforwardterm_gain_scheduler_);
  }
  if (feedforwardterm_gain_scheduler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feedforwardterm_gain_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feedforwardterm_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:controller.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// optional .controller.ControlCalibrationTable calibration_table = 22;
inline bool MPCControllerConf::has_calibration_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::controller::ControlCalibrationTable& MPCControllerConf::calibration_table() const {
  const ::controller::ControlCalibrationTable* p = calibration_table_;
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.calibration_table)
  return p != nullptr ? *p : *reinterpret_cast<const ::controller::ControlCalibrationTable*>(
      &::controller::_ControlCalibrationTable_default_instance_);
}
inline ::controller::ControlCalibrationTable* MPCControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:controller.MPCControllerConf.calibration_table)
  _has_bits_[0] &= ~0x00000010u;
  ::controller::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = nullptr;
  return temp;
}
inline ::controller::ControlCalibrationTable* MPCControllerConf::mutable_calibration_table() {
  _has_bits_[0] |= 0x00000010u;
  if (calibration_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::controller::ControlCalibrationTable>(GetArenaNoVirtual());
    calibration_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.MPCControllerConf.calibration_table)
  return calibration_table_;
}
inline void MPCControllerConf::set_allocated_calibration_table(::controller::ControlCalibrationTable* calibration_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(calibration_table_);
  }
  if (calibration_table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calibration_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:controller.MPCControllerConf.calibration_table)
}

// optional bool enable_mpc_feedforward_compensation = 23 [default = false];
inline bool MPCControllerConf::has_enable_mpc_feedforward_compensation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MPCControllerConf::clear_enable_mpc_feedforward_compensation() {
  enable_mpc_feedforward_compensation_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool MPCControllerConf::enable_mpc_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.enable_mpc_feedforward_compensation)
  return enable_mpc_feedforward_compensation_;
}
inline void MPCControllerConf::set_enable_mpc_feedforward_compensation(bool value) {
  _has_bits_[0] |= 0x00100000u;
  enable_mpc_feedforward_compensation_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.enable_mpc_feedforward_compensation)
}

// optional double unconstrained_control_diff_limit = 24;
inline bool MPCControllerConf::has_unconstrained_control_diff_limit() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MPCControllerConf::clear_unconstrained_control_diff_limit() {
  unconstrained_control_diff_limit_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double MPCControllerConf::unconstrained_control_diff_limit() const {
  // @@protoc_insertion_point(field_get:controller.MPCControllerConf.unconstrained_control_diff_limit)
  return unconstrained_control_diff_limit_;
}
inline void MPCControllerConf::set_unconstrained_control_diff_limit(double value) {
  _has_bits_[0] |= 0x00200000u;
  unconstrained_control_diff_limit_ = value;
  // @@protoc_insertion_point(field_set:controller.MPCControllerConf.unconstrained_control_diff_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_mpc_5fcontroller_5fconf_2eproto
