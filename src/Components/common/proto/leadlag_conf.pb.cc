// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leadlag_conf.proto

#include "leadlag_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace controller {
class LeadlagConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeadlagConf> _instance;
} _LeadlagConf_default_instance_;
}  // namespace controller
static void InitDefaultsLeadlagConf_leadlag_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_LeadlagConf_default_instance_;
    new (ptr) ::controller::LeadlagConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::LeadlagConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeadlagConf_leadlag_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeadlagConf_leadlag_5fconf_2eproto}, {}};

void InitDefaults_leadlag_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LeadlagConf_leadlag_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_leadlag_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_leadlag_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_leadlag_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_leadlag_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, innerstate_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, alpha_),
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, beta_),
  PROTOBUF_FIELD_OFFSET(::controller::LeadlagConf, tau_),
  1,
  2,
  3,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::controller::LeadlagConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_LeadlagConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_leadlag_5fconf_2eproto = {
  {}, AddDescriptors_leadlag_5fconf_2eproto, "leadlag_conf.proto", schemas,
  file_default_instances, TableStruct_leadlag_5fconf_2eproto::offsets,
  file_level_metadata_leadlag_5fconf_2eproto, 1, file_level_enum_descriptors_leadlag_5fconf_2eproto, file_level_service_descriptors_leadlag_5fconf_2eproto,
};

const char descriptor_table_protodef_leadlag_5fconf_2eproto[] =
  "\n\022leadlag_conf.proto\022\ncontroller\"l\n\013Lead"
  "lagConf\022(\n\033innerstate_saturation_level\030\001"
  " \001(\001:\003300\022\022\n\005alpha\030\002 \001(\001:\0030.1\022\017\n\004beta\030\003 "
  "\001(\001:\0011\022\016\n\003tau\030\004 \001(\001:\0010"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_leadlag_5fconf_2eproto = {
  false, InitDefaults_leadlag_5fconf_2eproto, 
  descriptor_table_protodef_leadlag_5fconf_2eproto,
  "leadlag_conf.proto", &assign_descriptors_table_leadlag_5fconf_2eproto, 142,
};

void AddDescriptors_leadlag_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_leadlag_5fconf_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_leadlag_5fconf_2eproto = []() { AddDescriptors_leadlag_5fconf_2eproto(); return true; }();
namespace controller {

// ===================================================================

void LeadlagConf::InitAsDefaultInstance() {
}
class LeadlagConf::HasBitSetters {
 public:
  static void set_has_innerstate_saturation_level(LeadlagConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_alpha(LeadlagConf* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_beta(LeadlagConf* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tau(LeadlagConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeadlagConf::kInnerstateSaturationLevelFieldNumber;
const int LeadlagConf::kAlphaFieldNumber;
const int LeadlagConf::kBetaFieldNumber;
const int LeadlagConf::kTauFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeadlagConf::LeadlagConf()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.LeadlagConf)
}
LeadlagConf::LeadlagConf(const LeadlagConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tau_, &from.tau_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&tau_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:controller.LeadlagConf)
}

void LeadlagConf::SharedCtor() {
  tau_ = 0;
  innerstate_saturation_level_ = 300;
  alpha_ = 0.1;
  beta_ = 1;
}

LeadlagConf::~LeadlagConf() {
  // @@protoc_insertion_point(destructor:controller.LeadlagConf)
  SharedDtor();
}

void LeadlagConf::SharedDtor() {
}

void LeadlagConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeadlagConf& LeadlagConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeadlagConf_leadlag_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LeadlagConf::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.LeadlagConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    tau_ = 0;
    innerstate_saturation_level_ = 300;
    alpha_ = 0.1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeadlagConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeadlagConf*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double innerstate_saturation_level = 1 [default = 300];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_innerstate_saturation_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double alpha = 2 [default = 0.1];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_alpha(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double beta = 3 [default = 1];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_beta(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double tau = 4 [default = 0];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_tau(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeadlagConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.LeadlagConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double innerstate_saturation_level = 1 [default = 300];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_innerstate_saturation_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &innerstate_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double alpha = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_alpha(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_beta(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tau = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_tau(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tau_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.LeadlagConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.LeadlagConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeadlagConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.LeadlagConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double innerstate_saturation_level = 1 [default = 300];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->innerstate_saturation_level(), output);
  }

  // optional double alpha = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->alpha(), output);
  }

  // optional double beta = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->beta(), output);
  }

  // optional double tau = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tau(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.LeadlagConf)
}

::google::protobuf::uint8* LeadlagConf::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:controller.LeadlagConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double innerstate_saturation_level = 1 [default = 300];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->innerstate_saturation_level(), target);
  }

  // optional double alpha = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->alpha(), target);
  }

  // optional double beta = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->beta(), target);
  }

  // optional double tau = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tau(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.LeadlagConf)
  return target;
}

size_t LeadlagConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.LeadlagConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double tau = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double innerstate_saturation_level = 1 [default = 300];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double alpha = 2 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double beta = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeadlagConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LeadlagConf* source =
      ::google::protobuf::DynamicCastToGenerated<LeadlagConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.LeadlagConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.LeadlagConf)
    MergeFrom(*source);
  }
}

void LeadlagConf::MergeFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tau_ = from.tau_;
    }
    if (cached_has_bits & 0x00000002u) {
      innerstate_saturation_level_ = from.innerstate_saturation_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000008u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeadlagConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeadlagConf::CopyFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeadlagConf::IsInitialized() const {
  return true;
}

void LeadlagConf::Swap(LeadlagConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeadlagConf::InternalSwap(LeadlagConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tau_, other->tau_);
  swap(innerstate_saturation_level_, other->innerstate_saturation_level_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
}

::google::protobuf::Metadata LeadlagConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_leadlag_5fconf_2eproto);
  return ::file_level_metadata_leadlag_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::controller::LeadlagConf* Arena::CreateMaybeMessage< ::controller::LeadlagConf >(Arena* arena) {
  return Arena::CreateInternal< ::controller::LeadlagConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
